---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Backup and DR Service"
description: |-
  A backup plan defines when and how to back up a resource, including the backup's schedule, retention, and location.
---

# google_backup_dr_backup_plan

A backup plan defines when and how to back up a resource, including the backup's schedule, retention, and location.


To get more information about BackupPlan, see:

* [API documentation](https://cloud.google.com/backup-disaster-recovery/docs/reference/rest)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/backup-disaster-recovery/docs)

## Example Usage - Backup Dr Backup Plan


```hcl
variable "backup_rules" {
  type = list(object({
    rule_id                   = string
    backup_retention_days     = number
    recurrence_type           = string
    frequency                 = number
    time_zone                 = string
    start_hour_of_day         = number
    end_hour_of_day           = number
    days_of_week              = list(string)  # Optional for WEEKLY
    days_of_month             = list(number)  # Optional for MONTHLY
    week_day_of_month         = object({      # Optional for MONTHLY
      week_of_month = string
      day_of_week   = string
    })
    months                    = list(string)  # Optional for YEARLY
  }))
}
default = [
    {
      rule_id                   = "rule-1"
      backup_retention_days     = 5
      recurrence_type           = "HOURLY"
      frequency                 = 6
      time_zone                 = "UTC"
      start_hour_of_day         = 0
      end_hour_of_day           = 24
      days_of_week              = []
      days_of_month             = []
      week_day_of_month = {
        week_of_month = ""
        day_of_week   = ""
      }
      months                    = []
    },
    {
      rule_id                   = "rule-2"
      backup_retention_days     = 10
      recurrence_type           = "DAILY"
      frequency                 = 1
      time_zone                 = "UTC"
      start_hour_of_day         = 0
      end_hour_of_day           = 24
      days_of_week              = []
      days_of_month             = []
      week_day_of_month = {
        week_of_month = ""
        day_of_week   = ""
      }
      months                    = []
    },
    {
      rule_id                   = "rule-3"
      backup_retention_days     = 15
      recurrence_type           = "WEEKLY"
      frequency                 = 1
      time_zone                 = "UTC"
      start_hour_of_day         = 0
      end_hour_of_day           = 24
      days_of_week              = ["MONDAY", "WEDNESDAY", "FRIDAY"]
      days_of_month             = []
      week_day_of_month = {
        week_of_month = ""
        day_of_week   = ""
      }
      months                    = []
    },
    {
      rule_id                   = "rule-4"
      backup_retention_days     = 20
      recurrence_type           = "MONTHLY"
      frequency                 = 1
      time_zone                 = "UTC"
      start_hour_of_day         = 0
      end_hour_of_day           = 24
      days_of_week              = []
      days_of_month             = [1, 15, 30]
      week_day_of_month = {
        week_of_month = "FIRST"
        day_of_week   = "SUNDAY"
      }
      months                    = []
    },
    {
      rule_id                   = "rule-5"
      backup_retention_days     = 30
      recurrence_type           = "YEARLY"
      frequency                 = 1
      time_zone                 = "UTC"
      start_hour_of_day         = 0
      end_hour_of_day           = 24
      days_of_week              = []
      days_of_month             = []
      week_day_of_month = {
        week_of_month = "FIRST"
        day_of_week   = "SUNDAY"
      }
      months                    = ["JANUARY", "DECEMBER"]
    }
  ]

resource "google_backup_dr_backup_vault" "my-backup-vault" {
    project       = "<%= ctx[:vars]['project'] %>"
    location = "<%= ctx[:vars]['location'] %>"
    backup_vault_id    = "<%= ctx[:vars]['backup_vault_name'] %>"
    description = "This is a second backup vault built by Terraform."
    backup_minimum_enforced_retention_duration = "100000s"
    labels = {
      foo = "bar1"
      bar = "baz1"
    }
    annotations = {
      annotations1 = "bar1"
      annotations2 = "baz1"
    }
    force_update = "true"
    force_delete = "true"
    allow_missing = "true" 
}

resource "google_backup_dr_backup_plan" "<%= ctx[:vars]['primary_resource_id'] %>" {
  location      = "us-central1"
  backup_plan_id          = "bp-tf20"
  resource_type = "compute.googleapis.com/Instance"
  backup_vault  = "projects/nkuravi-consumer-billing-test/locations/us-central1/backupVaults/bv1"

  dynamic "backup_rules" {
    for_each = var.backup_rules
    content {
      rule_id = backup_rules.value.rule_id
      backup_retention_days = backup_rules.value.backup_retention_days

      standard_schedule {
        recurrence_type = backup_rules.value.recurrence_type

        hourly_frequency = backup_rules.value.recurrence_type == "HOURLY" ? backup_rules.value.frequency : null
        days_of_week     = backup_rules.value.recurrence_type == "WEEKLY" ? backup_rules.value.days_of_week : []
        days_of_month    = backup_rules.value.recurrence_type == "MONTHLY" ? backup_rules.value.days_of_month : []
        months           = backup_rules.value.recurrence_type == "YEARLY" ? backup_rules.value.months : []

        # Conditionally include week_day_of_month block
        dynamic "week_day_of_month" {
          for_each = backup_rules.value.recurrence_type == "YEARLY" ? [1] : []
          content {
            week_of_month = backup_rules.value.week_day_of_month.week_of_month
            day_of_week   = backup_rules.value.week_day_of_month.day_of_week
          }
        }

        time_zone = backup_rules.value.time_zone

        backup_window {
          start_hour_of_day = backup_rules.value.start_hour_of_day
          end_hour_of_day   = backup_rules.value.end_hour_of_day
        }
      }
    }
  }
}
```

## Argument Reference

The following arguments are supported:


* `backup_vault` -
  (Required)
  Backup vault where the backups gets stored using this Backup plan.

* `resource_type` -
  (Required)
  The resource type to which the `BackupPlan` will be applied. Examples include, "compute.googleapis.com/Instance" and "storage.googleapis.com/Bucket".

* `backup_rules` -
  (Required)
  The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
  Structure is [documented below](#nested_backup_rules).

* `location` -
  (Required)
  The location for the backup plan

* `backup_plan_id` -
  (Required)
  The ID of the backup plan


<a name="nested_backup_rules"></a>The `backup_rules` block supports:

* `rule_id` -
  (Required)
  The unique ID of this `BackupRule`. The `rule_id` is unique per `BackupPlan`.

* `backup_retention_days` -
  (Required)
  Configures the duration for which backup data will be kept. The value should be greater than or equal to minimum enforced retention of the backup vault.

* `standard_schedule` -
  (Required)
  StandardSchedule defines a schedule that runs within the confines of a defined window of days.
  Structure is [documented below](#nested_standard_schedule).


<a name="nested_standard_schedule"></a>The `standard_schedule` block supports:

* `recurrence_type` -
  (Required)
  RecurrenceType enumerates the applicable periodicity for the schedule.
  Possible values are: `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.

* `hourly_frequency` -
  (Optional)
  Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
  This is required for `recurrence_type`, `HOURLY` and is not applicable otherwise.

* `days_of_week` -
  (Optional)
  Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
  Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`.

* `days_of_month` -
  (Optional)
  Specifies days of months like 1, 5, or 14 on which jobs will run.

* `week_day_of_month` -
  (Optional)
  Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
  Structure is [documented below](#nested_week_day_of_month).

* `months` -
  (Optional)
  Specifies values of months
  Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.

* `time_zone` -
  (Required)
  The time zone to be used when interpreting the schedule.

* `backup_window` -
  (Optional)
  A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
  `NOT_RUN` if they do not start by the end of the window.
  Structure is [documented below](#nested_backup_window).


<a name="nested_week_day_of_month"></a>The `week_day_of_month` block supports:

* `week_of_month` -
  (Required)
  WeekOfMonth enumerates possible weeks in the month, e.g. the first, third, or last week of the month.
  Possible values are: `WEEK_OF_MONTH_UNSPECIFIED`, `FIRST`, `SECOND`, `THIRD`, `FOURTH`, `LAST`.

* `day_of_week` -
  (Required)
  Specifies the day of the week.
  Possible values are: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.

<a name="nested_backup_window"></a>The `backup_window` block supports:

* `start_hour_of_day` -
  (Required)
  The hour of the day (0-23) when the window starts, for example, if the value of the start hour of the day is 6, that means the backup window starts at 6:00.

* `end_hour_of_day` -
  (Optional)
  The hour of the day (1-24) when the window ends, for example, if the value of end hour of the day is 10, that means the backup window end time is 10:00.
  The end hour of the day should be greater than the start

- - -


* `description` -
  (Optional)
  The description allows for additional details about `BackupPlan` and its use cases to be provided.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/backupPlans/{{backup_plan_id}}`

* `name` -
  The name of backup plan resource created

* `backup_vault_service_account` -
  The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.

* `create_time` -
  When the `BackupPlan` was created.

* `update_time` -
  When the `BackupPlan` was last updated.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 60 minutes.
- `delete` - Default is 60 minutes.

## Import


BackupPlan can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/backupPlans/{{name}}`
* `{{project}}/{{location}}/{{name}}`
* `{{location}}/{{name}}`


In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import BackupPlan using one of the formats above. For example:

```tf
import {
  id = "projects/{{project}}/locations/{{location}}/backupPlans/{{name}}"
  to = google_backup_dr_backup_plan.default
}
```

When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), BackupPlan can be imported using one of the formats above. For example:

```
$ terraform import google_backup_dr_backup_plan.default projects/{{project}}/locations/{{location}}/backupPlans/{{name}}
$ terraform import google_backup_dr_backup_plan.default {{project}}/{{location}}/{{name}}
$ terraform import google_backup_dr_backup_plan.default {{location}}/{{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
