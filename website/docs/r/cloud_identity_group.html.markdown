---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Cloud Identity"
description: |-
  A Cloud Identity resource representing a Group.
---

# google\_cloud\_identity\_group

A Cloud Identity resource representing a Group.


To get more information about Group, see:

* [API documentation](https://cloud.google.com/identity/docs/reference/rest/v1beta1/groups)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/identity/docs/how-to/setup)

~> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the Cloud Identity API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage - Cloud Identity Groups Basic


```hcl
resource "google_cloud_identity_group" "cloud_identity_group_basic" {
  display_name         = "my-identity-group"
  initial_group_config = "WITH_INITIAL_OWNER"

  parent = "customers/A01b123xz"

  group_key {
  	id = "my-identity-group@example.com"
  }

  labels = {
    "cloudidentity.googleapis.com/groups.discussion_forum" = ""
  }
}
```
## Example Usage - Cloud Identity Groups Dynamic


```hcl
resource "google_cloud_identity_group" "cloud_identity_groups_dynamic" {
  display_name         = "my-identity-dynamic-group"
  initial_group_config = "WITH_INITIAL_OWNER"

  parent = "customers/A01b123xz"

  group_key {
    id = "my-identity-dynamic-group@example.com"
  }

  labels = {
    "cloudidentity.googleapis.com/groups.discussion_forum" = ""
    "cloudidentity.googleapis.com/groups.dynamic"          = ""
  }

  dynamic_group_metadata {
    queries {
      resource_type = "USER"
      query         = "user.addresses.exists(ad, ad.locality=='Sunnyvale')"
    }
  }
}
```

## Argument Reference

The following arguments are supported:


* `group_key` -
  (Required)
  EntityKey of the Group.
  Structure is [documented below](#nested_group_key).

* `parent` -
  (Required)
  The resource name of the entity under which this Group resides in the
  Cloud Identity resource hierarchy.
  Must be of the form identitysources/{identity_source_id} for external-identity-mapped
  groups or customers/{customer_id} for Google Groups.

* `labels` -
  (Required)
  Required. One or more label entries that apply to the Group.
  [Currently supported labels] contain a key with an empty value.
  * Google Groups are the default type of group and have a label with a key of
  `"cloudidentity.googleapis.com/groups.discussion_forum"` and an empty value.
  * Existing Google Groups can have an additional label with a key of
  `"cloudidentity.googleapis.com/groups.security"` and an empty value added to
  them. Adding the Security label to a group makes it a [security group]. This
  action is permanent and adds security features, but doesnâ€™t remove any other
  features of the original group.
  * [Dynamic groups] have a label with a key of
  `"cloudidentity.googleapis.com/groups.dynamic"` automatically added by the API.
  * [Identity-mapped groups] for Cloud Search have a label with a key of
  `"system/groups/external"` and an empty value.
  **Note**: The Identity API may add additional labels that were not provided in
    your config. If terraform plan shows a diff where a label is added, you can
    add it to your config or apply the `lifecycle.ignore_changes` rule to the
    labels field.
  [Currently supported labels]:
    https://cloud.google.com/identity/docs/reference/rest/v1/groups#Group.FIELDS.labels
  [security group]:
    https://support.google.com/a/answer/10607394
  [Dynamic groups]:
    https://cloud.google.com/identity/docs/concepts/overview-dynamic-groups
  [Identity-mapped groups]:
    https://cloud.google.com/identity/docs/groups#group-types


<a name="nested_group_key"></a>The `group_key` block supports:

* `id` -
  (Required)
  The ID of the entity.
  For Google-managed entities, the id must be the email address of an existing
  group or user.
  For external-identity-mapped entities, the id must be a string conforming
  to the Identity Source's requirements.
  Must be unique within a namespace.

* `namespace` -
  (Optional)
  The namespace in which the entity exists.
  If not specified, the EntityKey represents a Google-managed entity
  such as a Google user or a Google Group.
  If specified, the EntityKey represents an external-identity-mapped group.
  The namespace must correspond to an identity source created in Admin Console
  and must be in the form of `identitysources/{identity_source_id}`.

- - -


* `display_name` -
  (Optional)
  The display name of the Group.

* `description` -
  (Optional)
  An extended description to help users determine the purpose of a Group.
  Must not be longer than 4,096 characters.

* `dynamic_group_metadata` -
  (Optional)
  Dynamic group metadata like queries and status.
  Structure is [documented below](#nested_dynamic_group_metadata).

* `initial_group_config` -
  (Optional)
  The initial configuration options for creating a Group.
  See the
  [API reference](https://cloud.google.com/identity/docs/reference/rest/v1beta1/groups/create#initialgroupconfig)
  for possible values.
  Default value is `EMPTY`.
  Possible values are: `INITIAL_GROUP_CONFIG_UNSPECIFIED`, `WITH_INITIAL_OWNER`, `EMPTY`.


<a name="nested_dynamic_group_metadata"></a>The `dynamic_group_metadata` block supports:

* `queries` -
  (Optional)
  Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
  Structure is [documented below](#nested_queries).

* `status` -
  (Output)
  The current status of a dynamic group along with timestamp.
  Structure is [documented below](#nested_status).


<a name="nested_queries"></a>The `queries` block supports:

* `resource_type` -
  (Required)
  Resource type for the Dynamic Group Query
  Possible values are: `USER`.

* `query` -
  (Required)
  Query that determines the memberships of the dynamic group.
  Examples:
    * All users with at least one organizations.department of engineering.
      ```
      user.organizations.exists(org, org.department=='engineering')
      ```
    * All users with at least one location that has area of foo and building_id of bar.
      ```
      user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')
      ```
    * All users with any variation of the name John Doe (case-insensitive queries add
      equalsIgnoreCase() to the value being queried).
      ```
      user.name.value.equalsIgnoreCase('jOhn DoE')
      ```
  **Note:** When using this field, Identity API will add
  `"cloudidentity.googleapis.com/groups.dynamic"` to this group's labels.

<a name="nested_status"></a>The `status` block contains:

* `status` -
  (Output)
  Status of the dynamic group.

* `status_time` -
  (Output)
  The latest time at which the dynamic group is guaranteed to be in the given status. If status is UP_TO_DATE, the latest time at which the dynamic group was confirmed to be up-to-date. If status is UPDATING_MEMBERSHIPS, the time at which dynamic group was created.
  A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `{{name}}`

* `name` -
  Resource name of the Group in the format: groups/{group_id}, where group_id
  is the unique ID assigned to the Group.

* `create_time` -
  The time when the Group was created.

* `update_time` -
  The time when the Group was last updated.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Group can be imported using any of these accepted formats:

```
$ terraform import google_cloud_identity_group.default {{name}}
```
