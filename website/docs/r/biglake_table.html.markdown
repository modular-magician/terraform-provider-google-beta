---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Biglake"
description: |-
  Represents a table.
---

# google\_biglake\_table

Represents a table.


To get more information about Table, see:

* [API documentation](https://cloud.google.com/bigquery/docs/reference/biglake/rest/v1/projects.locations.catalogs.databases.tables)
* How-to Guides
    * [Manage open source metadata with BigLake Metastore](https://cloud.google.com/bigquery/docs/manage-open-source-metadata#create_catalogs)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=bigquery_biglake_table&cloudshell_image=gcr.io%2Fcloudshell-images%2Fcloudshell%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Bigquery Biglake Table


```hcl
resource "google_biglake_catalog" "catalog" {
    name = "my_catalog"
    location = "US"
}

resource "google_storage_bucket" "bucket" {
  name                        = "my_bucket"
  location                    = "US"
  force_destroy               = true
  uniform_bucket_level_access = true
}

resource "google_storage_bucket_object" "metadata_folder" {
  name    = "metadata/"
  content = " "
  bucket  = google_storage_bucket.bucket.name
}


resource "google_storage_bucket_object" "data_folder" {
  name    = "data/"
  content = " "
  bucket  = google_storage_bucket.bucket.name
}

resource "google_biglake_database" "database" {
    name = "my_database"
    catalog_id = google_biglake_catalog.catalog.name
    location = google_biglake_catalog.catalog.location
    type = "HIVE"
    hive_options {
        location_uri = "gs://${google_storage_bucket.bucket.name}/${google_storage_bucket_object.metadata_folder.name}"
        parameters = {
          "name" = "wrench"
        }
    }
}

resource "google_biglake_table" "table" {
    name = "my_table"
    catalog_id = google_biglake_catalog.catalog.name
    database_id = google_biglake_database.database.name
    location = google_biglake_catalog.catalog.location
    type = "HIVE"
    hive_options {
      table_type = "MANAGED_TABLE"
      storage_descriptor {
        location_uri = "gs://${google_storage_bucket.bucket.name}/${google_storage_bucket_object.data_folder.name}"
      }
      parameters = {
        "name" = "screwdriver"
      }
    }
}
```

## Argument Reference

The following arguments are supported:


* `location` -
  (Required)
  The geographic location where the Table should reside.

* `name` -
  (Required)
  Output only. The name of the Table. Format: 
  projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}/databases/{databaseId}/tables/{tableId}


- - -


* `type` -
  (Optional)
  The database type.
  Possible values are: `HIVE`.

* `hive_options` -
  (Optional)
  Options of a Hive table.
  Structure is [documented below](#nested_hive_options).

* `database_id` -
  (Optional)
  The name of the parent database.

* `catalog_id` -
  (Optional)
  The name of the parent catalog.

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_hive_options"></a>The `hive_options` block supports:

* `parameters` -
  (Optional)
  Stores user supplied Hive table parameters. An object containing a
  list of "key": value pairs.
  Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

* `table_type` -
  (Optional)
  Hive table type. For example, MANAGED_TABLE, EXTERNAL_TABLE.

* `storage_descriptor` -
  (Optional)
  Stores physical storage information on the data.
  Structure is [documented below](#nested_storage_descriptor).


<a name="nested_storage_descriptor"></a>The `storage_descriptor` block supports:

* `location_uri` -
  (Optional)
  Cloud Storage folder URI where the table data is stored, starting with "gs://".

* `input_format` -
  (Optional)
  The fully qualified Java class name of the input format.

* `output_format` -
  (Optional)
  The fully qualified Java class name of the output format.

* `serde_info` -
  (Optional)
  Serializer and deserializer information.
  Structure is [documented below](#nested_serde_info).


<a name="nested_serde_info"></a>The `serde_info` block supports:

* `serialization_lib` -
  (Optional)
  The fully qualified Java class name of the serialization library.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `projects/{{project}}/locations/{{location}}/catalogs/{{catalog_id}}/databases/{{database_id}}/tables/{{name}}`

* `create_time` -
  Output only. The creation time of the table. A timestamp in RFC3339 UTC
  "Zulu" format, with nanosecond resolution and up to nine fractional
  digits. Examples: "2014-10-02T15:01:23Z" and
  "2014-10-02T15:01:23.045123456Z".

* `update_time` -
  Output only. The last modification time of the table. A timestamp in
  RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
  fractional digits. Examples: "2014-10-02T15:01:23Z" and
  "2014-10-02T15:01:23.045123456Z".

* `delete_time` -
  Output only. The deletion time of the table. Only set after the
  table is deleted. A timestamp in RFC3339 UTC "Zulu" format, with
  nanosecond resolution and up to nine fractional digits. Examples:
  "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".

* `expire_time` -
  Output only. The time when this table is considered expired. Only set
  after the table is deleted. A timestamp in RFC3339 UTC "Zulu" format,
  with nanosecond resolution and up to nine fractional digits. Examples:
  "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".

* `etag` -
  The checksum of a table object computed by the server based on the value
  of other fields. It may be sent on update requests to ensure the client
  has an up-to-date value before proceeding. It is only checked for update
  table operations.


## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

- `create` - Default is 20 minutes.
- `update` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Table can be imported using any of these accepted formats:

```
$ terraform import google_biglake_table.default projects/{{project}}/locations/{{location}}/catalogs/{{catalog_id}}/databases/{{database_id}}/tables/{{name}}
$ terraform import google_biglake_table.default {{project}}/{{location}}/{{catalog_id}}/{{database_id}}/{{name}}
$ terraform import google_biglake_table.default {{location}}/{{catalog_id}}/{{database_id}}/{{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
