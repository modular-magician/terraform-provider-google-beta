---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Cloud Run"
page_title: "Google: google_cloud_run_job"
description: |-
  Job represents the configuration of a single job.
---

# google\_cloud\_run\_job

Job represents the configuration of a single job. A job an immutable resource that references a container image which is run to completion.


To get more information about Job, see:

* [API documentation](https://cloud.google.com/run/docs/reference/rest/v1/namespaces.jobs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/run/docs/create-jobs)

## Example Usage - Cloud Run Job Basic


```hcl
resource "google_cloud_run_job" "default" {
  name     = "cloudrun-job"
  location = "europe-west2"

  template {
    spec {
      template {
        spec {
          containers {
            image   = "europe-west2-docker.pkg.dev/xyz/gke-policy-automation/gke-policy-automation:latest"
            command = ["/gke-policy", "check"]
            args    = ["-c", "/etc/secrets/config.yaml"]

            env {
              name  = "GKE_POLICY_LOG"
              value = "INFO"
            }

            volume_mounts {
              mount_path = "/etc/secrets"
              name       = "gke-policy-automation-lar-hef-fad"
            }
          }
          volumes {
            name = "gke-policy-automation-lar-hef-fad"

            secret {
              secret_name = "gke-policy-automation"

              items {
                key  = "latest"
                path = "config.yaml"
              }
            }
          }
        }
      }
    }
  }
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Name must be unique within a namespace, within a Cloud Run region.
  Is required when creating resources. Name is primarily intended
  for creation idempotence and configuration definition. Cannot be updated.
  More info: http://kubernetes.io/docs/user-guide/identifiers#names

* `location` -
  (Required)
  The location of the job. eg us-central1



<a name="nested_template"></a>The `template` block supports:

* `metadata` -
  (Optional)
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  Structure is [documented below](#nested_metadata).

* `spec` -
  (Required)
  ExecutionSpec holds the desired configuration for executions of this job.
  Structure is [documented below](#nested_spec).


<a name="nested_metadata"></a>The `metadata` block supports:

* `name` -
  (Optional)
  Name must be unique within a namespace, within a Cloud Run region.
  Is required when creating resources. Name is primarily intended
  for creation idempotence and configuration definition. Cannot be updated.
  More info: http://kubernetes.io/docs/user-guide/identifiers#names

* `namespace` -
  (Optional)
  In Cloud Run the namespace must be equal to either the
  project ID or project number. It will default to the resource's project.

* `self_link` -
  SelfLink is a URL representing this object.

* `uid` -
  UID is a unique id generated by the server on successful creation of a resource and is not
  allowed to change on PUT operations.
  More info: http://kubernetes.io/docs/user-guide/identifiers#uids

* `resource_version` -
  An opaque value that represents the internal version of this object that
  can be used by clients to determine when objects have changed. May be used
  for optimistic concurrency, change detection, and the watch operation on a
  resource or set of resources. They may only be valid for a
  particular resource or set of resources.
  More info:
  https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency

* `generation` -
  A sequence number representing a specific generation of the desired state.

* `labels` -
  (Optional)
  Map of string keys and values that can be used to organize and categorize
  (scope and select) objects. May match selectors of replication controllers
  and routes.
  More info: http://kubernetes.io/docs/user-guide/labels

* `annotations` -
  (Optional)
  Annotations is an unstructured key value map stored with a resource that may be set by
  external tools to store and retrieve arbitrary metadata. They are not queryable and should
  be preserved when modifying objects. More info: https://kubernetes.io/docs/user-guide/annotations
  **Note**: The Cloud Run API may add additional annotations that were not provided in your config.
  If terraform plan shows a diff where a server-side annotation is added, you can add it to your config
  or apply the lifecycle.ignore_changes rule to the metadata.0.annotations field.

<a name="nested_spec"></a>The `spec` block supports:

* `parallelism` -
  (Optional)
  Specifies the maximum desired number of tasks the execution should run at given time.
  Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum
  possible value will be used for that execution. The actual number of tasks running
  in steady state will be less than this number when there are fewer tasks waiting to be
  completed remaining, i.e. when the work left to do is less than max parallelism.

* `task_count` -
  (Optional)
  Specifies the desired number of tasks the execution should run. Setting to 1 means that
  parallelism is limited to 1 and the success of that task signals the success of the
  execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/

* `template` -
  (Optional)
  Describes the task(s) that will be created when executing an execution.
  Structure is [documented below](#nested_template).


<a name="nested_template"></a>The `template` block supports:

* `spec` -
  (Optional)
  Specification of the desired behavior of the task. More info:
  https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  Structure is [documented below](#nested_spec).


<a name="nested_spec"></a>The `spec` block supports:

* `max_retries` -
  (Optional)
  Number of retries allowed per task, before marking this job failed.

* `timeout_seconds` -
  (Optional)
  Duration in seconds the task may be active before the system will actively try to mark it
  failed and kill associated containers. This applies per attempt of a task, meaning each retry can
  run for the full timeout.

* `service_account_name` -
  (Optional)
  Email address of the IAM service account associated with the task of a job execution. The service
  account represents the identity of the running task, and determines what permissions the task has.
  If not provided, the task will use the project's default service account.

* `volumes` -
  (Optional)
  List of volumes that can be mounted by containers belonging to the task. More info:
  https://kubernetes.io/docs/concepts/storage/volumes
  Structure is [documented below](#nested_volumes).

* `containers` -
  (Optional)
  List of containers belonging to the task. We disallow a number of fields on this Container.
  Only a single container may be provided.
  Structure is [documented below](#nested_containers).


<a name="nested_volumes"></a>The `volumes` block supports:

* `name` -
  (Optional)
  Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.

* `secret` -
  (Optional)
  The secret's value will be presented as the content of a file whose name is defined in the item path.
  If no items are defined, the name of the file is the secretName.
  The contents of the target Secret's Data field will be presented in a volume as files using the keys
  in the Data field as the file names.
  Structure is [documented below](#nested_secret).


<a name="nested_secret"></a>The `secret` block supports:

* `secret_name` -
  (Optional)
  The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same
  project. If the secret is in another project, you must define an alias. An alias definition has the
  form: :projects/<project-id|project-number>/secrets/. If multiple alias definitions are needed,
  they must be separated by commas. The alias definitions must be set on the
  run.googleapis.com/secrets annotation.

* `default_mode` -
  (Optional)
  Integer representation of mode bits to use on created files by default. Must be a value between 01 and
  0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected
  by this setting.
  Notes:
  - Internally, a umask of 0222 will be applied to any non-zero value.
  - This is an integer representation of the mode bits. So, the octal integer value should look exactly
    as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777
    (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod
    755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10).
  - This might be in conflict with other options that affect the file mode, like fsGroup, and the result
    can be other mode bits set.

* `optional` -
  (Optional)
  Specify whether the Secret or its keys must be defined.

* `items` -
  (Optional)
  If unspecified, the volume will expose a file whose name is the secretName. If specified, the key will
  be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file
  exposed in the volume. When items are defined, they must specify a key and a path.
  If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into
  the volume as a file whose name is the key and content is the value. If specified, the listed keys will
  be projected into the specified paths, and unlisted keys will not be present. If a key is specified that
  is not present in the Secret, the volume setup will error unless it is marked optional.
  Structure is [documented below](#nested_items).


<a name="nested_items"></a>The `items` block supports:

* `key` -
  (Optional)
  The key to project.

* `path` -
  (Optional)
  The relative path of the file to map the key to. May not be an absolute path. May not contain the
  path element '..'. May not start with the string '..'.

* `mode` -
  (Optional)
  Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the
  Volume's default mode will be used.
  Notes:
  - Internally, a umask of 0222 will be applied to any non-zero value.
  - This is an integer representation of the mode bits. So, the octal integer value should look
    exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx),
    set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416
    (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10).
  - This might be in conflict with other options that affect the file mode, like fsGroup, and the
    result can be other mode bits set.

<a name="nested_containers"></a>The `containers` block supports:

* `image` -
  (Required)
  Docker image name. This is most often a reference to a container located
  in the container registry, such as gcr.io/cloudrun/hello
  More info: https://kubernetes.io/docs/concepts/containers/images

* `command` -
  (Optional)
  Entrypoint array. Not executed within a shell.
  The docker image's ENTRYPOINT is used if this is not provided.
  Variable references $(VAR_NAME) are expanded using the container's
  environment. If a variable cannot be resolved, the reference in the input
  string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
  double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
  regardless of whether the variable exists or not.
  More info:
  https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

* `args` -
  (Optional)
  Arguments to the entrypoint.
  The docker image's CMD is used if this is not provided.
  Variable references $(VAR_NAME) are expanded using the container's
  environment. If a variable cannot be resolved, the reference in the input
  string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
  double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
  regardless of whether the variable exists or not.
  More info:
  https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

* `env` -
  (Optional)
  List of environment variables to set in the container.
  Structure is [documented below](#nested_env).

* `resources` -
  (Optional)
  Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
  Structure is [documented below](#nested_resources).

* `working_dir` -
  (Optional)
  Container's working directory.
  If not specified, the container runtime's default will be used, which
  might be configured in the container image.

* `ports` -
  (Optional)
  List of ports to expose from the container. Only a single port can be
  specified. The specified ports must be listening on all interfaces
  (0.0.0.0) within the container to be accessible.
  If omitted, a port number will be chosen and passed to the container
  through the PORT environment variable for the container to listen on.
  Structure is [documented below](#nested_ports).

* `volume_mounts` -
  (Optional)
  Volume to mount into the container's filesystem.
  Only supports SecretVolumeSources.
  Pod volumes to mount into the container's filesystem.
  Structure is [documented below](#nested_volume_mounts).

* `termination_message_path` -
  (Optional)
  Path at which the file to which the container's termination message will be written
  is mounted into the container's filesystem. Message written is intended to be brief
  final status, such as an assertion failure message. Will be truncated by the node
  if greater than 4096 bytes. The total message length across all containers will be
  limited to 12kb. Defaults to /dev/termination-log.

* `termination_message_policy` -
  (Optional)
  Indicate how the termination message should be populated. File will use the contents
  of terminationMessagePath to populate the container status message on both success
  and failure. FallbackToLogsOnError will use the last chunk of container log output
  if the termination message file is empty and the container exited with an error. The
  log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to
  File.

* `image_pull_policy` -
  (Optional)
  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if `:latest`
  tag is specified, or IfNotPresent otherwise. More info:
  https://kubernetes.io/docs/concepts/containers/images#updating-images


<a name="nested_env"></a>The `env` block supports:

* `name` -
  (Optional)
  Name of the environment variable. Must be a C_IDENTIFIER.

* `value` -
  (Optional)
  Variable references $(VAR_NAME) are expanded
  using the previous defined environment variables in the container and
  any route environment variables. If a variable cannot be resolved,
  the reference in the input string will be unchanged. The $(VAR_NAME)
  syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
  references will never be expanded, regardless of whether the variable
  exists or not.
  Defaults to "".

* `value_from` -
  (Optional)
  Source for the environment variable's value. Only supports secret_key_ref. Cannot be used if value is not empty.
  Structure is [documented below](#nested_value_from).


<a name="nested_value_from"></a>The `value_from` block supports:

* `secret_key_ref` -
  (Required)
  Selects a key (version) of a secret in Secret Manager.
  Structure is [documented below](#nested_secret_key_ref).


<a name="nested_secret_key_ref"></a>The `secret_key_ref` block supports:

* `key` -
  (Required)
  A Cloud Secret Manager secret version. Must be 'latest' for the latest
  version or an integer for a specific version.

* `name` -
  (Required)
  The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. 
  If the secret is in another project, you must define an alias. 
  An alias definition has the form: :projects/<project-id|project-number>/secrets/. 
  If multiple alias definitions are needed, they must be separated by commas. 
  The alias definitions must be set on the run.googleapis.com/secrets annotation.

* `optional` -
  (Optional)
  Specify whether the Secret or its key must be defined.

<a name="nested_resources"></a>The `resources` block supports:

* `limits` -
  (Optional)
  Limits describes the maximum amount of compute resources allowed.
  Only memory and CPU are supported.
  The values of the map is string form of the 'quantity' k8s type:
  https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go

* `requests` -
  (Optional)
  Requests describes the minimum amount of compute resources required.
  Only memory and CPU are supported.
  If Requests is omitted for a container, it defaults to Limits if that is
  explicitly specified, otherwise to an implementation-defined value.
  The values of the map is string form of the 'quantity' k8s type:
  https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go

<a name="nested_ports"></a>The `ports` block supports:

* `name` -
  (Optional)
  If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".

* `container_port` -
  (Optional)
  Port number the container listens on. This must be a valid port number, 0 < x < 65536.

* `protocol` -
  (Optional)
  Protocol for port. Must be "TCP". Defaults to "TCP".

<a name="nested_volume_mounts"></a>The `volume_mounts` block supports:

* `name` -
  (Required)
  The name of the volume. There must be a corresponding Volume with the same name.

* `mount_path` -
  (Required)
  Path within the container at which the volume should be mounted.  Must
  not contain ':'.

* `sub_path` -
  (Optional)
  Path within the volume from which the container's volume should be mounted.
  Defaults to "" (volume's root).

- - -


* `metadata` -
  (Optional)
  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  Structure is [documented below](#nested_metadata).

* `template` -
  (Optional)
  Describes the execution that will be created when running a job.
  Structure is [documented below](#nested_template).

* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


<a name="nested_metadata"></a>The `metadata` block supports:

* `namespace` -
  (Optional)
  In Cloud Run the namespace must be equal to either the
  project ID or project number. It will default to the resource's project.

* `self_link` -
  SelfLink is a URL representing this object.

* `uid` -
  UID is a unique id generated by the server on successful creation of a resource and is not
  allowed to change on PUT operations.
  More info: http://kubernetes.io/docs/user-guide/identifiers#uids

* `resource_version` -
  An opaque value that represents the internal version of this object that
  can be used by clients to determine when objects have changed. May be used
  for optimistic concurrency, change detection, and the watch operation on a
  resource or set of resources. They may only be valid for a
  particular resource or set of resources.
  More info:
  https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency

* `generation` -
  A sequence number representing a specific generation of the desired state.

* `labels` -
  (Optional)
  Map of string keys and values that can be used to organize and categorize
  (scope and select) objects. May match selectors of replication controllers
  and routes.
  More info: http://kubernetes.io/docs/user-guide/labels

* `annotations` -
  (Optional)
  Annotations is an unstructured key value map stored with a resource that may be set by
  external tools to store and retrieve arbitrary metadata. They are not queryable and should
  be preserved when modifying objects. More info: https://kubernetes.io/docs/user-guide/annotations
  **Note**: The Cloud Run API may add additional annotations that were not provided in your config.
  If terraform plan shows a diff where a server-side annotation is added, you can add it to your config
  or apply the lifecycle.ignore_changes rule to the metadata.0.annotations field.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `apis/run.googleapis.com/v1/namespaces/{{project}}/jobs/{{name}}`


## Timeouts

This resource provides the following
[Timeouts](/docs/configuration/resources.html#timeouts) configuration options:

- `create` - Default is 20 minutes.
- `delete` - Default is 20 minutes.

## Import


Job can be imported using any of these accepted formats:

```
$ terraform import google_cloud_run_job.default apis/run.googleapis.com/v1/namespaces/{{project}}/jobs/{{name}}
$ terraform import google_cloud_run_job.default {{project}}/{{name}}
$ terraform import google_cloud_run_job.default {{name}}
```

## User Project Overrides

This resource supports [User Project Overrides](https://www.terraform.io/docs/providers/google/guides/provider_reference.html#user_project_override).
