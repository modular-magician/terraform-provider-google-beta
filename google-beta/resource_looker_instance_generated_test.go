// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccLookerInstance_lookerInstanceStandardBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": RandString(t, 10),
	}

	VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckLookerInstanceDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccLookerInstance_lookerInstanceStandardBasicExample(context),
			},
			{
				ResourceName:            "google_looker_instance.looker-instance",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "oauth_config", "region"},
			},
		},
	})
}

func testAccLookerInstance_lookerInstanceStandardBasicExample(context map[string]interface{}) string {
	return tpgresource.Nprintf(`
resource "google_looker_instance" "looker-instance" {
  name              = "tf-test-my-instance%{random_suffix}"
  platform_edition  = "LOOKER_CORE_STANDARD"
  region            = "us-central1"
  public_ip_enabled = true
  oauth_config {
    client_id = "tf-test-my-client-id%{random_suffix}"
    client_secret = "tf-test-my-client-secret%{random_suffix}"
  }

  user_metadata {
    additional_standard_user_count = 1
    additional_viewer_user_count = 1
    additional_developer_user_count = 1
  }

}
`, context)
}

func TestAccLookerInstance_lookerInstanceEnterpriseFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": RandString(t, 10),
	}

	VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckLookerInstanceDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccLookerInstance_lookerInstanceEnterpriseFullExample(context),
			},
			{
				ResourceName:            "google_looker_instance.looker-instance",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "oauth_config", "region"},
			},
		},
	})
}

func testAccLookerInstance_lookerInstanceEnterpriseFullExample(context map[string]interface{}) string {
	return tpgresource.Nprintf(`
resource "google_looker_instance" "looker-instance" {
  name              = "tf-test-my-instance%{random_suffix}"
  platform_edition  = "LOOKER_CORE_ENTERPRISE_ANNUAL"
  region            = "us-central1"
  private_ip_enabled = "true"
  public_ip_enabled  = "true"
  consumer_network = data.google_compute_network.looker-network.id
  reserved_range = "10.0.0.0/20"
  oauth_config {
    client_id = "tf-test-my-client-id%{random_suffix}"
    client_secret = "tf-test-my-client-secret%{random_suffix}"
  }

  deny_maintenance_period {
    start_date {
      month = 12
      day   = 1
      year  = 2026
    }
    end_date {
      month = 12
      day   = 31
      year  = 2026
    }
    time {
      hours = 10
      minutes = 0
      seconds = 0
      nanos = 0
    }
  }

  maintenance_window {
    day_of_week = "FRIDAY"
    start_time {
      hours = 17
      minutes = 0
      seconds = 0
      nanos = 0
    }
  }

  admin_settings {
    allowed_email_domains = ["example.com"]
  }
}
 // This example assumes this network already exists.
 // The API creates a tenant network per network authorized for a
 // Looker instance and that network is not deleted when the user-created
 // network (consumer_network) is deleted, so this prevents issues
 // with tenant network quota.
 // If this network hasn't been created and you are using this example in your
 // config, add an additional network resource or change
 // this from "data"to "resource"
 data "google_compute_network" "looker-network" {
   name = "tf-test-looker-test-network%{random_suffix}"
 }
`, context)
}

func testAccCheckLookerInstanceDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_looker_instance" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{LookerBasePath}}projects/{{project}}/locations/{{region}}/instances/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("LookerInstance still exists at %s", url)
			}
		}

		return nil
	}
}
