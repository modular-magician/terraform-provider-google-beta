// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccCloudRunJob_cloudRunJobBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"namespace":     getTestProjectFromEnv(),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckCloudRunJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunJob_cloudRunJobBasicExample(context),
			},
			{
				ResourceName:            "google_cloud_run_job.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location"},
			},
		},
	})
}

func testAccCloudRunJob_cloudRunJobBasicExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_job" "default" {
  name     = "tf-test-cloudrun-job%{random_suffix}"
  location = "europe-west2"

  template {
    spec {
      template {
        spec {
          containers {
            image   = "europe-west2-docker.pkg.dev/xyz/gke-policy-automation/gke-policy-automation:latest"
            command = ["/gke-policy", "check"]
            args    = ["-c", "/etc/secrets/config.yaml"]

            env {
              name  = "GKE_POLICY_LOG"
              value = "INFO"
            }

            volume_mounts {
              mount_path = "/etc/secrets"
              name       = "gke-policy-automation-lar-hef-fad"
            }
          }
          volumes {
            name = "gke-policy-automation-lar-hef-fad"

            secret {
              secret_name = "gke-policy-automation"

              items {
                key  = "latest"
                path = "config.yaml"
              }
            }
          }
        }
      }
    }
  }
}
`, context)
}

func testAccCheckCloudRunJobDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_cloud_run_job" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := googleProviderConfig(t)

			url, err := replaceVarsForTest(config, rs, "{{CloudRunBasePath}}apis/run.googleapis.com/v1/namespaces/{{project}}/jobs/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = sendRequest(config, "GET", billingProject, url, config.userAgent, nil)
			if err == nil {
				return fmt.Errorf("CloudRunJob still exists at %s", url)
			}
		}

		return nil
	}
}
