// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccCloudRunServiceIamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
		"project":       getTestProjectFromEnv(),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunServiceIamBinding_basicGenerated(context),
			},
			{
				ResourceName:      "google_cloud_run_service_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/services/%s roles/viewer", getTestProjectFromEnv(), getTestRegionFromEnv()),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				// Test Iam Binding update
				Config: testAccCloudRunServiceIamBinding_updateGenerated(context),
			},
			{
				ResourceName:      "google_cloud_run_service_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/services/%s roles/viewer", getTestProjectFromEnv(), getTestRegionFromEnv()),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccCloudRunServiceIamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
		"project":       getTestProjectFromEnv(),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccCloudRunServiceIamMember_basicGenerated(context),
			},
			{
				ResourceName:      "google_cloud_run_service_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/services/%s roles/viewer user:admin@hashicorptest.com", getTestProjectFromEnv(), getTestRegionFromEnv()),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccCloudRunServiceIamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
		"project":       getTestProjectFromEnv(),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunServiceIamPolicy_basicGenerated(context),
			},
			{
				ResourceName:      "google_cloud_run_service_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/services/%s", getTestProjectFromEnv(), getTestRegionFromEnv()),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccCloudRunServiceIamPolicy_emptyBinding(context),
			},
			{
				ResourceName:      "google_cloud_run_service_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/services/%s", getTestProjectFromEnv(), getTestRegionFromEnv()),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCloudRunServiceIamMember_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
    name     = "tf_test_cloud_run_service_name%{random_suffix}"
    location = "us-central1"

    template {
      spec {
            containers {
                image = "gcr.io/cloudrun/hello"
            }
      }
    }
    traffic {
      percent         = 100
      latest_revision = true
    }
}

resource "google_service_account" "sa" {
  account_id   = "cloud-run-pubsub-invoker"
  display_name = "Cloud Run Pub/Sub Invoker"
}

locals {
  cloud_run_url = google_cloud_run_service.default.status[0].url
  pubsub_sa= google_service_account.sa.email
}

resource "google_cloud_run_service_iam_binding" "binding" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "roles/run.invoker"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_project_iam_binding" "project" {
  project = "%{project}"
  role    = "roles/iam.serviceAccountTokenCreator"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_pubsub_topic" "topic" {
  name = "tf_test_pubsub_topic%{random_suffix}"
}

resource "google_pubsub_subscription" "subscription" {
  name  = "tf_test_pubsub_subscription%{random_suffix}"
  topic = google_pubsub_topic.topic.name

  push_config {
    push_endpoint = "${local.cloud_run_url}"
    oidc_token {
      service_account_email = "${local.pubsub_sa}"
    }
    attributes = {
      x-goog-version = "v1"
    }
  }
}

resource "google_cloud_run_service_iam_member" "foo" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccCloudRunServiceIamPolicy_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
    name     = "tf_test_cloud_run_service_name%{random_suffix}"
    location = "us-central1"

    template {
      spec {
            containers {
                image = "gcr.io/cloudrun/hello"
            }
      }
    }
    traffic {
      percent         = 100
      latest_revision = true
    }
}

resource "google_service_account" "sa" {
  account_id   = "cloud-run-pubsub-invoker"
  display_name = "Cloud Run Pub/Sub Invoker"
}

locals {
  cloud_run_url = google_cloud_run_service.default.status[0].url
  pubsub_sa= google_service_account.sa.email
}

resource "google_cloud_run_service_iam_binding" "binding" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "roles/run.invoker"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_project_iam_binding" "project" {
  project = "%{project}"
  role    = "roles/iam.serviceAccountTokenCreator"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_pubsub_topic" "topic" {
  name = "tf_test_pubsub_topic%{random_suffix}"
}

resource "google_pubsub_subscription" "subscription" {
  name  = "tf_test_pubsub_subscription%{random_suffix}"
  topic = google_pubsub_topic.topic.name

  push_config {
    push_endpoint = "${local.cloud_run_url}"
    oidc_token {
      service_account_email = "${local.pubsub_sa}"
    }
    attributes = {
      x-goog-version = "v1"
    }
  }
}

data "google_iam_policy" "foo" {
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
}

resource "google_cloud_run_service_iam_policy" "foo" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccCloudRunServiceIamPolicy_emptyBinding(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
    name     = "tf_test_cloud_run_service_name%{random_suffix}"
    location = "us-central1"

    template {
      spec {
            containers {
                image = "gcr.io/cloudrun/hello"
            }
      }
    }
    traffic {
      percent         = 100
      latest_revision = true
    }
}

resource "google_service_account" "sa" {
  account_id   = "cloud-run-pubsub-invoker"
  display_name = "Cloud Run Pub/Sub Invoker"
}

locals {
  cloud_run_url = google_cloud_run_service.default.status[0].url
  pubsub_sa= google_service_account.sa.email
}

resource "google_cloud_run_service_iam_binding" "binding" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "roles/run.invoker"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_project_iam_binding" "project" {
  project = "%{project}"
  role    = "roles/iam.serviceAccountTokenCreator"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_pubsub_topic" "topic" {
  name = "tf_test_pubsub_topic%{random_suffix}"
}

resource "google_pubsub_subscription" "subscription" {
  name  = "tf_test_pubsub_subscription%{random_suffix}"
  topic = google_pubsub_topic.topic.name

  push_config {
    push_endpoint = "${local.cloud_run_url}"
    oidc_token {
      service_account_email = "${local.pubsub_sa}"
    }
    attributes = {
      x-goog-version = "v1"
    }
  }
}

data "google_iam_policy" "foo" {
}

resource "google_cloud_run_service_iam_policy" "foo" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccCloudRunServiceIamBinding_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
    name     = "tf_test_cloud_run_service_name%{random_suffix}"
    location = "us-central1"

    template {
      spec {
            containers {
                image = "gcr.io/cloudrun/hello"
            }
      }
    }
    traffic {
      percent         = 100
      latest_revision = true
    }
}

resource "google_service_account" "sa" {
  account_id   = "cloud-run-pubsub-invoker"
  display_name = "Cloud Run Pub/Sub Invoker"
}

locals {
  cloud_run_url = google_cloud_run_service.default.status[0].url
  pubsub_sa= google_service_account.sa.email
}

resource "google_cloud_run_service_iam_binding" "binding" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "roles/run.invoker"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_project_iam_binding" "project" {
  project = "%{project}"
  role    = "roles/iam.serviceAccountTokenCreator"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_pubsub_topic" "topic" {
  name = "tf_test_pubsub_topic%{random_suffix}"
}

resource "google_pubsub_subscription" "subscription" {
  name  = "tf_test_pubsub_subscription%{random_suffix}"
  topic = google_pubsub_topic.topic.name

  push_config {
    push_endpoint = "${local.cloud_run_url}"
    oidc_token {
      service_account_email = "${local.pubsub_sa}"
    }
    attributes = {
      x-goog-version = "v1"
    }
  }
}

resource "google_cloud_run_service_iam_binding" "foo" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccCloudRunServiceIamBinding_updateGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
    name     = "tf_test_cloud_run_service_name%{random_suffix}"
    location = "us-central1"

    template {
      spec {
            containers {
                image = "gcr.io/cloudrun/hello"
            }
      }
    }
    traffic {
      percent         = 100
      latest_revision = true
    }
}

resource "google_service_account" "sa" {
  account_id   = "cloud-run-pubsub-invoker"
  display_name = "Cloud Run Pub/Sub Invoker"
}

locals {
  cloud_run_url = google_cloud_run_service.default.status[0].url
  pubsub_sa= google_service_account.sa.email
}

resource "google_cloud_run_service_iam_binding" "binding" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "roles/run.invoker"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_project_iam_binding" "project" {
  project = "%{project}"
  role    = "roles/iam.serviceAccountTokenCreator"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_pubsub_topic" "topic" {
  name = "tf_test_pubsub_topic%{random_suffix}"
}

resource "google_pubsub_subscription" "subscription" {
  name  = "tf_test_pubsub_subscription%{random_suffix}"
  topic = google_pubsub_topic.topic.name

  push_config {
    push_endpoint = "${local.cloud_run_url}"
    oidc_token {
      service_account_email = "${local.pubsub_sa}"
    }
    attributes = {
      x-goog-version = "v1"
    }
  }
}

resource "google_cloud_run_service_iam_binding" "foo" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}
