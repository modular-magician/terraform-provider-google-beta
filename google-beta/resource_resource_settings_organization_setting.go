// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceResourceSettingsOrganizationSetting() *schema.Resource {
	return &schema.Resource{
		Create: resourceResourceSettingsOrganizationSettingCreate,
		Read:   resourceResourceSettingsOrganizationSettingRead,
		Update: resourceResourceSettingsOrganizationSettingUpdate,
		Delete: resourceResourceSettingsOrganizationSettingDelete,

		Importer: &schema.ResourceImporter{
			State: resourceResourceSettingsOrganizationSettingImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"local_value": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `The configured value of the setting at the given parent resource, ignoring the resource hierarchy.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"string_value": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Defines this value as being a string value.`,
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The short name of the setting.`,
			},
			"organization_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The organization the setting should apply to.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceResourceSettingsOrganizationSettingCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	localValueProp, err := expandResourceSettingsOrganizationSettingLocalValue(d.Get("local_value"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("local_value"); !isEmptyValue(reflect.ValueOf(localValueProp)) && (ok || !reflect.DeepEqual(v, localValueProp)) {
		obj["localValue"] = localValueProp
	}

	url, err := replaceVars(d, config, "{{ResourceSettingsBasePath}}organizations/{{organization_id}}/settings/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new OrganizationSetting: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating OrganizationSetting: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "organizations/{{organization_id}}/settings/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating OrganizationSetting %q: %#v", d.Id(), res)

	return resourceResourceSettingsOrganizationSettingRead(d, meta)
}

func resourceResourceSettingsOrganizationSettingRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{ResourceSettingsBasePath}}organizations/{{organization_id}}/settings/{{name}}?view=SETTING_VIEW_LOCAL_VALUE")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("ResourceSettingsOrganizationSetting %q", d.Id()))
	}

	if err := d.Set("local_value", flattenResourceSettingsOrganizationSettingLocalValue(res["localValue"], d, config)); err != nil {
		return fmt.Errorf("Error reading OrganizationSetting: %s", err)
	}

	return nil
}

func resourceResourceSettingsOrganizationSettingUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	localValueProp, err := expandResourceSettingsOrganizationSettingLocalValue(d.Get("local_value"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("local_value"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, localValueProp)) {
		obj["localValue"] = localValueProp
	}

	url, err := replaceVars(d, config, "{{ResourceSettingsBasePath}}organizations/{{organization_id}}/settings/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating OrganizationSetting %q: %#v", d.Id(), obj)

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return fmt.Errorf("Error updating OrganizationSetting %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating OrganizationSetting %q: %#v", d.Id(), res)
	}

	return resourceResourceSettingsOrganizationSettingRead(d, meta)
}

func resourceResourceSettingsOrganizationSettingDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] ResourceSettings OrganizationSetting resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceResourceSettingsOrganizationSettingImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*Config)
	if err := parseImportId([]string{
		"organizations/(?P<organization_id>[^/]+)/settings/(?P<name>[^/]+)",
		"(?P<organization_id>[^/]+)/(?P<name>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "organizations/{{organization_id}}/settings/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenResourceSettingsOrganizationSettingLocalValue(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["string_value"] =
		flattenResourceSettingsOrganizationSettingLocalValueStringValue(original["stringValue"], d, config)
	return []interface{}{transformed}
}
func flattenResourceSettingsOrganizationSettingLocalValueStringValue(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandResourceSettingsOrganizationSettingLocalValue(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedStringValue, err := expandResourceSettingsOrganizationSettingLocalValueStringValue(original["string_value"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStringValue); val.IsValid() && !isEmptyValue(val) {
		transformed["stringValue"] = transformedStringValue
	}

	return transformed, nil
}

func expandResourceSettingsOrganizationSettingLocalValueStringValue(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
