// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceFirebaseProject() *schema.Resource {
	return &schema.Resource{
		Create: resourceFirebaseProjectCreate,
		Read:   resourceFirebaseProjectRead,
		Delete: resourceFirebaseProjectDelete,

		Importer: &schema.ResourceImporter{
			State: resourceFirebaseProjectImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"display_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The user-assigned display name of the Project. This field may only be assigned on Update.`,
			},
			"project_number": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Immutable. The globally unique, Google-assigned canonical identifier
for the Project. Use this identifier when configuring integrations and/or
making API calls to Firebase or third-party services.`,
			},
			"resources": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The default Firebase resources associated with the Project. This field will be deprecated.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"hosting_site": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The default Firebase Hosting site name, in the format:
'PROJECT_ID' Though rare, your 'projectId' might already be used as
the name for an existing Hosting site in another project (learn more
about creating non-default, [additional sites](https://firebase.google.com/docs/hosting/multisites)).
In these cases, your 'projectId' is appended with a hyphen then five
alphanumeric characters to create your default Hosting site name.
For example, if your 'projectId' is 'myproject123', your default Hosting
site name might be: 'myproject123-a5c16'.`,
						},
						"location_id": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The ID of the Project's default GCP resource location.
The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations).
This field is omitted if the default GCP resource location has not
been finalized yet. To set a Project's default GCP resource location,
call ['FinalizeDefaultLocation'](../projects.defaultLocation/finalize)
after you add Firebase resources to the Project.`,
						},
						"realtime_database_instance": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `The default Firebase Realtime Database instance name,
in the format: 'PROJECT_ID' Though rare, your 'projectId' might already
be used as the name for an existing Realtime Database instance in
another project (learn more about [database sharding](https://firebase.google.com/docs/database/usage/sharding)).
In these cases, your 'projectId' is appended with a hyphen then five
alphanumeric characters to create your default Realtime Database instance
name. For example, if your 'projectId' is 'myproject123', your default
database instance name might be: 'myproject123-a5c16'`,
						},
						"storage_bucket": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The default Cloud Storage for Firebase storage bucket, in the format: 'PROJECT_ID.appspot.com'.`,
						},
					},
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceFirebaseProjectCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})

	url, err := replaceVars(d, config, "{{FirebaseBasePath}}projects/{{project}}:addFirebase")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Project: %#v", obj)
	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Project: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating Project: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "projects/{{project}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = firebaseOperationWaitTime(
		config, res, project, "Creating Project", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create Project: %s", err)
	}

	log.Printf("[DEBUG] Finished creating Project %q: %#v", d.Id(), res)

	return resourceFirebaseProjectRead(d, meta)
}

func resourceFirebaseProjectRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{FirebaseBasePath}}projects/{{project}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Project: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("FirebaseProject %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Project: %s", err)
	}

	if err := d.Set("project_number", flattenFirebaseProjectProjectNumber(res["projectNumber"], d, config)); err != nil {
		return fmt.Errorf("Error reading Project: %s", err)
	}
	if err := d.Set("display_name", flattenFirebaseProjectDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Project: %s", err)
	}
	if err := d.Set("resources", flattenFirebaseProjectResources(res["resources"], d, config)); err != nil {
		return fmt.Errorf("Error reading Project: %s", err)
	}

	return nil
}

func resourceFirebaseProjectDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] Firebase Project resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceFirebaseProjectImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*Config)
	if err := parseImportId([]string{
		"projects/(?P<project>[^/]+)",
		"(?P<project>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "projects/{{project}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenFirebaseProjectProjectNumber(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseProjectDisplayName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseProjectResources(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hosting_site"] =
		flattenFirebaseProjectResourcesHostingSite(original["hostingSite"], d, config)
	transformed["location_id"] =
		flattenFirebaseProjectResourcesLocationId(original["locationId"], d, config)
	transformed["realtime_database_instance"] =
		flattenFirebaseProjectResourcesRealtimeDatabaseInstance(original["realtimeDatabaseInstance"], d, config)
	transformed["storage_bucket"] =
		flattenFirebaseProjectResourcesStorageBucket(original["storageBucket"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseProjectResourcesHostingSite(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseProjectResourcesLocationId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseProjectResourcesRealtimeDatabaseInstance(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseProjectResourcesStorageBucket(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}
