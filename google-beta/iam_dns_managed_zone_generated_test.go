// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccDNSManagedZoneIamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time":   {},
		},
		Steps: []resource.TestStep{
			{
				Config: testAccDNSManagedZoneIamBinding_basicGenerated(context),
			},
			{
				ResourceName:      "google_dns_managed_zone_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/managedZones/%s roles/viewer", getTestProjectFromEnv(), fmt.Sprintf("example-zone%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				// Test Iam Binding update
				Config: testAccDNSManagedZoneIamBinding_updateGenerated(context),
			},
			{
				ResourceName:      "google_dns_managed_zone_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/managedZones/%s roles/viewer", getTestProjectFromEnv(), fmt.Sprintf("example-zone%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccDNSManagedZoneIamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time":   {},
		},
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccDNSManagedZoneIamMember_basicGenerated(context),
			},
			{
				ResourceName:      "google_dns_managed_zone_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/managedZones/%s roles/viewer user:admin@hashicorptest.com", getTestProjectFromEnv(), fmt.Sprintf("example-zone%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccDNSManagedZoneIamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time":   {},
		},
		Steps: []resource.TestStep{
			{
				Config: testAccDNSManagedZoneIamPolicy_basicGenerated(context),
			},
			{
				ResourceName:      "google_dns_managed_zone_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/managedZones/%s", getTestProjectFromEnv(), fmt.Sprintf("example-zone%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccDNSManagedZoneIamPolicy_emptyBinding(context),
			},
			{
				ResourceName:      "google_dns_managed_zone_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/managedZones/%s", getTestProjectFromEnv(), fmt.Sprintf("example-zone%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccDNSManagedZoneIamMember_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dns_managed_zone" "example-zone" {
  name        = "example-zone"
  dns_name    = "example-${random_id.rnd.hex}.com."
  description = "Example DNS zone"
  labels = {
    foo = "bar"
  }
}

resource "random_id" "rnd" {
  byte_length = 4
}

resource "google_dns_managed_zone_iam_member" "foo" {
  project = google_dns_managed_zone.example-zone.project
  name = google_dns_managed_zone.example-zone.name
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccDNSManagedZoneIamPolicy_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dns_managed_zone" "example-zone" {
  name        = "example-zone"
  dns_name    = "example-${random_id.rnd.hex}.com."
  description = "Example DNS zone"
  labels = {
    foo = "bar"
  }
}

resource "random_id" "rnd" {
  byte_length = 4
}

data "google_iam_policy" "foo" {
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
}

resource "google_dns_managed_zone_iam_policy" "foo" {
  project = google_dns_managed_zone.example-zone.project
  name = google_dns_managed_zone.example-zone.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccDNSManagedZoneIamPolicy_emptyBinding(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dns_managed_zone" "example-zone" {
  name        = "example-zone"
  dns_name    = "example-${random_id.rnd.hex}.com."
  description = "Example DNS zone"
  labels = {
    foo = "bar"
  }
}

resource "random_id" "rnd" {
  byte_length = 4
}

data "google_iam_policy" "foo" {
}

resource "google_dns_managed_zone_iam_policy" "foo" {
  project = google_dns_managed_zone.example-zone.project
  name = google_dns_managed_zone.example-zone.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccDNSManagedZoneIamBinding_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dns_managed_zone" "example-zone" {
  name        = "example-zone"
  dns_name    = "example-${random_id.rnd.hex}.com."
  description = "Example DNS zone"
  labels = {
    foo = "bar"
  }
}

resource "random_id" "rnd" {
  byte_length = 4
}

resource "google_dns_managed_zone_iam_binding" "foo" {
  project = google_dns_managed_zone.example-zone.project
  name = google_dns_managed_zone.example-zone.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccDNSManagedZoneIamBinding_updateGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dns_managed_zone" "example-zone" {
  name        = "example-zone"
  dns_name    = "example-${random_id.rnd.hex}.com."
  description = "Example DNS zone"
  labels = {
    foo = "bar"
  }
}

resource "random_id" "rnd" {
  byte_length = 4
}

resource "google_dns_managed_zone_iam_binding" "foo" {
  project = google_dns_managed_zone.example-zone.project
  name = google_dns_managed_zone.example-zone.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}
