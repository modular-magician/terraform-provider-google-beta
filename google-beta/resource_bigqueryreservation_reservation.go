// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	dcl "github.com/GoogleCloudPlatform/declarative-resource-client-library/dcl"
	bigqueryreservation "github.com/GoogleCloudPlatform/declarative-resource-client-library/services/google/bigqueryreservation/beta"
)

func resourceBigqueryreservationReservation() *schema.Resource {
	return &schema.Resource{
		Create: resourceBigqueryreservationReservationCreate,
		Read:   resourceBigqueryreservationReservationRead,
		Update: resourceBigqueryreservationReservationUpdate,
		Delete: resourceBigqueryreservationReservationDelete,

		Importer: &schema.ResourceImporter{
			State: resourceBigqueryreservationReservationImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(10 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: ``,
			},

			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: ``,
			},

			"ignore_idle_slots": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: ``,
			},

			"project": {
				Type:             schema.TypeString,
				Computed:         true,
				Optional:         true,
				ForceNew:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
				Description:      ``,
			},

			"slot_capacity": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: ``,
			},

			"creation_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: ``,
			},

			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: ``,
			},
		},
	}
}

func resourceBigqueryreservationReservationCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := &bigqueryreservation.Reservation{
		Location:        dcl.StringOrNil(d.Get("location").(string)),
		Name:            dcl.StringOrNil(d.Get("name").(string)),
		IgnoreIdleSlots: dcl.Bool(d.Get("ignore_idle_slots").(bool)),
		Project:         dcl.String(project),
		SlotCapacity:    dcl.Int64OrNil(int64(d.Get("slot_capacity").(int))),
	}

	id, err := replaceVarsForId(d, config, "projects/{{project}}/locations/{{location}}/reservations/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)
	createDirective := CreateDirective
	res, err := config.clientBigqueryReservationDCL.ApplyReservation(context.Background(), obj, createDirective...)
	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error creating Reservation: %s", err)
	}

	log.Printf("[DEBUG] Finished creating Reservation %q: %#v", d.Id(), res)

	return resourceBigqueryreservationReservationRead(d, meta)
}

func resourceBigqueryreservationReservationRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := &bigqueryreservation.Reservation{
		Location:        dcl.StringOrNil(d.Get("location").(string)),
		Name:            dcl.StringOrNil(d.Get("name").(string)),
		IgnoreIdleSlots: dcl.Bool(d.Get("ignore_idle_slots").(bool)),
		Project:         dcl.String(project),
		SlotCapacity:    dcl.Int64OrNil(int64(d.Get("slot_capacity").(int))),
	}

	res, err := config.clientBigqueryReservationDCL.GetReservation(context.Background(), obj)
	if err != nil {
		// Resource not found
		d.SetId("")
		return err
	}

	if err = d.Set("location", res.Location); err != nil {
		return fmt.Errorf("error setting location in state: %s", err)
	}
	if err = d.Set("name", res.Name); err != nil {
		return fmt.Errorf("error setting name in state: %s", err)
	}
	if err = d.Set("ignore_idle_slots", res.IgnoreIdleSlots); err != nil {
		return fmt.Errorf("error setting ignore_idle_slots in state: %s", err)
	}
	if err = d.Set("project", res.Project); err != nil {
		return fmt.Errorf("error setting project in state: %s", err)
	}
	if err = d.Set("slot_capacity", res.SlotCapacity); err != nil {
		return fmt.Errorf("error setting slot_capacity in state: %s", err)
	}
	if err = d.Set("creation_time", res.CreationTime); err != nil {
		return fmt.Errorf("error setting creation_time in state: %s", err)
	}
	if err = d.Set("update_time", res.UpdateTime); err != nil {
		return fmt.Errorf("error setting update_time in state: %s", err)
	}

	return nil
}
func resourceBigqueryreservationReservationUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := &bigqueryreservation.Reservation{
		Location:        dcl.StringOrNil(d.Get("location").(string)),
		Name:            dcl.StringOrNil(d.Get("name").(string)),
		IgnoreIdleSlots: dcl.Bool(d.Get("ignore_idle_slots").(bool)),
		Project:         dcl.String(project),
		SlotCapacity:    dcl.Int64OrNil(int64(d.Get("slot_capacity").(int))),
	}
	directive := UpdateDirective
	res, err := config.clientBigqueryReservationDCL.ApplyReservation(context.Background(), obj, directive...)
	if err != nil {
		return fmt.Errorf("Error updating Reservation: %s", err)
	}

	log.Printf("[DEBUG] Finished creating Reservation %q: %#v", d.Id(), res)

	return resourceBigqueryreservationReservationRead(d, meta)
}

func resourceBigqueryreservationReservationDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := &bigqueryreservation.Reservation{
		Location:        dcl.StringOrNil(d.Get("location").(string)),
		Name:            dcl.StringOrNil(d.Get("name").(string)),
		IgnoreIdleSlots: dcl.Bool(d.Get("ignore_idle_slots").(bool)),
		Project:         dcl.String(project),
		SlotCapacity:    dcl.Int64OrNil(int64(d.Get("slot_capacity").(int))),
	}

	log.Printf("[DEBUG] Deleting Reservation %q", d.Id())
	if err := config.clientBigqueryReservationDCL.DeleteReservation(context.Background(), obj); err != nil {
		return fmt.Errorf("Error deleting Reservation: %s", err)
	}

	log.Printf("[DEBUG] Finished deleting Reservation %q", d.Id())
	return nil
}

func resourceBigqueryreservationReservationImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*Config)
	if err := parseImportId([]string{
		"projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/reservations/(?P<name>[^/]+)",
		"(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)",
		"(?P<location>[^/]+)/(?P<name>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := replaceVarsForId(d, config, "projects/{{project}}/locations/{{location}}/reservations/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}
