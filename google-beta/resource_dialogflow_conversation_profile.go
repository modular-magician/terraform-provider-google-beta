// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceDialogflowConversationProfile() *schema.Resource {
	return &schema.Resource{
		Create: resourceDialogflowConversationProfileCreate,
		Read:   resourceDialogflowConversationProfileRead,
		Update: resourceDialogflowConversationProfileUpdate,
		Delete: resourceDialogflowConversationProfileDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDialogflowConversationProfileImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Human readable name for this profile. Max length 1024 bytes.`,
			},
			"automated_agent_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for an automated agent to use with this profile.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"agent": {
							Type:     schema.TypeString,
							Required: true,
							Description: `ID of the Dialogflow agent environment to use.
This project needs to either be the same project as the conversation or you need to grant service-<Conversation Project Number>@gcp-sa-dialogflow.iam.gserviceaccount.com the Dialogflow API Service Agent role in this project.
For ES agents, use format: projects/<Project ID>/locations/<Location ID>/agent/environments/<Environment ID or '-'>. If environment is not specified, the default draft environment is used. 
For CX agents, use format projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/environments/<Environment ID or '-'>. If environment is not specified, the default draft environment is used.`,
						},
					},
				},
			},
			"human_agent_assistant_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for agent assistance to use with this profile.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"end_user_suggestion_config": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `Configuration for agent assistance of end user participant.
Currently, this feature is not general available, please contact Google to get access.`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"feature_configs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Configuration of different suggestion features. One feature can have only one config.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"conversation_model_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs of custom conversation model.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"model": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Conversation model resource name. Format: projects/<Project ID>/conversationModels/<Model ID>.`,
															},
														},
													},
												},
												"conversation_process_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs for processing conversation.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"recent_sentences_count": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Number of recent non-small-talk sentences to use as context for article and FAQ suggestion.`,
															},
														},
													},
												},
												"enable_event_based_suggestion": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Automatically iterates all participants and tries to compile suggestions.
Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST.`,
												},
												"query_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs of query.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"confidence_threshold": {
																Type:     schema.TypeFloat,
																Optional: true,
																Description: `Confidence threshold of query result.
Agent Assist gives each suggestion a score in the range [0.0, 1.0], based on the relevance between the suggestion and the current conversation context. A score of 0.0 has no relevance, while a score of 1.0 has high relevance. Only suggestions with a score greater than or equal to the value of this field are included in the results.
For a baseline model (the default), the recommended value is in the range [0.05, 0.1].
For a custom model, there is no recommended value. Tune this value by starting from a very low value and slowly increasing until you have desired results.
If this field is not set, it defaults to 0.0, which means that all suggestions are returned.
Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE.`,
															},
															"context_filter_settings": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Determines how recent conversation context is filtered when generating suggestions. If unspecified, no messages will be dropped.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"drop_handoff_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, the last message from virtual agent (hand off message) and the message before it (trigger message of hand off) are dropped.`,
																		},
																		"drop_ivr_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, all messages from ivr stage are dropped.`,
																		},
																		"drop_virtual_agent_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, all messages from virtual agent are dropped.`,
																		},
																	},
																},
															},
															"dialogflow_query_source": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Query from Dialogflow agent. It is used by DIALOGFLOW_ASSIST.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"agent": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `The name of a Dialogflow virtual agent used for end user side intent detection and suggestion. Format: projects/<Project Number/ ID>/locations/<Location ID>/agent. When multiple agents are allowed in the same Dialogflow project.`,
																		},
																	},
																},
															},
															"document_query_source": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Query from knowledge base document. It is used by: SMART_REPLY, SMART_COMPOSE.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"documents": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `Knowledge documents to query from. Format: projects/<Project ID>/locations/<Location ID>/knowledgeBases/<KnowledgeBase ID>/documents/<Document ID>. Currently, at most 5 documents are supported.`,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
															"knowledge_base_query_source": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Query from knowledgebase. It is used by: ARTICLE_SUGGESTION, FAQ.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"knowledge_bases": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `Knowledge bases to query. Format: projects/<Project ID>/locations/<Location ID>/knowledgeBases/<Knowledge Base ID>. Currently, at most 5 knowledge bases are supported.`,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
															"max_results": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Maximum number of results to return. Currently, if unset, defaults to 10. And the max number is 20.`,
															},
														},
													},
												},
												"suggestion_feature": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The suggestion feature.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"type": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: validateEnum([]string{"ARTICLE_SUGGESTION", "FAQ", "SMART_REPLY", ""}),
																Description: `Type of Human Agent Assistant API feature to request.
* ARTICLE_SUGGESTION: Run article suggestion model for chat.
* FAQ: Run FAQ model for chat.
* SMART_REPLY: Run smart reply model for chat. Possible values: ["ARTICLE_SUGGESTION", "FAQ", "SMART_REPLY"]`,
															},
														},
													},
												},
												"suggestion_trigger_settings": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Settings of suggestion trigger.
Currently, only ARTICLE_SUGGESTION and FAQ will use this field.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"no_smalltalk": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Do not trigger if last utterance is small talk.`,
															},
															"only_end_user": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Only trigger suggestion if participant role of last utterance is END_USER.`,
															},
														},
													},
												},
											},
										},
									},
									"group_suggestion_responses": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `If groupSuggestionResponses is false, and there are multiple featureConfigs in event based suggestion or StreamingAnalyzeContent, we will try to deliver suggestions to customers as soon as we get new suggestion. Different type of suggestions based on the same context will be in separate Pub/Sub event or StreamingAnalyzeContentResponse.
If groupSuggestionResponses set to true. All the suggestions to the same participant based on the same context will be grouped into a single Pub/Sub event or StreamingAnalyzeContentResponse`,
									},
								},
							},
						},
						"human_agent_suggestion_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for agent assistance of human agent participant.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"feature_configs": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Configuration of different suggestion features. One feature can have only one config.`,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"conversation_model_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs of custom conversation model.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"model": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `Conversation model resource name. Format: projects/<Project ID>/conversationModels/<Model ID>.`,
															},
														},
													},
												},
												"conversation_process_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs for processing conversation.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"recent_sentences_count": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Number of recent non-small-talk sentences to use as context for article and FAQ suggestion.`,
															},
														},
													},
												},
												"enable_event_based_suggestion": {
													Type:     schema.TypeBool,
													Optional: true,
													Description: `Automatically iterates all participants and tries to compile suggestions.
Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST.`,
												},
												"query_config": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `Configs of query.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"confidence_threshold": {
																Type:     schema.TypeFloat,
																Optional: true,
																Description: `Confidence threshold of query result.
Agent Assist gives each suggestion a score in the range [0.0, 1.0], based on the relevance between the suggestion and the current conversation context. A score of 0.0 has no relevance, while a score of 1.0 has high relevance. Only suggestions with a score greater than or equal to the value of this field are included in the results.
For a baseline model (the default), the recommended value is in the range [0.05, 0.1].
For a custom model, there is no recommended value. Tune this value by starting from a very low value and slowly increasing until you have desired results.
If this field is not set, it defaults to 0.0, which means that all suggestions are returned.
Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE.`,
															},
															"context_filter_settings": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Determines how recent conversation context is filtered when generating suggestions. If unspecified, no messages will be dropped.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"drop_handoff_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, the last message from virtual agent (hand off message) and the message before it (trigger message of hand off) are dropped.`,
																		},
																		"drop_ivr_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, all messages from ivr stage are dropped.`,
																		},
																		"drop_virtual_agent_messages": {
																			Type:        schema.TypeBool,
																			Optional:    true,
																			Description: `If set to true, all messages from virtual agent are dropped.`,
																		},
																	},
																},
															},
															"dialogflow_query_source": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Query from Dialogflow agent. It is used by DIALOGFLOW_ASSIST.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"agent": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			Description: `The name of a Dialogflow virtual agent used for end user side intent detection and suggestion. Format: projects/<Project Number/ ID>/locations/<Location ID>/agent. When multiple agents are allowed in the same Dialogflow project.`,
																		},
																	},
																},
															},
															"document_query_source": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Query from knowledge base document. It is used by: SMART_REPLY, SMART_COMPOSE.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"documents": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `Knowledge documents to query from. Format: projects/<Project ID>/locations/<Location ID>/knowledgeBases/<KnowledgeBase ID>/documents/<Document ID>. Currently, at most 5 documents are supported.`,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
															"knowledge_base_query_source": {
																Type:        schema.TypeList,
																Optional:    true,
																Description: `Query from knowledgebase. It is used by: ARTICLE_SUGGESTION, FAQ.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"knowledge_bases": {
																			Type:        schema.TypeList,
																			Optional:    true,
																			Description: `Knowledge bases to query. Format: projects/<Project ID>/locations/<Location ID>/knowledgeBases/<Knowledge Base ID>. Currently, at most 5 knowledge bases are supported.`,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},
															"max_results": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `Maximum number of results to return. Currently, if unset, defaults to 10. And the max number is 20.`,
															},
														},
													},
												},
												"suggestion_feature": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `The suggestion feature.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"type": {
																Type:         schema.TypeString,
																Optional:     true,
																ValidateFunc: validateEnum([]string{"ARTICLE_SUGGESTION", "FAQ", "SMART_REPLY", ""}),
																Description: `Type of Human Agent Assistant API feature to request.
* ARTICLE_SUGGESTION: Run article suggestion model for chat.
* FAQ: Run FAQ model for chat.
* SMART_REPLY: Run smart reply model for chat. Possible values: ["ARTICLE_SUGGESTION", "FAQ", "SMART_REPLY"]`,
															},
														},
													},
												},
												"suggestion_trigger_settings": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `Settings of suggestion trigger.
Currently, only ARTICLE_SUGGESTION and FAQ will use this field.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"no_smalltalk": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Do not trigger if last utterance is small talk.`,
															},
															"only_end_user": {
																Type:        schema.TypeBool,
																Optional:    true,
																Description: `Only trigger suggestion if participant role of last utterance is END_USER.`,
															},
														},
													},
												},
											},
										},
									},
									"group_suggestion_responses": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `If groupSuggestionResponses is false, and there are multiple featureConfigs in event based suggestion or StreamingAnalyzeContent, we will try to deliver suggestions to customers as soon as we get new suggestion. Different type of suggestions based on the same context will be in separate Pub/Sub event or StreamingAnalyzeContentResponse.
If groupSuggestionResponses set to true. All the suggestions to the same participant based on the same context will be grouped into a single Pub/Sub event or StreamingAnalyzeContentResponse`,
									},
								},
							},
						},
						"message_analysis_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Configuration for message analysis.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enable_entity_extraction": {
										Type:     schema.TypeBool,
										Optional: true,
										Description: `Enable entity extraction in conversation messages on agent assist stage. If unspecified, defaults to false.
Currently, this feature is not general available, please contact Google to get access.`,
									},
									"enable_sentiment_analysis": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: `Enable sentiment analysis in conversation messages on agent assist stage. If unspecified, defaults to false. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral: https://cloud.google.com/natural-language/docs/basics#sentimentAnalysis For Participants.StreamingAnalyzeContent method, result will be in StreamingAnalyzeContentResponse.message.SentimentAnalysisResult. For Participants.AnalyzeContent method, result will be in AnalyzeContentResponse.message.SentimentAnalysisResult For Conversations.ListMessages method, result will be in ListMessagesResponse.messages.SentimentAnalysisResult If Pub/Sub notification is configured, result will be in ConversationEvent.new_message_payload.SentimentAnalysisResult.`,
									},
								},
							},
						},
						"notification_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Pub/Sub topic on which to publish new agent assistant events.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"message_format": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: validateEnum([]string{"PROTO", "JSON", ""}),
										Description: `Format of message.
* PROTO: Pub/Sub message will be serialized proto.
* JSON: Pub/Sub message will be json. Possible values: ["PROTO", "JSON"]`,
									},
									"topic": {
										Type:     schema.TypeString,
										Optional: true,
										Description: `Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos.
For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant service-<Conversation Project Number>@gcp-sa-dialogflow.iam.gserviceaccount.com the Dialogflow Service Agent role in the topic project.
For chat integration to receive notification, make sure API caller has been granted the Dialogflow Service Agent role for the topic.
Format: projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>.`,
									},
								},
							},
						},
					},
				},
			},
			"human_agent_handoff_config": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Configuration for connecting to a live agent.
Currently, this feature is not general available, please contact Google to get access.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"live_person_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Uses LivePerson (https://www.liveperson.com).`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"account_number": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Account number of the LivePerson account to connect. This is the account number you input at the login page.`,
									},
								},
							},
						},
						"salesforce_live_agent_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Uses Salesforce Live Agent.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"button_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Live Agent chat button ID.`,
									},
									"deployment_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Live Agent deployment ID.`,
									},
									"endpoint_domain": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `Domain of the Live Agent endpoint for this agent. You can find the endpoint URL in the Live Agent settings page. For example if URL has the form https://d.la4-c2-phx.salesforceliveagent.com/..., you should fill in d.la4-c2-phx.salesforceliveagent.com.`,
									},
									"organization_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: `The organization ID of the Salesforce account.`,
									},
								},
							},
						},
					},
				},
			},
			"language_code": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Language code for the conversation profile. If not specified, the language is en-US. Language at ConversationProfile should be set for all non en-US languages. This should be a BCP-47 language tag. Example: "en-US".`,
			},
			"logging_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for logging conversation lifecycle events.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enable_stackdriver_logging": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Whether to log conversation events like CONVERSATION_STARTED to Stackdriver in the conversation project as JSON format ConversationEvent protos.`,
						},
					},
				},
			},
			"new_message_event_notification_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for publishing new message events. Event will be sent in format of ConversationEvent`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"message_format": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: validateEnum([]string{"PROTO", "JSON", ""}),
							Description: `Format of message.
* PROTO: Pub/Sub message will be serialized proto.
* JSON: Pub/Sub message will be json. Possible values: ["PROTO", "JSON"]`,
						},
						"topic": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos.
For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant service-<Conversation Project Number>@gcp-sa-dialogflow.iam.gserviceaccount.com the Dialogflow Service Agent role in the topic project.
For chat integration to receive notification, make sure API caller has been granted the Dialogflow Service Agent role for the topic.
Format: projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>.`,
						},
					},
				},
			},
			"notification_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configuration for publishing conversation lifecycle events.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"message_format": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: validateEnum([]string{"PROTO", "JSON", ""}),
							Description: `Format of message.
* PROTO: Pub/Sub message will be serialized proto.
* JSON: Pub/Sub message will be json. Possible values: ["PROTO", "JSON"]`,
						},
						"topic": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos.
For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant service-<Conversation Project Number>@gcp-sa-dialogflow.iam.gserviceaccount.com the Dialogflow Service Agent role in the topic project.
For chat integration to receive notification, make sure API caller has been granted the Dialogflow Service Agent role for the topic.
Format: projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>.`,
						},
					},
				},
			},
			"security_settings": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Name of the CX SecuritySettings reference for the agent. Format: projects/<Project ID>/locations/<Location ID>/securitySettings/<Security Settings ID>.
- !ruby/object:Api::Type::String
  name: "uri"
  required: true
  description: |
    The fulfillment URI for receiving POST requests. It must use https protocol.
- !ruby/object:Api::Type::String
  name: "username"
  description: |
    The user name for HTTP Basic authentication.
- !ruby/object:Api::Type::String
  name: "password"
  description: |
    The password for HTTP Basic authentication.
- !ruby/object:Api::Type::KeyValuePairs
  name: "requestHeaders"
  description: |
    The HTTP request headers to send together with fulfillment requests.`,
			},
			"stt_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Settings for speech transcription.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"speech_model_variant": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: validateEnum([]string{"USE_BEST_AVAILABLE", "USE_STANDARD", "USE_ENHANCED", ""}),
							Description: `The speech model used in speech to text.
* USE_BEST_AVAILABLE: Use the best available variant of the [Speech model][InputAudioConfig.model] that the caller is eligible for.
* USE_STANDARD: Use standard model variant even if an enhanced model is available.
* USE_ENHANCED: Use an enhanced model variant. If an enhanced variant does not exist for the given model and request language, Dialogflow falls back to the standard variant. Possible values: ["USE_BEST_AVAILABLE", "USE_STANDARD", "USE_ENHANCED"]`,
						},
					},
				},
			},
			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The time zone of this conversational profile from the time zone database, e.g., America/New_York, Europe/Paris. Defaults to America/New_York.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Create time of the conversation profile.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The unique identifier of this conversation profile. 
Format: projects/<Project ID>/locations/<Location ID>/conversationProfiles/<Conversation Profile ID>.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Update time of the conversation profile.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDialogflowConversationProfileCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandDialogflowConversationProfileDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !isEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	automatedAgentConfigProp, err := expandDialogflowConversationProfileAutomatedAgentConfig(d.Get("automated_agent_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("automated_agent_config"); !isEmptyValue(reflect.ValueOf(automatedAgentConfigProp)) && (ok || !reflect.DeepEqual(v, automatedAgentConfigProp)) {
		obj["automatedAgentConfig"] = automatedAgentConfigProp
	}
	humanAgentAssistantConfigProp, err := expandDialogflowConversationProfileHumanAgentAssistantConfig(d.Get("human_agent_assistant_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("human_agent_assistant_config"); !isEmptyValue(reflect.ValueOf(humanAgentAssistantConfigProp)) && (ok || !reflect.DeepEqual(v, humanAgentAssistantConfigProp)) {
		obj["humanAgentAssistantConfig"] = humanAgentAssistantConfigProp
	}
	humanAgentHandoffConfigProp, err := expandDialogflowConversationProfileHumanAgentHandoffConfig(d.Get("human_agent_handoff_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("human_agent_handoff_config"); !isEmptyValue(reflect.ValueOf(humanAgentHandoffConfigProp)) && (ok || !reflect.DeepEqual(v, humanAgentHandoffConfigProp)) {
		obj["humanAgentHandoffConfig"] = humanAgentHandoffConfigProp
	}
	notificationConfigProp, err := expandDialogflowConversationProfileNotificationConfig(d.Get("notification_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("notification_config"); !isEmptyValue(reflect.ValueOf(notificationConfigProp)) && (ok || !reflect.DeepEqual(v, notificationConfigProp)) {
		obj["notificationConfig"] = notificationConfigProp
	}
	loggingConfigProp, err := expandDialogflowConversationProfileLoggingConfig(d.Get("logging_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("logging_config"); !isEmptyValue(reflect.ValueOf(loggingConfigProp)) && (ok || !reflect.DeepEqual(v, loggingConfigProp)) {
		obj["loggingConfig"] = loggingConfigProp
	}
	newMessageEventNotificationConfigProp, err := expandDialogflowConversationProfileNewMessageEventNotificationConfig(d.Get("new_message_event_notification_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("new_message_event_notification_config"); !isEmptyValue(reflect.ValueOf(newMessageEventNotificationConfigProp)) && (ok || !reflect.DeepEqual(v, newMessageEventNotificationConfigProp)) {
		obj["newMessageEventNotificationConfig"] = newMessageEventNotificationConfigProp
	}
	sttConfigProp, err := expandDialogflowConversationProfileSttConfig(d.Get("stt_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("stt_config"); !isEmptyValue(reflect.ValueOf(sttConfigProp)) && (ok || !reflect.DeepEqual(v, sttConfigProp)) {
		obj["sttConfig"] = sttConfigProp
	}
	languageCodeProp, err := expandDialogflowConversationProfileLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("language_code"); !isEmptyValue(reflect.ValueOf(languageCodeProp)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}
	timeZoneProp, err := expandDialogflowConversationProfileTimeZone(d.Get("time_zone"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("time_zone"); !isEmptyValue(reflect.ValueOf(timeZoneProp)) && (ok || !reflect.DeepEqual(v, timeZoneProp)) {
		obj["timeZone"] = timeZoneProp
	}
	securitySettingsProp, err := expandDialogflowConversationProfileSecuritySettings(d.Get("security_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("security_settings"); !isEmptyValue(reflect.ValueOf(securitySettingsProp)) && (ok || !reflect.DeepEqual(v, securitySettingsProp)) {
		obj["securitySettings"] = securitySettingsProp
	}

	url, err := replaceVars(d, config, "{{DialogflowBasePath}}projects/{{project}}/conversationProfiles/")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new ConversationProfile: %#v", obj)
	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConversationProfile: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating ConversationProfile: %s", err)
	}
	if err := d.Set("name", flattenDialogflowConversationProfileName(res["name"], d, config)); err != nil {
		return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// `name` is autogenerated from the api so needs to be set post-create
	name, ok := res["name"]
	if !ok {
		respBody, ok := res["response"]
		if !ok {
			return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
		}

		name, ok = respBody.(map[string]interface{})["name"]
		if !ok {
			return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
		}
	}
	if err := d.Set("name", name.(string)); err != nil {
		return fmt.Errorf("Error setting name: %s", err)
	}
	d.SetId(name.(string))

	log.Printf("[DEBUG] Finished creating ConversationProfile %q: %#v", d.Id(), res)

	return resourceDialogflowConversationProfileRead(d, meta)
}

func resourceDialogflowConversationProfileRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{DialogflowBasePath}}{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConversationProfile: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("DialogflowConversationProfile %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}

	if err := d.Set("name", flattenDialogflowConversationProfileName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("display_name", flattenDialogflowConversationProfileDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("create_time", flattenDialogflowConversationProfileCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("update_time", flattenDialogflowConversationProfileUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("automated_agent_config", flattenDialogflowConversationProfileAutomatedAgentConfig(res["automatedAgentConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("human_agent_assistant_config", flattenDialogflowConversationProfileHumanAgentAssistantConfig(res["humanAgentAssistantConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("human_agent_handoff_config", flattenDialogflowConversationProfileHumanAgentHandoffConfig(res["humanAgentHandoffConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("notification_config", flattenDialogflowConversationProfileNotificationConfig(res["notificationConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("logging_config", flattenDialogflowConversationProfileLoggingConfig(res["loggingConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("new_message_event_notification_config", flattenDialogflowConversationProfileNewMessageEventNotificationConfig(res["newMessageEventNotificationConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("stt_config", flattenDialogflowConversationProfileSttConfig(res["sttConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("language_code", flattenDialogflowConversationProfileLanguageCode(res["languageCode"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("time_zone", flattenDialogflowConversationProfileTimeZone(res["timeZone"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}
	if err := d.Set("security_settings", flattenDialogflowConversationProfileSecuritySettings(res["securitySettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading ConversationProfile: %s", err)
	}

	return nil
}

func resourceDialogflowConversationProfileUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConversationProfile: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandDialogflowConversationProfileDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	automatedAgentConfigProp, err := expandDialogflowConversationProfileAutomatedAgentConfig(d.Get("automated_agent_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("automated_agent_config"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, automatedAgentConfigProp)) {
		obj["automatedAgentConfig"] = automatedAgentConfigProp
	}
	humanAgentAssistantConfigProp, err := expandDialogflowConversationProfileHumanAgentAssistantConfig(d.Get("human_agent_assistant_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("human_agent_assistant_config"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, humanAgentAssistantConfigProp)) {
		obj["humanAgentAssistantConfig"] = humanAgentAssistantConfigProp
	}
	humanAgentHandoffConfigProp, err := expandDialogflowConversationProfileHumanAgentHandoffConfig(d.Get("human_agent_handoff_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("human_agent_handoff_config"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, humanAgentHandoffConfigProp)) {
		obj["humanAgentHandoffConfig"] = humanAgentHandoffConfigProp
	}
	notificationConfigProp, err := expandDialogflowConversationProfileNotificationConfig(d.Get("notification_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("notification_config"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, notificationConfigProp)) {
		obj["notificationConfig"] = notificationConfigProp
	}
	loggingConfigProp, err := expandDialogflowConversationProfileLoggingConfig(d.Get("logging_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("logging_config"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, loggingConfigProp)) {
		obj["loggingConfig"] = loggingConfigProp
	}
	newMessageEventNotificationConfigProp, err := expandDialogflowConversationProfileNewMessageEventNotificationConfig(d.Get("new_message_event_notification_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("new_message_event_notification_config"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, newMessageEventNotificationConfigProp)) {
		obj["newMessageEventNotificationConfig"] = newMessageEventNotificationConfigProp
	}
	sttConfigProp, err := expandDialogflowConversationProfileSttConfig(d.Get("stt_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("stt_config"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, sttConfigProp)) {
		obj["sttConfig"] = sttConfigProp
	}
	languageCodeProp, err := expandDialogflowConversationProfileLanguageCode(d.Get("language_code"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("language_code"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, languageCodeProp)) {
		obj["languageCode"] = languageCodeProp
	}
	timeZoneProp, err := expandDialogflowConversationProfileTimeZone(d.Get("time_zone"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("time_zone"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, timeZoneProp)) {
		obj["timeZone"] = timeZoneProp
	}
	securitySettingsProp, err := expandDialogflowConversationProfileSecuritySettings(d.Get("security_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("security_settings"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, securitySettingsProp)) {
		obj["securitySettings"] = securitySettingsProp
	}

	url, err := replaceVars(d, config, "{{DialogflowBasePath}}{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating ConversationProfile %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("automated_agent_config") {
		updateMask = append(updateMask, "automatedAgentConfig")
	}

	if d.HasChange("human_agent_assistant_config") {
		updateMask = append(updateMask, "humanAgentAssistantConfig")
	}

	if d.HasChange("human_agent_handoff_config") {
		updateMask = append(updateMask, "humanAgentHandoffConfig")
	}

	if d.HasChange("notification_config") {
		updateMask = append(updateMask, "notificationConfig")
	}

	if d.HasChange("logging_config") {
		updateMask = append(updateMask, "loggingConfig")
	}

	if d.HasChange("new_message_event_notification_config") {
		updateMask = append(updateMask, "newMessageEventNotificationConfig")
	}

	if d.HasChange("stt_config") {
		updateMask = append(updateMask, "sttConfig")
	}

	if d.HasChange("language_code") {
		updateMask = append(updateMask, "languageCode")
	}

	if d.HasChange("time_zone") {
		updateMask = append(updateMask, "timeZone")
	}

	if d.HasChange("security_settings") {
		updateMask = append(updateMask, "securitySettings")
	}
	// updateMask is a URL parameter but not present in the schema, so replaceVars
	// won't set it
	url, err = addQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return fmt.Errorf("Error updating ConversationProfile %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating ConversationProfile %q: %#v", d.Id(), res)
	}

	return resourceDialogflowConversationProfileRead(d, meta)
}

func resourceDialogflowConversationProfileDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for ConversationProfile: %s", err)
	}
	billingProject = project

	url, err := replaceVars(d, config, "{{DialogflowBasePath}}{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting ConversationProfile %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return handleNotFoundError(err, d, "ConversationProfile")
	}

	log.Printf("[DEBUG] Finished deleting ConversationProfile %q: %#v", d.Id(), res)
	return nil
}

func resourceDialogflowConversationProfileImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {

	config := meta.(*Config)

	// current import_formats can't import fields with forward slashes in their value
	if err := parseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
		return nil, err
	}

	stringParts := strings.Split(d.Get("name").(string), "/")
	if len(stringParts) < 2 {
		return nil, fmt.Errorf(
			"Could not split project from name: %s",
			d.Get("name"),
		)
	}

	if err := d.Set("project", stringParts[1]); err != nil {
		return nil, fmt.Errorf("Error setting project: %s", err)
	}
	return []*schema.ResourceData{d}, nil
}

func flattenDialogflowConversationProfileName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileDisplayName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileCreateTime(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileUpdateTime(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileAutomatedAgentConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent"] =
		flattenDialogflowConversationProfileAutomatedAgentConfigAgent(original["agent"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileAutomatedAgentConfigAgent(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["notification_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(original["notificationConfig"], d, config)
	transformed["human_agent_suggestion_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(original["humanAgentSuggestionConfig"], d, config)
	transformed["end_user_suggestion_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(original["endUserSuggestionConfig"], d, config)
	transformed["message_analysis_config"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(original["messageAnalysisConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(original["topic"], d, config)
	transformed["message_format"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(original["messageFormat"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["feature_configs"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(original["featureConfigs"], d, config)
	transformed["group_suggestion_responses"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(original["groupSuggestionResponses"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"suggestion_feature":            flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestionFeature"], d, config),
			"enable_event_based_suggestion": flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enableEventBasedSuggestion"], d, config),
			"suggestion_trigger_settings":   flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestionTriggerSettings"], d, config),
			"query_config":                  flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(original["queryConfig"], d, config),
			"conversation_model_config":     flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(original["conversationModelConfig"], d, config),
			"conversation_process_config":   flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversationProcessConfig"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["no_smalltalk"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmalltalk(original["noSmalltalk"], d, config)
	transformed["only_end_user"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(original["onlyEndUser"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmalltalk(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["max_results"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["maxResults"], d, config)
	transformed["confidence_threshold"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidenceThreshold"], d, config)
	transformed["context_filter_settings"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["contextFilterSettings"], d, config)
	transformed["knowledge_base_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(original["knowledgeBaseQuerySource"], d, config)
	transformed["document_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(original["documentQuerySource"], d, config)
	transformed["dialogflow_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflowQuerySource"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["drop_handoff_messages"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(original["dropHandoffMessages"], d, config)
	transformed["drop_virtual_agent_messages"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(original["dropVirtualAgentMessages"], d, config)
	transformed["drop_ivr_messages"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(original["dropIvrMessages"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["knowledge_bases"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(original["knowledgeBases"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["documents"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(original["documents"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["model"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["recent_sentences_count"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recentSentencesCount"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["feature_configs"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(original["featureConfigs"], d, config)
	transformed["group_suggestion_responses"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(original["groupSuggestionResponses"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"suggestion_feature":            flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestionFeature"], d, config),
			"enable_event_based_suggestion": flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enableEventBasedSuggestion"], d, config),
			"suggestion_trigger_settings":   flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestionTriggerSettings"], d, config),
			"query_config":                  flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(original["queryConfig"], d, config),
			"conversation_model_config":     flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(original["conversationModelConfig"], d, config),
			"conversation_process_config":   flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversationProcessConfig"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["no_smalltalk"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmalltalk(original["noSmalltalk"], d, config)
	transformed["only_end_user"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(original["onlyEndUser"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmalltalk(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["max_results"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["maxResults"], d, config)
	transformed["confidence_threshold"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidenceThreshold"], d, config)
	transformed["context_filter_settings"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["contextFilterSettings"], d, config)
	transformed["knowledge_base_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(original["knowledgeBaseQuerySource"], d, config)
	transformed["document_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(original["documentQuerySource"], d, config)
	transformed["dialogflow_query_source"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflowQuerySource"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["drop_handoff_messages"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(original["dropHandoffMessages"], d, config)
	transformed["drop_virtual_agent_messages"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(original["dropVirtualAgentMessages"], d, config)
	transformed["drop_ivr_messages"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(original["dropIvrMessages"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["knowledge_bases"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(original["knowledgeBases"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["documents"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(original["documents"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["agent"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["model"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["recent_sentences_count"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recentSentencesCount"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_entity_extraction"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(original["enableEntityExtraction"], d, config)
	transformed["enable_sentiment_analysis"] =
		flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(original["enableSentimentAnalysis"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentHandoffConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["live_person_config"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(original["livePersonConfig"], d, config)
	transformed["salesforce_live_agent_config"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfig(original["salesforceLiveAgentConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["account_number"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(original["accountNumber"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["organization_id"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigOrganizationId(original["organizationId"], d, config)
	transformed["deployment_id"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigDeploymentId(original["deploymentId"], d, config)
	transformed["button_id"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigButtonId(original["buttonId"], d, config)
	transformed["endpoint_domain"] =
		flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigEndpointDomain(original["endpointDomain"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigOrganizationId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigDeploymentId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigButtonId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigEndpointDomain(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileNotificationConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenDialogflowConversationProfileNotificationConfigTopic(original["topic"], d, config)
	transformed["message_format"] =
		flattenDialogflowConversationProfileNotificationConfigMessageFormat(original["messageFormat"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileNotificationConfigTopic(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileNotificationConfigMessageFormat(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileLoggingConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_stackdriver_logging"] =
		flattenDialogflowConversationProfileLoggingConfigEnableStackdriverLogging(original["enableStackdriverLogging"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileLoggingConfigEnableStackdriverLogging(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileNewMessageEventNotificationConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenDialogflowConversationProfileNewMessageEventNotificationConfigTopic(original["topic"], d, config)
	transformed["message_format"] =
		flattenDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(original["messageFormat"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileNewMessageEventNotificationConfigTopic(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSttConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["speech_model_variant"] =
		flattenDialogflowConversationProfileSttConfigSpeechModelVariant(original["speechModelVariant"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowConversationProfileSttConfigSpeechModelVariant(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileLanguageCode(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileTimeZone(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDialogflowConversationProfileSecuritySettings(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandDialogflowConversationProfileDisplayName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileAutomatedAgentConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileAutomatedAgentConfigAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !isEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	return transformed, nil
}

func expandDialogflowConversationProfileAutomatedAgentConfigAgent(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNotificationConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(original["notification_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNotificationConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["notificationConfig"] = transformedNotificationConfig
	}

	transformedHumanAgentSuggestionConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(original["human_agent_suggestion_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHumanAgentSuggestionConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["humanAgentSuggestionConfig"] = transformedHumanAgentSuggestionConfig
	}

	transformedEndUserSuggestionConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(original["end_user_suggestion_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndUserSuggestionConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["endUserSuggestionConfig"] = transformedEndUserSuggestionConfig
	}

	transformedMessageAnalysisConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(original["message_analysis_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageAnalysisConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["messageAnalysisConfig"] = transformedMessageAnalysisConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !isEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !isEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigTopic(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigNotificationConfigMessageFormat(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureConfigs, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(original["feature_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureConfigs); val.IsValid() && !isEmptyValue(val) {
		transformed["featureConfigs"] = transformedFeatureConfigs
	}

	transformedGroupSuggestionResponses, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(original["group_suggestion_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGroupSuggestionResponses); val.IsValid() && !isEmptyValue(val) {
		transformed["groupSuggestionResponses"] = transformedGroupSuggestionResponses
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigs(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedSuggestionFeature, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestion_feature"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionFeature); val.IsValid() && !isEmptyValue(val) {
			transformed["suggestionFeature"] = transformedSuggestionFeature
		}

		transformedEnableEventBasedSuggestion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enable_event_based_suggestion"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableEventBasedSuggestion); val.IsValid() && !isEmptyValue(val) {
			transformed["enableEventBasedSuggestion"] = transformedEnableEventBasedSuggestion
		}

		transformedSuggestionTriggerSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestion_trigger_settings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionTriggerSettings); val.IsValid() && !isEmptyValue(val) {
			transformed["suggestionTriggerSettings"] = transformedSuggestionTriggerSettings
		}

		transformedQueryConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(original["query_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryConfig); val.IsValid() && !isEmptyValue(val) {
			transformed["queryConfig"] = transformedQueryConfig
		}

		transformedConversationModelConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(original["conversation_model_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationModelConfig); val.IsValid() && !isEmptyValue(val) {
			transformed["conversationModelConfig"] = transformedConversationModelConfig
		}

		transformedConversationProcessConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversation_process_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationProcessConfig); val.IsValid() && !isEmptyValue(val) {
			transformed["conversationProcessConfig"] = transformedConversationProcessConfig
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !isEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNoSmalltalk, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmalltalk(original["no_smalltalk"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoSmalltalk); val.IsValid() && !isEmptyValue(val) {
		transformed["noSmalltalk"] = transformedNoSmalltalk
	}

	transformedOnlyEndUser, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(original["only_end_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOnlyEndUser); val.IsValid() && !isEmptyValue(val) {
		transformed["onlyEndUser"] = transformedOnlyEndUser
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmalltalk(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaxResults, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["max_results"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxResults); val.IsValid() && !isEmptyValue(val) {
		transformed["maxResults"] = transformedMaxResults
	}

	transformedConfidenceThreshold, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidence_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceThreshold); val.IsValid() && !isEmptyValue(val) {
		transformed["confidenceThreshold"] = transformedConfidenceThreshold
	}

	transformedContextFilterSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["context_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContextFilterSettings); val.IsValid() && !isEmptyValue(val) {
		transformed["contextFilterSettings"] = transformedContextFilterSettings
	}

	transformedKnowledgeBaseQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(original["knowledge_base_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKnowledgeBaseQuerySource); val.IsValid() && !isEmptyValue(val) {
		transformed["knowledgeBaseQuerySource"] = transformedKnowledgeBaseQuerySource
	}

	transformedDocumentQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(original["document_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocumentQuerySource); val.IsValid() && !isEmptyValue(val) {
		transformed["documentQuerySource"] = transformedDocumentQuerySource
	}

	transformedDialogflowQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflow_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDialogflowQuerySource); val.IsValid() && !isEmptyValue(val) {
		transformed["dialogflowQuerySource"] = transformedDialogflowQuerySource
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDropHandoffMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(original["drop_handoff_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropHandoffMessages); val.IsValid() && !isEmptyValue(val) {
		transformed["dropHandoffMessages"] = transformedDropHandoffMessages
	}

	transformedDropVirtualAgentMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(original["drop_virtual_agent_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropVirtualAgentMessages); val.IsValid() && !isEmptyValue(val) {
		transformed["dropVirtualAgentMessages"] = transformedDropVirtualAgentMessages
	}

	transformedDropIvrMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(original["drop_ivr_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropIvrMessages); val.IsValid() && !isEmptyValue(val) {
		transformed["dropIvrMessages"] = transformedDropIvrMessages
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKnowledgeBases, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(original["knowledge_bases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKnowledgeBases); val.IsValid() && !isEmptyValue(val) {
		transformed["knowledgeBases"] = transformedKnowledgeBases
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDocuments, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(original["documents"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocuments); val.IsValid() && !isEmptyValue(val) {
		transformed["documents"] = transformedDocuments
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !isEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !isEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRecentSentencesCount, err := expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recent_sentences_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecentSentencesCount); val.IsValid() && !isEmptyValue(val) {
		transformed["recentSentencesCount"] = transformedRecentSentencesCount
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigHumanAgentSuggestionConfigGroupSuggestionResponses(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureConfigs, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(original["feature_configs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureConfigs); val.IsValid() && !isEmptyValue(val) {
		transformed["featureConfigs"] = transformedFeatureConfigs
	}

	transformedGroupSuggestionResponses, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(original["group_suggestion_responses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGroupSuggestionResponses); val.IsValid() && !isEmptyValue(val) {
		transformed["groupSuggestionResponses"] = transformedGroupSuggestionResponses
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigs(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedSuggestionFeature, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(original["suggestion_feature"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionFeature); val.IsValid() && !isEmptyValue(val) {
			transformed["suggestionFeature"] = transformedSuggestionFeature
		}

		transformedEnableEventBasedSuggestion, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(original["enable_event_based_suggestion"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEnableEventBasedSuggestion); val.IsValid() && !isEmptyValue(val) {
			transformed["enableEventBasedSuggestion"] = transformedEnableEventBasedSuggestion
		}

		transformedSuggestionTriggerSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(original["suggestion_trigger_settings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSuggestionTriggerSettings); val.IsValid() && !isEmptyValue(val) {
			transformed["suggestionTriggerSettings"] = transformedSuggestionTriggerSettings
		}

		transformedQueryConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(original["query_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryConfig); val.IsValid() && !isEmptyValue(val) {
			transformed["queryConfig"] = transformedQueryConfig
		}

		transformedConversationModelConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(original["conversation_model_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationModelConfig); val.IsValid() && !isEmptyValue(val) {
			transformed["conversationModelConfig"] = transformedConversationModelConfig
		}

		transformedConversationProcessConfig, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(original["conversation_process_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConversationProcessConfig); val.IsValid() && !isEmptyValue(val) {
			transformed["conversationProcessConfig"] = transformedConversationProcessConfig
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeature(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedType, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(original["type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedType); val.IsValid() && !isEmptyValue(val) {
		transformed["type"] = transformedType
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionFeatureType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsEnableEventBasedSuggestion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNoSmalltalk, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmalltalk(original["no_smalltalk"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNoSmalltalk); val.IsValid() && !isEmptyValue(val) {
		transformed["noSmalltalk"] = transformedNoSmalltalk
	}

	transformedOnlyEndUser, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(original["only_end_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOnlyEndUser); val.IsValid() && !isEmptyValue(val) {
		transformed["onlyEndUser"] = transformedOnlyEndUser
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsNoSmalltalk(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsSuggestionTriggerSettingsOnlyEndUser(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaxResults, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(original["max_results"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxResults); val.IsValid() && !isEmptyValue(val) {
		transformed["maxResults"] = transformedMaxResults
	}

	transformedConfidenceThreshold, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(original["confidence_threshold"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidenceThreshold); val.IsValid() && !isEmptyValue(val) {
		transformed["confidenceThreshold"] = transformedConfidenceThreshold
	}

	transformedContextFilterSettings, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(original["context_filter_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedContextFilterSettings); val.IsValid() && !isEmptyValue(val) {
		transformed["contextFilterSettings"] = transformedContextFilterSettings
	}

	transformedKnowledgeBaseQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(original["knowledge_base_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKnowledgeBaseQuerySource); val.IsValid() && !isEmptyValue(val) {
		transformed["knowledgeBaseQuerySource"] = transformedKnowledgeBaseQuerySource
	}

	transformedDocumentQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(original["document_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocumentQuerySource); val.IsValid() && !isEmptyValue(val) {
		transformed["documentQuerySource"] = transformedDocumentQuerySource
	}

	transformedDialogflowQuerySource, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(original["dialogflow_query_source"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDialogflowQuerySource); val.IsValid() && !isEmptyValue(val) {
		transformed["dialogflowQuerySource"] = transformedDialogflowQuerySource
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigMaxResults(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigConfidenceThreshold(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDropHandoffMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(original["drop_handoff_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropHandoffMessages); val.IsValid() && !isEmptyValue(val) {
		transformed["dropHandoffMessages"] = transformedDropHandoffMessages
	}

	transformedDropVirtualAgentMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(original["drop_virtual_agent_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropVirtualAgentMessages); val.IsValid() && !isEmptyValue(val) {
		transformed["dropVirtualAgentMessages"] = transformedDropVirtualAgentMessages
	}

	transformedDropIvrMessages, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(original["drop_ivr_messages"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDropIvrMessages); val.IsValid() && !isEmptyValue(val) {
		transformed["dropIvrMessages"] = transformedDropIvrMessages
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropHandoffMessages(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropVirtualAgentMessages(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigContextFilterSettingsDropIvrMessages(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySource(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKnowledgeBases, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(original["knowledge_bases"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKnowledgeBases); val.IsValid() && !isEmptyValue(val) {
		transformed["knowledgeBases"] = transformedKnowledgeBases
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigKnowledgeBaseQuerySourceKnowledgeBases(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySource(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDocuments, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(original["documents"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDocuments); val.IsValid() && !isEmptyValue(val) {
		transformed["documents"] = transformedDocuments
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDocumentQuerySourceDocuments(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySource(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAgent, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(original["agent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAgent); val.IsValid() && !isEmptyValue(val) {
		transformed["agent"] = transformedAgent
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsQueryConfigDialogflowQuerySourceAgent(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedModel, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !isEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationModelConfigModel(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRecentSentencesCount, err := expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(original["recent_sentences_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRecentSentencesCount); val.IsValid() && !isEmptyValue(val) {
		transformed["recentSentencesCount"] = transformedRecentSentencesCount
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigFeatureConfigsConversationProcessConfigRecentSentencesCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigEndUserSuggestionConfigGroupSuggestionResponses(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableEntityExtraction, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(original["enable_entity_extraction"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableEntityExtraction); val.IsValid() && !isEmptyValue(val) {
		transformed["enableEntityExtraction"] = transformedEnableEntityExtraction
	}

	transformedEnableSentimentAnalysis, err := expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(original["enable_sentiment_analysis"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableSentimentAnalysis); val.IsValid() && !isEmptyValue(val) {
		transformed["enableSentimentAnalysis"] = transformedEnableSentimentAnalysis
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableEntityExtraction(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentAssistantConfigMessageAnalysisConfigEnableSentimentAnalysis(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLivePersonConfig, err := expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(original["live_person_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLivePersonConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["livePersonConfig"] = transformedLivePersonConfig
	}

	transformedSalesforceLiveAgentConfig, err := expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfig(original["salesforce_live_agent_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSalesforceLiveAgentConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["salesforceLiveAgentConfig"] = transformedSalesforceLiveAgentConfig
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAccountNumber, err := expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(original["account_number"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccountNumber); val.IsValid() && !isEmptyValue(val) {
		transformed["accountNumber"] = transformedAccountNumber
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigLivePersonConfigAccountNumber(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOrganizationId, err := expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigOrganizationId(original["organization_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrganizationId); val.IsValid() && !isEmptyValue(val) {
		transformed["organizationId"] = transformedOrganizationId
	}

	transformedDeploymentId, err := expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigDeploymentId(original["deployment_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeploymentId); val.IsValid() && !isEmptyValue(val) {
		transformed["deploymentId"] = transformedDeploymentId
	}

	transformedButtonId, err := expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigButtonId(original["button_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedButtonId); val.IsValid() && !isEmptyValue(val) {
		transformed["buttonId"] = transformedButtonId
	}

	transformedEndpointDomain, err := expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigEndpointDomain(original["endpoint_domain"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndpointDomain); val.IsValid() && !isEmptyValue(val) {
		transformed["endpointDomain"] = transformedEndpointDomain
	}

	return transformed, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigOrganizationId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigDeploymentId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigButtonId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileHumanAgentHandoffConfigSalesforceLiveAgentConfigEndpointDomain(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNotificationConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !isEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !isEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileNotificationConfigTopic(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNotificationConfigMessageFormat(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileLoggingConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableStackdriverLogging, err := expandDialogflowConversationProfileLoggingConfigEnableStackdriverLogging(original["enable_stackdriver_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableStackdriverLogging); val.IsValid() && !isEmptyValue(val) {
		transformed["enableStackdriverLogging"] = transformedEnableStackdriverLogging
	}

	return transformed, nil
}

func expandDialogflowConversationProfileLoggingConfigEnableStackdriverLogging(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDialogflowConversationProfileNewMessageEventNotificationConfigTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !isEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	transformedMessageFormat, err := expandDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(original["message_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessageFormat); val.IsValid() && !isEmptyValue(val) {
		transformed["messageFormat"] = transformedMessageFormat
	}

	return transformed, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfigTopic(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileNewMessageEventNotificationConfigMessageFormat(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSttConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSpeechModelVariant, err := expandDialogflowConversationProfileSttConfigSpeechModelVariant(original["speech_model_variant"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSpeechModelVariant); val.IsValid() && !isEmptyValue(val) {
		transformed["speechModelVariant"] = transformedSpeechModelVariant
	}

	return transformed, nil
}

func expandDialogflowConversationProfileSttConfigSpeechModelVariant(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileLanguageCode(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileTimeZone(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandDialogflowConversationProfileSecuritySettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
