// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccVertexAIMetadataSchema_vertexAiMetadataSchemaExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProvidersOiCS,
		CheckDestroy: testAccCheckVertexAIMetadataSchemaDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIMetadataSchema_vertexAiMetadataSchemaExample(context),
			},
			{
				ResourceName:            "google_vertex_ai_metadata_schema.schema",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"metadatastore"},
			},
		},
	})
}

func testAccVertexAIMetadataSchema_vertexAiMetadataSchemaExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_vertex_ai_metadata_store" "store" {
  provider      = google-beta
  name          = "tf-test-test-schema%{random_suffix}"
  description   = "Store to test the terraform module"
  region        = "us-central1"
}

resource "google_vertex_ai_metadata_schema" "schema" {
  provider = google-beta
  description = "Schema to test the terraform module"
  metadatastore = google_vertex_ai_metadata_store.store.id
  schema = <<-EOT
    title: custom.Dataset
    version: 0.0.1
    type: object
    additionalProperties: false
    properties:
      container_format:
        type: string
      payload_format:
        type: string
  EOT
  schema_version = "0.0.1"
  schema_type = "ARTIFACT_TYPE"
}
`, context)
}

func testAccCheckVertexAIMetadataSchemaDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_vertex_ai_metadata_schema" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := googleProviderConfig(t)

			url, err := replaceVarsForTest(config, rs, "{{VertexAIBasePath}}{{metadatastore}}/metadataSchemas/{{metadata_schema_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = sendRequest(config, "GET", billingProject, url, config.userAgent, nil)
			if err == nil {
				return fmt.Errorf("VertexAIMetadataSchema still exists at %s", url)
			}
		}

		return nil
	}
}
