// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccFirestoreDatabase_firestoreDatabaseDefaultExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        getTestOrgFromEnv(t),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreDatabase_firestoreDatabaseDefaultExample(context),
			},
			{
				ResourceName:            "google_firestore_database.default_database",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"delete_protection_state", "project"},
			},
		},
	})
}

func testAccFirestoreDatabase_firestoreDatabaseDefaultExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_project" "default" {
	provider = google-beta

	project_id = "tf-test%{random_suffix}"
	name       = "tf-test%{random_suffix}"
	org_id     = "%{org_id}"
}

resource "google_firestore_database" "default_database" {
    provider = "google-beta"

    project     = google_project.default.project_id
    name        = "(default)"
    location_id = "nam5"
    type        = "FIRESTORE_NATIVE"
}
`, context)
}

func TestAccFirestoreDatabase_firestoreDatabaseFullNondefaultExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        getTestOrgFromEnv(t),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreDatabase_firestoreDatabaseFullNondefaultExample(context),
			},
			{
				ResourceName:            "google_firestore_database.database",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"delete_protection_state", "project"},
			},
		},
	})
}

func testAccFirestoreDatabase_firestoreDatabaseFullNondefaultExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_project" "default" {
	provider = google-beta

	project_id = "tf-test%{random_suffix}"
	name       = "tf-test%{random_suffix}"
	org_id     = "%{org_id}"
}

resource "google_firestore_database" "database" {
    provider = "google-beta"

    project                     = google_project.default.project_id
    name                        = "firestore-native-database"
    location_id                 = "nam5"
    type                        = "FIRESTORE_NATIVE"
    concurrency_mode            = "OPTIMISTIC"
    app_engine_integration_mode = "DISABLED"
    delete_protection_state     = "DELETE_PROTECTION_ENABLED"
}
`, context)
}

func TestAccFirestoreDatabase_firestoreDatabaseDatastoreModeDefaultExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        getTestOrgFromEnv(t),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreDatabase_firestoreDatabaseDatastoreModeDefaultExample(context),
			},
			{
				ResourceName:            "google_firestore_database.datastore_mode_default_database",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"delete_protection_state", "project"},
			},
		},
	})
}

func testAccFirestoreDatabase_firestoreDatabaseDatastoreModeDefaultExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_project" "default" {
	provider = google-beta

	project_id = "tf-test%{random_suffix}"
	name       = "tf-test%{random_suffix}"
	org_id     = "%{org_id}"
}

resource "google_firestore_database" "datastore_mode_default_database" {
    provider = "google-beta"

    project = google_project.default.project_id

    # For Datastore Mode databases, use the empty string rather than "default" for the default database
    name = ""

    location_id = "nam5"
    type        = "DATASTORE_MODE"
}
`, context)
}

func TestAccFirestoreDatabase_firestoreDatabaseDatastoreModeExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        getTestOrgFromEnv(t),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreDatabase_firestoreDatabaseDatastoreModeExample(context),
			},
			{
				ResourceName:            "google_firestore_database.datastore_mode_database",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"delete_protection_state", "project"},
			},
		},
	})
}

func testAccFirestoreDatabase_firestoreDatabaseDatastoreModeExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_project" "default" {
	provider = google-beta

	project_id = "tf-test%{random_suffix}"
	name       = "tf-test%{random_suffix}"
	org_id     = "%{org_id}"
}

resource "google_firestore_database" "datastore_mode_database" {
    provider = "google-beta"

    project                     = google_project.default.project_id
    name                        = "datastore-mode-database"
    location_id                 = "nam5"
    type                        = "DATASTORE_MODE"
}
`, context)
}
