// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceGKEHubFeature() *schema.Resource {
	return &schema.Resource{
		Create: resourceGKEHubFeatureCreate,
		Read:   resourceGKEHubFeatureRead,
		Update: resourceGKEHubFeatureUpdate,
		Delete: resourceGKEHubFeatureDelete,

		Importer: &schema.ResourceImporter{
			State: resourceGKEHubFeatureImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(4 * time.Minute),
			Update: schema.DefaultTimeout(4 * time.Minute),
			Delete: schema.DefaultTimeout(4 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"feature_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of the feature to enable.`,
			},
			"labels": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: `Labels to apply to this feature.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"membership_specs": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: `The specification for Anthos Config Management.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"membership_id": {
							Type:     schema.TypeString,
							Required: true,
						},
						"configmanagement": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `Membership configs`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"version": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `/ Version of ACM installed.`,
									},
									"config_sync": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `/ Config Sync configuration for the cluster.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"git": {
													Type:        schema.TypeList,
													Optional:    true,
													Description: `/ Git repo configuration for a single cluster.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"https_proxy": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `/ URL for the HTTPS proxy to be used when communicating with the Git repo.`,
															},
															"policy_dir": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `/ The path within the Git repository that represents the top level of the repo to sync.`,
															},
															"secret_type": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `/ Type of secret configured for access to the Git repo.`,
															},
															"sync_branch": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `/ The branch of the repository to sync from.`,
															},
															"sync_repo": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `/ Config Sync configuration for the cluster.`,
															},
															"sync_rev": {
																Type:        schema.TypeString,
																Optional:    true,
																Description: `/ Git revision (tag or hash) to check out.`,
															},
															"sync_wait_secs": {
																Type:        schema.TypeInt,
																Optional:    true,
																Description: `/ Period in seconds between consecutive syncs.`,
															},
														},
													},
												},
												"source_format": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: `/ Specifies whether the Config Sync Repo is in “hierarchical” or “unstructured” mode.`,
												},
											},
										},
									},
									"hierarchy_controller": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `/ Hierarchy Controller configuration for the cluster.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"enable_hierarchical_resource_quota": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `/ Whether hierarchical resource quota is enabled in this cluster.`,
												},
												"enable_pod_tree_labels": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `/ Whether pod tree labels are enabled in this cluster.`,
												},
											},
										},
									},
									"policy_controller": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `/ Configuration for a single cluster. Intended to parallel the ConfigManagement CR.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"audit_interval_seconds": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: `/ Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.`,
												},
												"exemptable_namespaces": {
													Type:     schema.TypeList,
													Optional: true,
													Description: `The set of namespaces that are excluded from Policy Controller checks.
Namespaces do not need to currently exist on the cluster.`,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"log_denies_enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `/ Logs all denies and dry run failures.`,
												},
												"referential_rules_enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `/ Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated`,
												},
												"template_library_installed": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: `/ Installs the default template library along with Policy Controller.`,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"spec": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `Hub-wide configuration information`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"multiclusteringress": {
							Type:     schema.TypeList,
							Optional: true,
							ForceNew: true,
							Description: `Fully-qualified member name which hosts the MultiClusterIngress CRD.
Example member name: 'projects/foo-proj/locations/global/memberships/bar'`,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"config_membership": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: `If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.`,
									},
								},
							},
						},
					},
				},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The unique identifier of the feature.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceGKEHubFeatureCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	labelsProp, err := expandGKEHubFeatureLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	specProp, err := expandGKEHubFeatureSpec(d.Get("spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("spec"); !isEmptyValue(reflect.ValueOf(specProp)) && (ok || !reflect.DeepEqual(v, specProp)) {
		obj["spec"] = specProp
	}
	membershipSpecsProp, err := expandGKEHubFeatureMembershipSpecs(d.Get("membership_specs"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("membership_specs"); !isEmptyValue(reflect.ValueOf(membershipSpecsProp)) && (ok || !reflect.DeepEqual(v, membershipSpecsProp)) {
		obj["membershipSpecs"] = membershipSpecsProp
	}

	url, err := replaceVars(d, config, "{{GKEHubBasePath}}v1beta/projects/{{project}}/locations/global/features?featureId={{feature_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Feature: %#v", obj)
	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Feature: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating Feature: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = gKEHubOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating Feature", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create Feature: %s", err)
	}

	if err := d.Set("name", flattenGKEHubFeatureName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = replaceVars(d, config, "projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Feature %q: %#v", d.Id(), res)

	return resourceGKEHubFeatureRead(d, meta)
}

func resourceGKEHubFeatureRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{GKEHubBasePath}}v1beta/projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Feature: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("GKEHubFeature %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}

	if err := d.Set("name", flattenGKEHubFeatureName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}
	if err := d.Set("labels", flattenGKEHubFeatureLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}
	if err := d.Set("spec", flattenGKEHubFeatureSpec(res["spec"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}
	if err := d.Set("membership_specs", flattenGKEHubFeatureMembershipSpecs(res["membershipSpecs"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}

	return nil
}

func resourceGKEHubFeatureUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Feature: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	labelsProp, err := expandGKEHubFeatureLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	membershipSpecsProp, err := expandGKEHubFeatureMembershipSpecs(d.Get("membership_specs"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("membership_specs"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, membershipSpecsProp)) {
		obj["membershipSpecs"] = membershipSpecsProp
	}

	url, err := replaceVars(d, config, "{{GKEHubBasePath}}v1beta/projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Feature %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("labels") {
		updateMask = append(updateMask, "labels")
	}

	if d.HasChange("membership_specs") {
		updateMask = append(updateMask, "membershipSpecs")
	}
	// updateMask is a URL parameter but not present in the schema, so replaceVars
	// won't set it
	url, err = addQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return fmt.Errorf("Error updating Feature %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating Feature %q: %#v", d.Id(), res)
	}

	err = gKEHubOperationWaitTime(
		config, res, project, "Updating Feature", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceGKEHubFeatureRead(d, meta)
}

func resourceGKEHubFeatureDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Feature: %s", err)
	}
	billingProject = project

	url, err := replaceVars(d, config, "{{GKEHubBasePath}}v1beta/projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting Feature %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return handleNotFoundError(err, d, "Feature")
	}

	err = gKEHubOperationWaitTime(
		config, res, project, "Deleting Feature", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting Feature %q: %#v", d.Id(), res)
	return nil
}

func resourceGKEHubFeatureImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*Config)
	if err := parseImportId([]string{
		"projects/(?P<project>[^/]+)/locations/global/features/(?P<feature_id>[^/]+)",
		"(?P<project>[^/]+)/(?P<feature_id>[^/]+)",
		"(?P<feature_id>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenGKEHubFeatureName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureLabels(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureSpec(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["multiclusteringress"] =
		flattenGKEHubFeatureSpecMulticlusteringress(original["multiclusteringress"], d, config)
	return []interface{}{transformed}
}
func flattenGKEHubFeatureSpecMulticlusteringress(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["config_membership"] =
		flattenGKEHubFeatureSpecMulticlusteringressConfigMembership(original["configMembership"], d, config)
	return []interface{}{transformed}
}
func flattenGKEHubFeatureSpecMulticlusteringressConfigMembership(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecs(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"membership_id":    k,
			"configmanagement": flattenGKEHubFeatureMembershipSpecsConfigmanagement(original["configmanagement"], d, config),
		})
	}
	return transformed
}
func flattenGKEHubFeatureMembershipSpecsConfigmanagement(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["version"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementVersion(original["version"], d, config)
	transformed["config_sync"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSync(original["configSync"], d, config)
	transformed["policy_controller"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyController(original["policyController"], d, config)
	transformed["hierarchy_controller"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementHierarchyController(original["hierarchyController"], d, config)
	return []interface{}{transformed}
}
func flattenGKEHubFeatureMembershipSpecsConfigmanagementVersion(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSync(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["source_format"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncSourceFormat(original["sourceFormat"], d, config)
	transformed["git"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGit(original["git"], d, config)
	return []interface{}{transformed}
}
func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncSourceFormat(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGit(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["sync_repo"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncRepo(original["syncRepo"], d, config)
	transformed["sync_branch"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncBranch(original["syncBranch"], d, config)
	transformed["policy_dir"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitPolicyDir(original["policyDir"], d, config)
	transformed["sync_wait_secs"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncWaitSecs(original["syncWaitSecs"], d, config)
	transformed["sync_rev"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncRev(original["syncRev"], d, config)
	transformed["secret_type"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSecretType(original["secretType"], d, config)
	transformed["https_proxy"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitHttpsProxy(original["httpsProxy"], d, config)
	return []interface{}{transformed}
}
func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncRepo(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncBranch(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitPolicyDir(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncWaitSecs(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := strconv.ParseInt(strVal, 10, 64); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncRev(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSecretType(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitHttpsProxy(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyController(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audit_interval_seconds"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerAuditIntervalSeconds(original["auditIntervalSeconds"], d, config)
	transformed["log_denies_enabled"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerLogDeniesEnabled(original["logDeniesEnabled"], d, config)
	transformed["template_library_installed"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerTemplateLibraryInstalled(original["templateLibraryInstalled"], d, config)
	transformed["referential_rules_enabled"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerReferentialRulesEnabled(original["referentialRulesEnabled"], d, config)
	transformed["exemptable_namespaces"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerExemptableNamespaces(original["exemptableNamespaces"], d, config)
	return []interface{}{transformed}
}
func flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerAuditIntervalSeconds(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := strconv.ParseInt(strVal, 10, 64); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerLogDeniesEnabled(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerTemplateLibraryInstalled(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerReferentialRulesEnabled(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerExemptableNamespaces(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementHierarchyController(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_pod_tree_labels"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementHierarchyControllerEnablePodTreeLabels(original["enablePodTreeLabels"], d, config)
	transformed["enable_hierarchical_resource_quota"] =
		flattenGKEHubFeatureMembershipSpecsConfigmanagementHierarchyControllerEnableHierarchicalResourceQuota(original["enableHierarchicalResourceQuota"], d, config)
	return []interface{}{transformed}
}
func flattenGKEHubFeatureMembershipSpecsConfigmanagementHierarchyControllerEnablePodTreeLabels(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureMembershipSpecsConfigmanagementHierarchyControllerEnableHierarchicalResourceQuota(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandGKEHubFeatureLabels(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandGKEHubFeatureSpec(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMulticlusteringress, err := expandGKEHubFeatureSpecMulticlusteringress(original["multiclusteringress"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMulticlusteringress); val.IsValid() && !isEmptyValue(val) {
		transformed["multiclusteringress"] = transformedMulticlusteringress
	}

	return transformed, nil
}

func expandGKEHubFeatureSpecMulticlusteringress(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedConfigMembership, err := expandGKEHubFeatureSpecMulticlusteringressConfigMembership(original["config_membership"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfigMembership); val.IsValid() && !isEmptyValue(val) {
		transformed["configMembership"] = transformedConfigMembership
	}

	return transformed, nil
}

func expandGKEHubFeatureSpecMulticlusteringressConfigMembership(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecs(v interface{}, d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedConfigmanagement, err := expandGKEHubFeatureMembershipSpecsConfigmanagement(original["configmanagement"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedConfigmanagement); val.IsValid() && !isEmptyValue(val) {
			transformed["configmanagement"] = transformedConfigmanagement
		}

		transformedMembershipId, err := expandString(original["membership_id"], d, config)
		if err != nil {
			return nil, err
		}
		m[transformedMembershipId] = transformed
	}
	return m, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagement(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedVersion, err := expandGKEHubFeatureMembershipSpecsConfigmanagementVersion(original["version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["version"] = transformedVersion
	}

	transformedConfigSync, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSync(original["config_sync"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfigSync); val.IsValid() && !isEmptyValue(val) {
		transformed["configSync"] = transformedConfigSync
	}

	transformedPolicyController, err := expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyController(original["policy_controller"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPolicyController); val.IsValid() && !isEmptyValue(val) {
		transformed["policyController"] = transformedPolicyController
	}

	transformedHierarchyController, err := expandGKEHubFeatureMembershipSpecsConfigmanagementHierarchyController(original["hierarchy_controller"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHierarchyController); val.IsValid() && !isEmptyValue(val) {
		transformed["hierarchyController"] = transformedHierarchyController
	}

	return transformed, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSync(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSourceFormat, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncSourceFormat(original["source_format"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSourceFormat); val.IsValid() && !isEmptyValue(val) {
		transformed["sourceFormat"] = transformedSourceFormat
	}

	transformedGit, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGit(original["git"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGit); val.IsValid() && !isEmptyValue(val) {
		transformed["git"] = transformedGit
	}

	return transformed, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncSourceFormat(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGit(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSyncRepo, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncRepo(original["sync_repo"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSyncRepo); val.IsValid() && !isEmptyValue(val) {
		transformed["syncRepo"] = transformedSyncRepo
	}

	transformedSyncBranch, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncBranch(original["sync_branch"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSyncBranch); val.IsValid() && !isEmptyValue(val) {
		transformed["syncBranch"] = transformedSyncBranch
	}

	transformedPolicyDir, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitPolicyDir(original["policy_dir"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPolicyDir); val.IsValid() && !isEmptyValue(val) {
		transformed["policyDir"] = transformedPolicyDir
	}

	transformedSyncWaitSecs, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncWaitSecs(original["sync_wait_secs"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSyncWaitSecs); val.IsValid() && !isEmptyValue(val) {
		transformed["syncWaitSecs"] = transformedSyncWaitSecs
	}

	transformedSyncRev, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncRev(original["sync_rev"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSyncRev); val.IsValid() && !isEmptyValue(val) {
		transformed["syncRev"] = transformedSyncRev
	}

	transformedSecretType, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSecretType(original["secret_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretType); val.IsValid() && !isEmptyValue(val) {
		transformed["secretType"] = transformedSecretType
	}

	transformedHttpsProxy, err := expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitHttpsProxy(original["https_proxy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHttpsProxy); val.IsValid() && !isEmptyValue(val) {
		transformed["httpsProxy"] = transformedHttpsProxy
	}

	return transformed, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncRepo(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncBranch(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitPolicyDir(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncWaitSecs(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSyncRev(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitSecretType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementConfigSyncGitHttpsProxy(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyController(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAuditIntervalSeconds, err := expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerAuditIntervalSeconds(original["audit_interval_seconds"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuditIntervalSeconds); val.IsValid() && !isEmptyValue(val) {
		transformed["auditIntervalSeconds"] = transformedAuditIntervalSeconds
	}

	transformedLogDeniesEnabled, err := expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerLogDeniesEnabled(original["log_denies_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLogDeniesEnabled); val.IsValid() && !isEmptyValue(val) {
		transformed["logDeniesEnabled"] = transformedLogDeniesEnabled
	}

	transformedTemplateLibraryInstalled, err := expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerTemplateLibraryInstalled(original["template_library_installed"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTemplateLibraryInstalled); val.IsValid() && !isEmptyValue(val) {
		transformed["templateLibraryInstalled"] = transformedTemplateLibraryInstalled
	}

	transformedReferentialRulesEnabled, err := expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerReferentialRulesEnabled(original["referential_rules_enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReferentialRulesEnabled); val.IsValid() && !isEmptyValue(val) {
		transformed["referentialRulesEnabled"] = transformedReferentialRulesEnabled
	}

	transformedExemptableNamespaces, err := expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerExemptableNamespaces(original["exemptable_namespaces"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExemptableNamespaces); val.IsValid() && !isEmptyValue(val) {
		transformed["exemptableNamespaces"] = transformedExemptableNamespaces
	}

	return transformed, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerAuditIntervalSeconds(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerLogDeniesEnabled(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerTemplateLibraryInstalled(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerReferentialRulesEnabled(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementPolicyControllerExemptableNamespaces(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementHierarchyController(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnablePodTreeLabels, err := expandGKEHubFeatureMembershipSpecsConfigmanagementHierarchyControllerEnablePodTreeLabels(original["enable_pod_tree_labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnablePodTreeLabels); val.IsValid() && !isEmptyValue(val) {
		transformed["enablePodTreeLabels"] = transformedEnablePodTreeLabels
	}

	transformedEnableHierarchicalResourceQuota, err := expandGKEHubFeatureMembershipSpecsConfigmanagementHierarchyControllerEnableHierarchicalResourceQuota(original["enable_hierarchical_resource_quota"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableHierarchicalResourceQuota); val.IsValid() && !isEmptyValue(val) {
		transformed["enableHierarchicalResourceQuota"] = transformedEnableHierarchicalResourceQuota
	}

	return transformed, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementHierarchyControllerEnablePodTreeLabels(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureMembershipSpecsConfigmanagementHierarchyControllerEnableHierarchicalResourceQuota(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
