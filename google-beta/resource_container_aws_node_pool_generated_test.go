// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccContainerAwsNodePool_containerAwsNodePoolBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"service_account": envvar.GetTestServiceAccountFromEnv(t),
		"aws_acct_id":     "111111111111",
		"aws_db_key":      "00000000-0000-0000-0000-17aad2f0f61f",
		"aws_region":      "us-west-2",
		"aws_subnet":      "subnet-0b3f63cb91b247628",
		"aws_vpc":         "vpc-0b3f63cb91b247628",
		"byo_prefix":      "mmv1",
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckContainerAwsNodePoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccContainerAwsNodePool_containerAwsNodePoolBasicExample(context),
			},
			{
				ResourceName:            "google_container_aws_node_pool.primary",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "cluster"},
			},
		},
	})
}

func testAccContainerAwsNodePool_containerAwsNodePoolBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

data "google_container_aws_versions" "versions" {
  project = data.google_project.project.project_id
  location = "us-west1"
}

resource "google_container_aws_cluster" "primary" {
  location = "us-west1"
  name     = "basic%{random_suffix}-cp"
  description = "A sample aws cluster"
  project     = data.google_project.project.project_id

  authorization {
    admin_users {
      username = "%{service_account}"
    }
  }

  aws_region = "%{aws_region}"

  control_plane {
    aws_services_authentication {
      role_arn          = "arn:aws:iam::%{aws_acct_id}:role/%{byo_prefix}-1p-dev-oneplatform"
    }

    config_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }

    database_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }

    iam_instance_profile = "%{byo_prefix}-1p-dev-controlplane"
    subnet_ids           = ["%{aws_subnet}"]
    version              = data.google_container_aws_versions.versions.valid_versions[0]

    tags = {
      owner = "%{service_account}"
    }
  }

  fleet {
    project = "projects/${data.google_project.project.number}"
  }

  networking {
    pod_address_cidr_blocks     = ["10.2.0.0/16"]
    service_address_cidr_blocks = ["10.1.0.0/16"]
    vpc_id                      = "%{aws_vpc}"
  }
}

resource "google_container_aws_node_pool" "primary" {
  location = "us-west1"
  name     = "basic%{random_suffix}-np"
  project  = data.google_project.project.project_id
  cluster  = google_container_aws_cluster.primary.name
  version  = data.google_container_aws_versions.versions.valid_versions[0]

  autoscaling {
    min_node_count = 1
    max_node_count = 5
  }

  subnet_id = "%{aws_subnet}"

  max_pods_constraint {
    max_pods_per_node = 110
  }

  config {
    iam_instance_profile = "%{byo_prefix}-1p-dev-nodepool"

    config_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }
  }
}
`, context)
}

func TestAccContainerAwsNodePool_containerAwsNodePoolFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"service_account": envvar.GetTestServiceAccountFromEnv(t),
		"aws_acct_id":     "111111111111",
		"aws_db_key":      "00000000-0000-0000-0000-17aad2f0f61f",
		"aws_region":      "us-west-2",
		"aws_sg":          "sg-0b3f63cb91b247628",
		"aws_subnet":      "subnet-0b3f63cb91b247628",
		"aws_vol_key":     "00000000-0000-0000-0000-17aad2f0f61f",
		"aws_vpc":         "vpc-0b3f63cb91b247628",
		"byo_prefix":      "mmv1",
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckContainerAwsNodePoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccContainerAwsNodePool_containerAwsNodePoolFullExample(context),
			},
			{
				ResourceName:            "google_container_aws_node_pool.primary",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "cluster"},
			},
		},
	})
}

func testAccContainerAwsNodePool_containerAwsNodePoolFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

data "google_container_aws_versions" "versions" {
  project = data.google_project.project.project_id
  location = "us-west1"
}

resource "google_container_aws_cluster" "primary" {
  location = "us-west1"
  name     = "full%{random_suffix}-cp"
  description = "A sample aws cluster"
  project     = data.google_project.project.project_id

  authorization {
    admin_users {
      username = "%{service_account}"
    }
  }

  aws_region = "%{aws_region}"

  control_plane {
    aws_services_authentication {
      role_arn          = "arn:aws:iam::%{aws_acct_id}:role/%{byo_prefix}-1p-dev-oneplatform"
    }

    config_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }

    database_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }

    iam_instance_profile = "%{byo_prefix}-1p-dev-controlplane"
    subnet_ids           = ["%{aws_subnet}"]
    version              = data.google_container_aws_versions.versions.valid_versions[0]
    security_group_ids   = ["%{aws_sg}"]

    ssh_config {
      ec2_key_pair = "%{byo_prefix}-1p-dev-ssh"
    }

    tags = {
      owner = "%{service_account}"
    }
  }

  fleet {
    project = "projects/${data.google_project.project.number}"
  }

  networking {
    pod_address_cidr_blocks     = ["10.2.0.0/16"]
    service_address_cidr_blocks = ["10.1.0.0/16"]
    vpc_id                      = "%{aws_vpc}"
  }
}

resource "google_container_aws_node_pool" "primary" {
  location = "us-west1"
  name     = "full%{random_suffix}-np"
  project  = data.google_project.project.project_id
  cluster  = google_container_aws_cluster.primary.name
  version  = data.google_container_aws_versions.versions.valid_versions[0]

  autoscaling {
    min_node_count = 1
    max_node_count = 5
  }

  subnet_id = "%{aws_subnet}"

  max_pods_constraint {
    max_pods_per_node = 110
  }

  config {
    instance_type        = "m5.large"
    iam_instance_profile = "%{byo_prefix}-1p-dev-nodepool"

    config_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }

    root_volume {
      size_gib    = 10
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_vol_key}"
      volume_type = "GP3"
      iops        = 3000
      throughput  = 500
    }

    taints {
      key    = "taint-key"
      value  = "taint-value"
      effect = "PREFER_NO_SCHEDULE"
    }

    labels = {
      label-one = "value-one"
    }

    tags = {
      tag-one = "value-one"
    }

    ssh_config {
      ec2_key_pair = "%{byo_prefix}-1p-dev-ssh"
    }

    proxy_config {
      secret_arn     = "arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF"
      secret_version = "12345678-ABCD-EFGH-IJKL-987654321098"
    }

    image_type = "ubuntu"

    autoscaling_metrics_collection {
      granularity = "1Minute"
      metrics     = ["GroupMinSize"]
    }

    security_group_ids = ["%{aws_sg}"]
  }

  annotations = {
    label-one = "value-one"
  }
}
`, context)
}

func TestAccContainerAwsNodePool_containerAwsNodePoolBetaExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"service_account": envvar.GetTestServiceAccountFromEnv(t),
		"aws_acct_id":     "111111111111",
		"aws_db_key":      "00000000-0000-0000-0000-17aad2f0f61f",
		"aws_region":      "us-west-2",
		"aws_sg":          "sg-0b3f63cb91b247628",
		"aws_subnet":      "subnet-0b3f63cb91b247628",
		"aws_vol_key":     "00000000-0000-0000-0000-17aad2f0f61f",
		"aws_vpc":         "vpc-0b3f63cb91b247628",
		"byo_prefix":      "mmv1",
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckContainerAwsNodePoolDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccContainerAwsNodePool_containerAwsNodePoolBetaExample(context),
			},
			{
				ResourceName:            "google_container_aws_node_pool.primary",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "cluster"},
			},
		},
	})
}

func testAccContainerAwsNodePool_containerAwsNodePoolBetaExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
  provider = google-beta
}

data "google_container_aws_versions" "versions" {
  provider = google-beta
  project = data.google_project.project.project_id
  location = "us-west1"
}

resource "google_container_aws_cluster" "primary" {
  provider = google-beta
  location = "us-west1"
  name     = "beta%{random_suffix}-cp"
  description = "A sample aws cluster"
  project     = data.google_project.project.project_id

  authorization {
    admin_users {
      username = "%{service_account}"
    }
  }

  aws_region = "%{aws_region}"

  control_plane {
    aws_services_authentication {
      role_arn          = "arn:aws:iam::%{aws_acct_id}:role/%{byo_prefix}-1p-dev-oneplatform"
    }

    config_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }

    database_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }

    iam_instance_profile = "%{byo_prefix}-1p-dev-controlplane"
    subnet_ids           = ["%{aws_subnet}"]
    version              = data.google_container_aws_versions.versions.valid_versions[0]

    tags = {
      owner = "%{service_account}"
    }
  }

  fleet {
    project = "projects/${data.google_project.project.number}"
  }

  networking {
    pod_address_cidr_blocks     = ["10.2.0.0/16"]
    service_address_cidr_blocks = ["10.1.0.0/16"]
    vpc_id                      = "%{aws_vpc}"
  }
}

resource "google_container_aws_node_pool" "primary" {
  provider = google-beta
  location = "us-west1"
  name     = "beta%{random_suffix}-np"
  project  = data.google_project.project.project_id
  cluster  = google_container_aws_cluster.primary.name
  version  = data.google_container_aws_versions.versions.valid_versions[0]

  autoscaling {
    min_node_count = 1
    max_node_count = 5
  }

  subnet_id = "%{aws_subnet}"

  max_pods_constraint {
    max_pods_per_node = 110
  }

  config {
    spot_config {
      instance_types = ["m5.large"]
    }

    iam_instance_profile = "%{byo_prefix}-1p-dev-nodepool"

    config_encryption {
      kms_key_arn = "arn:aws:kms:%{aws_region}:%{aws_acct_id}:key/%{aws_db_key}"
    }

    instance_placement {
      tenancy = "DEFAULT"
    }
  }

  management {
    auto_repair = true
  }
}
`, context)
}

func testAccCheckContainerAwsNodePoolDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_container_aws_node_pool" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ContainerAwsBasePath}}projects/{{project}}/locations/{{location}}/awsClusters/{{cluster}}/awsNodePools/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ContainerAwsNodePool still exists at %s", url)
			}
		}

		return nil
	}
}
