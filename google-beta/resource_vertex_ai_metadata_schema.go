// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceVertexAIMetadataSchema() *schema.Resource {
	return &schema.Resource{
		Create: resourceVertexAIMetadataSchemaCreate,
		Read:   resourceVertexAIMetadataSchemaRead,
		Delete: resourceVertexAIMetadataSchemaDelete,

		Importer: &schema.ResourceImporter{
			State: resourceVertexAIMetadataSchemaImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"metadatastore": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: compareSelfLinkOrResourceName,
				Description:      `The name of Metadata Store to use, in the format projects/{project}/locations/{location}/metadatastore/{metadatastore}.`,
			},
			"schema": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by title in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `Description of the Metadata Schema`,
			},
			"metadata_schema_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `The Metadata Schema Id.`,
			},
			"schema_type": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				ValidateFunc: validateEnum([]string{"METADATA_SCHEMA_TYPE_UNSPECIFIED", "ARTIFACT_TYPE", "EXECUTION_TYPE", "CONTEXT_TYPE", ""}),
				Description:  `The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema. Possible values: ["METADATA_SCHEMA_TYPE_UNSPECIFIED", "ARTIFACT_TYPE", "EXECUTION_TYPE", "CONTEXT_TYPE"]`,
			},
			"schema_version": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `The version of the MetadataSchema. The version's format must match the following regular expression: ^[0-9]+[.][0-9]+[.][0-9]+$, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The resource name of the MetadataSchema.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceVertexAIMetadataSchemaCreate(d *schema.ResourceData, meta interface{}) error {
	var project string
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	metadata_schema_idProp, err := expandVertexAIMetadataSchemaMetadataSchemaId(d.Get("metadata_schema_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("metadata_schema_id"); !isEmptyValue(reflect.ValueOf(metadata_schema_idProp)) && (ok || !reflect.DeepEqual(v, metadata_schema_idProp)) {
		obj["metadata_schema_id"] = metadata_schema_idProp
	}
	descriptionProp, err := expandVertexAIMetadataSchemaDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !isEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	schemaVersionProp, err := expandVertexAIMetadataSchemaSchemaVersion(d.Get("schema_version"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("schema_version"); !isEmptyValue(reflect.ValueOf(schemaVersionProp)) && (ok || !reflect.DeepEqual(v, schemaVersionProp)) {
		obj["schemaVersion"] = schemaVersionProp
	}
	schemaProp, err := expandVertexAIMetadataSchemaSchema(d.Get("schema"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("schema"); !isEmptyValue(reflect.ValueOf(schemaProp)) && (ok || !reflect.DeepEqual(v, schemaProp)) {
		obj["schema"] = schemaProp
	}
	schemaTypeProp, err := expandVertexAIMetadataSchemaSchemaType(d.Get("schema_type"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("schema_type"); !isEmptyValue(reflect.ValueOf(schemaTypeProp)) && (ok || !reflect.DeepEqual(v, schemaTypeProp)) {
		obj["schemaType"] = schemaTypeProp
	}

	obj, err = resourceVertexAIMetadataSchemaEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{VertexAIBasePath}}{{metadatastore}}/metadataSchemas?metadataSchemaId={{metadata_schema_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new MetadataSchema: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating MetadataSchema: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "{{metadatastore}}/metadataSchemas/{{metadata_schema_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = vertexAIOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating MetadataSchema", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create MetadataSchema: %s", err)
	}

	if err := d.Set("name", flattenVertexAIMetadataSchemaName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = replaceVars(d, config, "{{metadatastore}}/metadataSchemas/{{metadata_schema_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	if isEmptyValue(reflect.ValueOf(d.Get("metadata_schema_id"))) {
		// connection id is set by API when unset and required to GET the connection
		// it is set by reading the "name" field rather than a field in the response
		if err := d.Set("metadata_schema_id", flattenVertexAIMetadataSchemaMetadataSchemaId("", d, config)); err != nil {
			return fmt.Errorf("Error reading Connection: %s", err)
		}
	}

	// Reset id to make sure connection_id is not empty
	id2, err := replaceVars(d, config, "projects/{{project}}/locations/{{location}}/metadataStore/{{metadatastore}}/metadataSchema{{metadata_schema_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id2)

	log.Printf("[DEBUG] Finished creating MetadataSchema %q: %#v", d.Id(), res)

	return resourceVertexAIMetadataSchemaRead(d, meta)
}

func resourceVertexAIMetadataSchemaRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{VertexAIBasePath}}{{metadatastore}}/metadataSchemas/{{metadata_schema_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("VertexAIMetadataSchema %q", d.Id()))
	}

	if err := d.Set("name", flattenVertexAIMetadataSchemaName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading MetadataSchema: %s", err)
	}
	if err := d.Set("metadata_schema_id", flattenVertexAIMetadataSchemaMetadataSchemaId(res["metadata_schema_id"], d, config)); err != nil {
		return fmt.Errorf("Error reading MetadataSchema: %s", err)
	}
	if err := d.Set("description", flattenVertexAIMetadataSchemaDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading MetadataSchema: %s", err)
	}
	if err := d.Set("schema_version", flattenVertexAIMetadataSchemaSchemaVersion(res["schemaVersion"], d, config)); err != nil {
		return fmt.Errorf("Error reading MetadataSchema: %s", err)
	}
	if err := d.Set("schema", flattenVertexAIMetadataSchemaSchema(res["schema"], d, config)); err != nil {
		return fmt.Errorf("Error reading MetadataSchema: %s", err)
	}
	if err := d.Set("schema_type", flattenVertexAIMetadataSchemaSchemaType(res["schemaType"], d, config)); err != nil {
		return fmt.Errorf("Error reading MetadataSchema: %s", err)
	}

	return nil
}

func resourceVertexAIMetadataSchemaDelete(d *schema.ResourceData, meta interface{}) error {
	var project string
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := replaceVars(d, config, "{{VertexAIBasePath}}{{metadatastore}}/metadataSchemas/{{metadata_schema_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting MetadataSchema %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return handleNotFoundError(err, d, "MetadataSchema")
	}

	err = vertexAIOperationWaitTime(
		config, res, project, "Deleting MetadataSchema", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting MetadataSchema %q: %#v", d.Id(), res)
	return nil
}

func resourceVertexAIMetadataSchemaImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*Config)
	if err := parseImportId([]string{
		"(?P<metadatastore>[^/]+)/metadataSchemas/(?P<metadata_schema_id>[^/]+)",
		"(?P<metadatastore>[^/]+)/(?P<metadata_schema_id>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "{{metadatastore}}/metadataSchemas/{{metadata_schema_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenVertexAIMetadataSchemaName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	return NameFromSelfLinkStateFunc(v)
}

func flattenVertexAIMetadataSchemaMetadataSchemaId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	parts := strings.Split(d.Get("name").(string), "/")
	return parts[len(parts)-1]
}

func flattenVertexAIMetadataSchemaDescription(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenVertexAIMetadataSchemaSchemaVersion(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenVertexAIMetadataSchemaSchema(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenVertexAIMetadataSchemaSchemaType(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandVertexAIMetadataSchemaMetadataSchemaId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIMetadataSchemaDescription(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIMetadataSchemaSchemaVersion(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIMetadataSchemaSchema(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIMetadataSchemaSchemaType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func resourceVertexAIMetadataSchemaEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	// connection_id is needed to qualify the URL but cannot be sent in the body
	delete(obj, "metadata_schema_id")
	return obj, nil
}
