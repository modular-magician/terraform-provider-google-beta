// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccIapAppEngineService_iapAppEngineServiceExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":          getTestOrgFromEnv(t),
		"billing_account": getTestBillingAccountFromEnv(t),
		"random_suffix":   randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckIapAppEngineServiceDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccIapAppEngineService_iapAppEngineServiceExample(context),
			},
			{
				ResourceName:      "google_iap_app_engine_service.version",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccIapAppEngineService_iapAppEngineServiceExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_project" "my_project" {
  name            = "%{project_id}"
  project_id      = "%{project_id}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
}

resource "google_project_service" "project_service" {
  project = google_project.my_project.project_id
  service = "iap.googleapis.com"
}

resource "google_project_service" "cloudbuild_service" {
  project = google_project_service.project_service.project
  service = "cloudbuild.googleapis.com"
}

resource "google_app_engine_application" "app" {
  project     = google_project_service.cloudbuild_service.project
  location_id = "us-central"
}

resource "google_storage_bucket" "bucket" {
  project  = google_app_engine_application.app.project
  name     = "appengine-static-content-%{random_suffix}"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name   = "hello-world.zip"
  bucket = google_storage_bucket.bucket.name
  source = "./test-fixtures/appengine/hello-world.zip"
}

resource "google_app_engine_standard_app_version" "version" {
  project         = google_app_engine_application.app.project
  version_id      = "v2"
  service         = "default"
  runtime         = "nodejs10"
  noop_on_destroy = true
  entrypoint {
    shell = "node ./app.js"
  }
  deployment {
    zip {
      source_url = "https://storage.googleapis.com/${google_storage_bucket.bucket.name}/hello-world.zip"
    }
  }
  env_variables = {
    port = "8080"
  }
}
`, context)
}

func testAccCheckIapAppEngineServiceDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_iap_app_engine_service" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := googleProviderConfig(t)

			url, err := replaceVarsForTest(config, rs, "{{IapBasePath}}projects/{{project}}/iap_web/appengine-{{appId}}/services/{{service}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = sendRequest(config, "GET", billingProject, url, config.userAgent, nil)
			if err == nil {
				return fmt.Errorf("IapAppEngineService still exists at %s", url)
			}
		}

		return nil
	}
}
