// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccCloudRunJobIamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
		"project":       getTestProjectFromEnv(),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunJobIamBinding_basicGenerated(context),
			},
			{
				ResourceName:      "google_cloud_run_job_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/jobs/%s roles/viewer", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-test-cloudrun-job%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				// Test Iam Binding update
				Config: testAccCloudRunJobIamBinding_updateGenerated(context),
			},
			{
				ResourceName:      "google_cloud_run_job_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/jobs/%s roles/viewer", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-test-cloudrun-job%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccCloudRunJobIamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
		"project":       getTestProjectFromEnv(),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccCloudRunJobIamMember_basicGenerated(context),
			},
			{
				ResourceName:      "google_cloud_run_job_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/jobs/%s roles/viewer user:admin@hashicorptest.com", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-test-cloudrun-job%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccCloudRunJobIamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
		"project":       getTestProjectFromEnv(),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudRunJobIamPolicy_basicGenerated(context),
			},
			{
				ResourceName:      "google_cloud_run_job_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/jobs/%s", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-test-cloudrun-job%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccCloudRunJobIamPolicy_emptyBinding(context),
			},
			{
				ResourceName:      "google_cloud_run_job_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/jobs/%s", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-test-cloudrun-job%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCloudRunJobIamMember_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_job" "default" {
  name     = ""
  location = "us-central1"
  provider = google-beta

  metadata {
    annotations = {
      "run.googleapis.com/launch-stage" = "BETA"
      generated-by = "magic-modules"
    }
  }

  template {
    spec {
      template {
        spec {
          containers {
            image = "us-docker.pkg.dev/cloudrun/container/hello"
          }
        }
      }
    }
  }
}

resource "google_cloud_run_job_iam_member" "foo" {
  location = google_cloud_run_job.default.location
  project = google_cloud_run_job.default.project
  job = google_cloud_run_job.default.name
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccCloudRunJobIamPolicy_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_job" "default" {
  name     = ""
  location = "us-central1"
  provider = google-beta

  metadata {
    annotations = {
      "run.googleapis.com/launch-stage" = "BETA"
      generated-by = "magic-modules"
    }
  }

  template {
    spec {
      template {
        spec {
          containers {
            image = "us-docker.pkg.dev/cloudrun/container/hello"
          }
        }
      }
    }
  }
}

data "google_iam_policy" "foo" {
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
}

resource "google_cloud_run_job_iam_policy" "foo" {
  location = google_cloud_run_job.default.location
  project = google_cloud_run_job.default.project
  job = google_cloud_run_job.default.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccCloudRunJobIamPolicy_emptyBinding(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_job" "default" {
  name     = ""
  location = "us-central1"
  provider = google-beta

  metadata {
    annotations = {
      "run.googleapis.com/launch-stage" = "BETA"
      generated-by = "magic-modules"
    }
  }

  template {
    spec {
      template {
        spec {
          containers {
            image = "us-docker.pkg.dev/cloudrun/container/hello"
          }
        }
      }
    }
  }
}

data "google_iam_policy" "foo" {
}

resource "google_cloud_run_job_iam_policy" "foo" {
  location = google_cloud_run_job.default.location
  project = google_cloud_run_job.default.project
  job = google_cloud_run_job.default.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccCloudRunJobIamBinding_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_job" "default" {
  name     = ""
  location = "us-central1"
  provider = google-beta

  metadata {
    annotations = {
      "run.googleapis.com/launch-stage" = "BETA"
      generated-by = "magic-modules"
    }
  }

  template {
    spec {
      template {
        spec {
          containers {
            image = "us-docker.pkg.dev/cloudrun/container/hello"
          }
        }
      }
    }
  }
}

resource "google_cloud_run_job_iam_binding" "foo" {
  location = google_cloud_run_job.default.location
  project = google_cloud_run_job.default.project
  job = google_cloud_run_job.default.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccCloudRunJobIamBinding_updateGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_job" "default" {
  name     = ""
  location = "us-central1"
  provider = google-beta

  metadata {
    annotations = {
      "run.googleapis.com/launch-stage" = "BETA"
      generated-by = "magic-modules"
    }
  }

  template {
    spec {
      template {
        spec {
          containers {
            image = "us-docker.pkg.dev/cloudrun/container/hello"
          }
        }
      }
    }
  }
}

resource "google_cloud_run_job_iam_binding" "foo" {
  location = google_cloud_run_job.default.location
  project = google_cloud_run_job.default.project
  job = google_cloud_run_job.default.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}
