// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

func TestAccFirestoreField_firestoreFieldBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    getTestFirestoreProjectFromEnv(t),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckFirestoreFieldDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirestoreField_firestoreFieldBasicExample(context),
			},
			{
				ResourceName:            "google_firestore_field.my-field",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"database", "collection"},
			},
		},
	})
}

func testAccFirestoreField_firestoreFieldBasicExample(context map[string]interface{}) string {
	return Nprintf(`
// If the field is present, it will be ENABLED
resource "google_firestore_field" "my-field" {
  project = "%{project_id}"

  collection = "chatrooms"

  name = "projects/"%{project_id}"/databases/{database_id}/collectionGroups/chatrooms/fields/name"

  index_config {
    indexes {
      query_scope = "COLLECTION"

      fields {
        field_path = "name"
        order = "ASCENDING"
      }
    }

    indexes {
      query_scope = "COLLECTION"

      fields {
        field_path = "name"
        order = "DESCENDING"
      }
    }

    indexes {
      query_scope = "COLLECTION"

      fields {
        field_path = "name"
        array_config = "CONTAINS"
      }
    }

    indexes {
      query_scope = "COLLECTION_GROUP"

      fields {
        field_path = "name"
        order = "ASCENDING"
      }
    }

    indexes {
      query_scope = "COLLECTION_GROUP"

      fields {
        field_path = "name"
        order = "DESCENDING"
      }
    }

    indexes {
      query_scope = "COLLECTION_GROUP"

      fields {
        field_path = "name"
        array_config = "CONTAINS"
      }
    }
  }
}

// If the field is not present, it will be DISABLED
resource "google_firestore_field" "my_field" {
  project = "%{project_id}"
  collection = "chatrooms"
  name = "projects/"%{project_id}"/databases/{database_id}/collectionGroups/chatrooms/fields/name"
  index_config {
    // An empty index_config disables every field
  }
}
`, context)
}

func testAccCheckFirestoreFieldDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_firestore_field" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := googleProviderConfig(t)

			url, err := replaceVarsForTest(config, rs, "{{FirestoreBasePath}}projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{name}}")
			if err != nil {
				return err
			}

			_, err = sendRequest(config, "GET", "", url, nil)
			if err == nil {
				return fmt.Errorf("FirestoreField still exists at %s", url)
			}
		}

		return nil
	}
}
