// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceFirebaseIosApp() *schema.Resource {
	return &schema.Resource{
		Create: resourceFirebaseIosAppCreate,
		Read:   resourceFirebaseIosAppRead,
		Update: resourceFirebaseIosAppUpdate,
		Delete: resourceFirebaseIosAppDelete,

		Importer: &schema.ResourceImporter{
			State: resourceFirebaseIosAppImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(4 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"display_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The user-assigned display name of the App.`,
			},
			"app_store_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The automatically generated Apple ID assigned to the iOS app by Apple in the iOS App Store.`,
			},
			"app_id": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Immutable. The globally unique, Firebase-assigned identifier of the App.

This identifier should be treated as an opaque token, as the data format is not specified.`,
			},
			"bundle_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Immutable. The canonical bundle ID of the iOS app as it would appear in the iOS AppStore.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The fully qualified resource name of the App, for example:

'projects/PROJECT_IDENTIFIER/iosApps/APP_ID'

- 'PROJECT_IDENTIFIER': the parent Project's 'ProjectNumber' (recommended) or its 'ProjectId'. Note that the value for 'PROJECT_IDENTIFIER' in any response body will be the 'ProjectId'.
- 'APP_ID': the globally unique, Firebase-assigned identifier for the App (see [appId](https://firebase.google.com/docs/projects/api/reference/rest/projects.iosApps#IosApp.FIELDS.app_id)).`,
			},
			"project_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Immutable. A user-assigned unique identifier of the parent FirebaseProject for the IosApp.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceFirebaseIosAppCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandFirebaseIosAppDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !isEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	appStoreIdProp, err := expandFirebaseIosAppAppStoreId(d.Get("app_store_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("app_store_id"); !isEmptyValue(reflect.ValueOf(appStoreIdProp)) && (ok || !reflect.DeepEqual(v, appStoreIdProp)) {
		obj["appStoreId"] = appStoreIdProp
	}

	url, err := replaceVars(d, config, "{{FirebaseBasePath}}projects/{{project}}/iosApps")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new IosApp: %#v", obj)
	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for IosApp: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating IosApp: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = firebaseOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating IosApp", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create IosApp: %s", err)
	}

	if err := d.Set("name", flattenFirebaseIosAppName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = replaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating IosApp %q: %#v", d.Id(), res)

	return resourceFirebaseIosAppRead(d, meta)
}

func resourceFirebaseIosAppRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{FirebaseBasePath}}{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for IosApp: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("FirebaseIosApp %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading IosApp: %s", err)
	}

	if err := d.Set("name", flattenFirebaseIosAppName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading IosApp: %s", err)
	}
	if err := d.Set("app_id", flattenFirebaseIosAppAppId(res["appId"], d, config)); err != nil {
		return fmt.Errorf("Error reading IosApp: %s", err)
	}
	if err := d.Set("display_name", flattenFirebaseIosAppDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading IosApp: %s", err)
	}
	if err := d.Set("project_id", flattenFirebaseIosAppProjectId(res["projectId"], d, config)); err != nil {
		return fmt.Errorf("Error reading IosApp: %s", err)
	}
	if err := d.Set("bundle_id", flattenFirebaseIosAppBundleId(res["bundleId"], d, config)); err != nil {
		return fmt.Errorf("Error reading IosApp: %s", err)
	}
	if err := d.Set("app_store_id", flattenFirebaseIosAppAppStoreId(res["appStoreId"], d, config)); err != nil {
		return fmt.Errorf("Error reading IosApp: %s", err)
	}

	return nil
}

func resourceFirebaseIosAppUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for IosApp: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandFirebaseIosAppDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	appStoreIdProp, err := expandFirebaseIosAppAppStoreId(d.Get("app_store_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("app_store_id"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, appStoreIdProp)) {
		obj["appStoreId"] = appStoreIdProp
	}

	url, err := replaceVars(d, config, "{{FirebaseBasePath}}{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating IosApp %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("app_store_id") {
		updateMask = append(updateMask, "appStoreId")
	}
	// updateMask is a URL parameter but not present in the schema, so replaceVars
	// won't set it
	url, err = addQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return fmt.Errorf("Error updating IosApp %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating IosApp %q: %#v", d.Id(), res)
	}

	return resourceFirebaseIosAppRead(d, meta)
}

func resourceFirebaseIosAppDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] Firebase IosApp resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceFirebaseIosAppImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {

	config := meta.(*Config)

	// current import_formats can't import fields with forward slashes in their value
	if err := parseImportId([]string{"(?P<project>[^ ]+) (?P<name>[^ ]+)", "(?P<name>[^ ]+)"}, d, config); err != nil {
		return nil, err
	}

	return []*schema.ResourceData{d}, nil
}

func flattenFirebaseIosAppName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseIosAppAppId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseIosAppDisplayName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseIosAppProjectId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseIosAppBundleId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenFirebaseIosAppAppStoreId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandFirebaseIosAppDisplayName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandFirebaseIosAppAppStoreId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
