// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourceDataLossPreventionJob() *schema.Resource {
	return &schema.Resource{
		Create: resourceDataLossPreventionJobCreate,
		Read:   resourceDataLossPreventionJobRead,
		Delete: resourceDataLossPreventionJobDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDataLossPreventionJobImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"parent": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The parent of the trigger, either in the format 'projects/{{project}}' or 'projects/{{project}}/locations/{{location}}'`,
			},
			"job_id": {
				Type:     schema.TypeString,
				Computed: true,
				Optional: true,
				ForceNew: true,
				Description: `The job id can contain uppercase and lowercase letters, numbers, and hyphens; that is,
it must match the regular expression :- [a-zA-Z\d-_]+. The maximum length is 100 characters.
Can be empty to allow the system to generate one.`,
			},
			"risk_job": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `A risk analysis job calculates re-identification risk metrics for a BigQuery table.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"privacy_metric": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `Privacy metric to compute.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"categorical_stats_config": {
										Type:     schema.TypeList,
										Optional: true,
										ForceNew: true,
										Description: `Compute numerical stats over an individual column, including number of distinct values
and value count distribution.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"field": {
													Type:     schema.TypeList,
													Required: true,
													ForceNew: true,
													Description: `Field to compute categorical stats on. All column types are supported except for
arrays and structs. However, it may be more informative to use NumericalStats when
the field type is supported, depending on the data.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"name": {
																Type:        schema.TypeString,
																Required:    true,
																ForceNew:    true,
																Description: `Name describing the field.`,
															},
														},
													},
												},
											},
										},
										ExactlyOneOf: []string{"risk_job.0.privacy_metric.0.numerical_stats_config", "risk_job.0.privacy_metric.0.categorical_stats_config", "risk_job.0.privacy_metric.0.k_anonymity_config", "risk_job.0.privacy_metric.0.l_diversity_config", "risk_job.0.privacy_metric.0.k_map_estimation_config", "risk_job.0.privacy_metric.0.delta_presence_estimation_config"},
									},
									"delta_presence_estimation_config": {
										Type:     schema.TypeList,
										Optional: true,
										ForceNew: true,
										Description: `Î´-presence metric, used to estimate how likely it is for an attacker to figure
out that one given individual appears in a de-identified dataset.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"quasi_ids": {
													Type:        schema.TypeList,
													Required:    true,
													ForceNew:    true,
													Description: `Fields considered to be quasi-identifiers. No two fields can have the same tag.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"field": {
																Type:        schema.TypeList,
																Required:    true,
																ForceNew:    true,
																Description: `Identifies the column.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Name describing the field.`,
																		},
																	},
																},
															},
															"custom_tag": {
																Type:     schema.TypeString,
																Optional: true,
																ForceNew: true,
																Description: `A column can be tagged with a custom tag. In this case, the user must indicate an
auxiliary table that contains statistical information on the possible values of
this column (below).`,
															},
															"inferred": {
																Type:     schema.TypeList,
																Optional: true,
																ForceNew: true,
																Description: `If no semantic tag is indicated, we infer the statistical model from the distribution
of values in the input data.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},
															"info_type": {
																Type:     schema.TypeList,
																Optional: true,
																ForceNew: true,
																Description: `A column can be tagged with a InfoType to use the relevant public dataset as a statistical
model of population, if available. We currently support US ZIP codes, region codes, ages
and genders. To programmatically obtain the list of supported InfoTypes, use infoTypes.list
with the supportedBy=RISK_ANALYSIS filter.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																			ForceNew: true,
																			Description: `Name of the information type. Either a name of your choosing when creating a CustomInfoType,
or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when
specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names
should conform to the pattern [A-Za-z0-9$_-]{1,64}.`,
																		},
																		"version": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			ForceNew:    true,
																			Description: `Version name for this InfoType.`,
																		},
																	},
																},
															},
														},
													},
												},
												"auxiliary_tables": {
													Type:     schema.TypeList,
													Optional: true,
													ForceNew: true,
													Description: `Several auxiliary tables can be used in the analysis. Each customTag used to tag a
quasi-identifiers column must appear in exactly one column of one auxiliary table.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"quasi_ids": {
																Type:        schema.TypeList,
																Required:    true,
																ForceNew:    true,
																Description: `Quasi-identifier columns.`,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"custom_tag": {
																			Type:     schema.TypeString,
																			Required: true,
																			ForceNew: true,
																			Description: `A column can be tagged with a custom tag. In this case, the user must indicate an
auxiliary table that contains statistical information on the possible values of
this column (below).`,
																		},
																		"field": {
																			Type:        schema.TypeList,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Identifies the column.`,
																			MaxItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"name": {
																						Type:        schema.TypeString,
																						Required:    true,
																						ForceNew:    true,
																						Description: `Name describing the field.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
															"relative_frequency": {
																Type:     schema.TypeList,
																Required: true,
																ForceNew: true,
																Description: `The relative frequency column must contain a floating-point number
between 0 and 1 (inclusive). Null values are assumed to be zero.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Name describing the field.`,
																		},
																	},
																},
															},
															"table": {
																Type:        schema.TypeList,
																Required:    true,
																ForceNew:    true,
																Description: `Auxiliary table location.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"dataset_id": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Dataset ID of the table.`,
																		},
																		"project_id": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `The Google Cloud Platform project ID of the project containing the table.`,
																		},
																		"table_id": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Name of the table.`,
																		},
																	},
																},
															},
														},
													},
												},
												"region_code": {
													Type:     schema.TypeString,
													Optional: true,
													ForceNew: true,
													Description: `ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column
is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.`,
												},
											},
										},
										ExactlyOneOf: []string{"risk_job.0.privacy_metric.0.numerical_stats_config", "risk_job.0.privacy_metric.0.categorical_stats_config", "risk_job.0.privacy_metric.0.k_anonymity_config", "risk_job.0.privacy_metric.0.l_diversity_config", "risk_job.0.privacy_metric.0.k_map_estimation_config", "risk_job.0.privacy_metric.0.delta_presence_estimation_config"},
									},
									"k_anonymity_config": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `k-anonymity metric, used for analysis of reidentification risk.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"quasi_ids": {
													Type:     schema.TypeList,
													Required: true,
													ForceNew: true,
													Description: `Set of fields to compute k-anonymity over. When multiple fields are specified,
they are considered a single composite key. Structs and repeated data types are
not supported; however, nested fields are supported so long as they are not
structs themselves or nested within a repeated field.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"name": {
																Type:        schema.TypeString,
																Required:    true,
																ForceNew:    true,
																Description: `Name describing the field.`,
															},
														},
													},
												},
												"entity_id": {
													Type:     schema.TypeList,
													Optional: true,
													ForceNew: true,
													Description: `Message indicating that multiple rows might be associated to a single individual.
If the same entityId is associated to multiple quasi-identifier tuples over distinct
rows, we consider the entire collection of tuples as the composite quasi-identifier.
This collection is a multiset :- the order in which the different tuples appear in
the dataset is ignored, but their frequency is taken into account.`,
													MaxItems: 1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"field": {
																Type:        schema.TypeList,
																Required:    true,
																ForceNew:    true,
																Description: `Composite key indicating which field contains the entity identifier.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Name describing the field.`,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										ExactlyOneOf: []string{"risk_job.0.privacy_metric.0.numerical_stats_config", "risk_job.0.privacy_metric.0.categorical_stats_config", "risk_job.0.privacy_metric.0.k_anonymity_config", "risk_job.0.privacy_metric.0.l_diversity_config", "risk_job.0.privacy_metric.0.k_map_estimation_config", "risk_job.0.privacy_metric.0.delta_presence_estimation_config"},
									},
									"k_map_estimation_config": {
										Type:     schema.TypeList,
										Optional: true,
										ForceNew: true,
										Description: `Reidentifiability metric. This corresponds to a risk model similar to what is called "journalist risk"
in the literature, except the attack dataset is statistically modeled instead of being perfectly known.
This can be done using publicly available data (like the US Census), or using a custom statistical model
(indicated as one or several BigQuery tables), or by extrapolating from the distribution of values
in the input dataset.`,
										MaxItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"quasi_ids": {
													Type:        schema.TypeList,
													Required:    true,
													ForceNew:    true,
													Description: `Fields considered to be quasi-identifiers. No two columns can have the same tag.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"field": {
																Type:        schema.TypeList,
																Required:    true,
																ForceNew:    true,
																Description: `Identifies the column.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Name describing the field.`,
																		},
																	},
																},
															},
															"custom_tag": {
																Type:     schema.TypeString,
																Optional: true,
																ForceNew: true,
																Description: `A column can be tagged with a custom tag. In this case, the user must indicate an
auxiliary table that contains statistical information on the possible values of
this column (below).`,
															},
															"inferred": {
																Type:     schema.TypeList,
																Optional: true,
																ForceNew: true,
																Description: `If no semantic tag is indicated, we infer the statistical model from the distribution
of values in the input data.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},
															"info_type": {
																Type:     schema.TypeList,
																Optional: true,
																ForceNew: true,
																Description: `A column can be tagged with a InfoType to use the relevant public dataset as a statistical
model of population, if available. We currently support US ZIP codes, region codes, ages
and genders. To programmatically obtain the list of supported InfoTypes, use infoTypes.list
with the supportedBy=RISK_ANALYSIS filter.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:     schema.TypeString,
																			Required: true,
																			ForceNew: true,
																			Description: `Name of the information type. Either a name of your choosing when creating a CustomInfoType,
or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when
specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names
should conform to the pattern [A-Za-z0-9$_-]{1,64}.`,
																		},
																		"version": {
																			Type:        schema.TypeString,
																			Optional:    true,
																			ForceNew:    true,
																			Description: `Version name for this InfoType.`,
																		},
																	},
																},
															},
														},
													},
												},
												"auxiliary_tables": {
													Type:     schema.TypeList,
													Optional: true,
													ForceNew: true,
													Description: `Several auxiliary tables can be used in the analysis. Each customTag used to tag a
quasi-identifiers column must appear in exactly one column of one auxiliary table.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"quasi_ids": {
																Type:        schema.TypeList,
																Required:    true,
																ForceNew:    true,
																Description: `Quasi-identifier columns.`,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"custom_tag": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `A auxiliary field.`,
																		},
																		"field": {
																			Type:        schema.TypeList,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Identifies the column.`,
																			MaxItems:    1,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{
																					"name": {
																						Type:        schema.TypeString,
																						Required:    true,
																						ForceNew:    true,
																						Description: `Name describing the field.`,
																					},
																				},
																			},
																		},
																	},
																},
															},
															"relative_frequency": {
																Type:     schema.TypeList,
																Required: true,
																ForceNew: true,
																Description: `The relative frequency column must contain a floating-point number
between 0 and 1 (inclusive). Null values are assumed to be zero.`,
																MaxItems: 1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"name": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Name describing the field.`,
																		},
																	},
																},
															},
															"table": {
																Type:        schema.TypeList,
																Required:    true,
																ForceNew:    true,
																Description: `Auxiliary table location.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"dataset_id": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Dataset ID of the table.`,
																		},
																		"project_id": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `The Google Cloud Platform project ID of the project containing the table.`,
																		},
																		"table_id": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Name of the table.`,
																		},
																	},
																},
															},
														},
													},
												},
												"region_code": {
													Type:     schema.TypeString,
													Optional: true,
													ForceNew: true,
													Description: `ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column
is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.`,
												},
											},
										},
										ExactlyOneOf: []string{"risk_job.0.privacy_metric.0.numerical_stats_config", "risk_job.0.privacy_metric.0.categorical_stats_config", "risk_job.0.privacy_metric.0.k_anonymity_config", "risk_job.0.privacy_metric.0.l_diversity_config", "risk_job.0.privacy_metric.0.k_map_estimation_config", "risk_job.0.privacy_metric.0.delta_presence_estimation_config"},
									},
									"l_diversity_config": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `l-diversity metric, used for analysis of reidentification risk.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"quasi_ids": {
													Type:     schema.TypeList,
													Required: true,
													ForceNew: true,
													Description: `Set of quasi-identifiers indicating how equivalence classes are defined for
the l-diversity computation. When multiple fields are specified, they are
considered a single composite key.`,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"name": {
																Type:        schema.TypeString,
																Required:    true,
																ForceNew:    true,
																Description: `Name describing the field.`,
															},
														},
													},
												},
												"sensitive_attribute": {
													Type:        schema.TypeList,
													Required:    true,
													ForceNew:    true,
													Description: `Sensitive field for computing the l-value.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"name": {
																Type:        schema.TypeString,
																Required:    true,
																ForceNew:    true,
																Description: `Name describing the field.`,
															},
														},
													},
												},
											},
										},
										ExactlyOneOf: []string{"risk_job.0.privacy_metric.0.numerical_stats_config", "risk_job.0.privacy_metric.0.categorical_stats_config", "risk_job.0.privacy_metric.0.k_anonymity_config", "risk_job.0.privacy_metric.0.l_diversity_config", "risk_job.0.privacy_metric.0.k_map_estimation_config", "risk_job.0.privacy_metric.0.delta_presence_estimation_config"},
									},
									"numerical_stats_config": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Compute numerical stats over an individual column, including min, max, and quantiles.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"field": {
													Type:        schema.TypeList,
													Required:    true,
													ForceNew:    true,
													Description: `Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"name": {
																Type:        schema.TypeString,
																Required:    true,
																ForceNew:    true,
																Description: `Name describing the field.`,
															},
														},
													},
												},
											},
										},
										ExactlyOneOf: []string{"risk_job.0.privacy_metric.0.numerical_stats_config", "risk_job.0.privacy_metric.0.categorical_stats_config", "risk_job.0.privacy_metric.0.k_anonymity_config", "risk_job.0.privacy_metric.0.l_diversity_config", "risk_job.0.privacy_metric.0.k_map_estimation_config", "risk_job.0.privacy_metric.0.delta_presence_estimation_config"},
									},
								},
							},
						},
						"source_table": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `Input dataset to compute metrics over.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"dataset_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `Dataset ID of the table.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `The Google Cloud Platform project ID of the project containing the table.`,
									},
									"table_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `Name of the table.`,
									},
								},
							},
						},
						"actions": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `A task to execute at the completion of the job.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"job_notification_emails": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Sends an email when the job completes. The email goes to IAM project owners and technical Essential Contacts.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{},
										},
										ExactlyOneOf: []string{},
									},
									"pub_sub": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Publish a message into a given Pub/Sub topic when the job completes.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"topic": {
													Type:     schema.TypeString,
													Required: true,
													ForceNew: true,
													Description: `Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access
rights to the DLP API service account executing the long running DlpJob sending the
notifications. Format is projects/{project}/topics/{topic}.`,
												},
											},
										},
										ExactlyOneOf: []string{},
									},
									"save_findings": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Save resulting findings in a provided location.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"output_config": {
													Type:        schema.TypeList,
													Required:    true,
													ForceNew:    true,
													Description: `Location to store findings outside of DLP.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"table": {
																Type:        schema.TypeList,
																Required:    true,
																ForceNew:    true,
																Description: `Information on the location of the target BigQuery Table.`,
																MaxItems:    1,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{
																		"dataset_id": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `Dataset ID of the table.`,
																		},
																		"project_id": {
																			Type:        schema.TypeString,
																			Required:    true,
																			ForceNew:    true,
																			Description: `The Google Cloud Platform project ID of the project containing the table.`,
																		},
																		"table_id": {
																			Type:     schema.TypeString,
																			Computed: true,
																			Optional: true,
																			ForceNew: true,
																			Description: `Name of the table. If it is not set, a new one will be generated for you with
the following format :- 'dlp_googleapis_yyyy_mm_dd_[dlp_job_id]'.
Pacific timezone will be used for generating the date details.`,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										ExactlyOneOf: []string{},
									},
								},
							},
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time when the job was created.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time when the job finished.`,
			},
			"job_trigger_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `If created by a job trigger, the resource name of the trigger that instantiated the job.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The resource name of the job. Set by the server.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time when the job started.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `State of a job.`,
			},
			"type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The type of job.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDataLossPreventionJobCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := generateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	riskJobProp, err := expandDataLossPreventionJobRiskJob(d.Get("risk_job"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("risk_job"); !isEmptyValue(reflect.ValueOf(riskJobProp)) && (ok || !reflect.DeepEqual(v, riskJobProp)) {
		obj["riskJob"] = riskJobProp
	}

	obj, err = resourceDataLossPreventionJobEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := ReplaceVars(d, config, "{{DataLossPreventionBasePath}}{{parent}}/dlpJobs")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Job: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating Job: %s", err)
	}
	if err := d.Set("name", flattenDataLossPreventionJobName(res["name"], d, config)); err != nil {
		return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
	}

	// Store the ID now
	id, err := ReplaceVars(d, config, "{{parent}}/dlpJobs/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Job %q: %#v", d.Id(), res)

	return resourceDataLossPreventionJobRead(d, meta)
}

func resourceDataLossPreventionJobRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := generateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := ReplaceVars(d, config, "{{DataLossPreventionBasePath}}{{parent}}/dlpJobs/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DataLossPreventionJob %q", d.Id()))
	}

	res, err = resourceDataLossPreventionJobDecoder(d, meta, res)
	if err != nil {
		return err
	}

	if res == nil {
		// Decoding the object has resulted in it being gone. It may be marked deleted
		log.Printf("[DEBUG] Removing DataLossPreventionJob because it no longer exists.")
		d.SetId("")
		return nil
	}

	if err := d.Set("name", flattenDataLossPreventionJobName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Job: %s", err)
	}
	if err := d.Set("create_time", flattenDataLossPreventionJobCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Job: %s", err)
	}
	if err := d.Set("start_time", flattenDataLossPreventionJobStartTime(res["startTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Job: %s", err)
	}
	if err := d.Set("end_time", flattenDataLossPreventionJobEndTime(res["endTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Job: %s", err)
	}
	if err := d.Set("type", flattenDataLossPreventionJobType(res["type"], d, config)); err != nil {
		return fmt.Errorf("Error reading Job: %s", err)
	}
	if err := d.Set("state", flattenDataLossPreventionJobState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading Job: %s", err)
	}
	if err := d.Set("job_trigger_name", flattenDataLossPreventionJobJobTriggerName(res["jobTriggerName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Job: %s", err)
	}
	if err := d.Set("risk_job", flattenDataLossPreventionJobRiskJob(res["riskJob"], d, config)); err != nil {
		return fmt.Errorf("Error reading Job: %s", err)
	}

	return nil
}

func resourceDataLossPreventionJobDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := generateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := ReplaceVars(d, config, "{{DataLossPreventionBasePath}}{{parent}}/dlpJobs/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting Job %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Job")
	}

	log.Printf("[DEBUG] Finished deleting Job %q: %#v", d.Id(), res)
	return nil
}

func resourceDataLossPreventionJobImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)

	// Custom import to handle parent possibilities
	if err := ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
		return nil, err
	}
	parts := strings.Split(d.Get("name").(string), "/")
	if len(parts) == 6 {
		if err := d.Set("name", parts[5]); err != nil {
			return nil, fmt.Errorf("Error setting name: %s", err)
		}
	} else if len(parts) == 4 {
		if err := d.Set("name", parts[3]); err != nil {
			return nil, fmt.Errorf("Error setting name: %s", err)
		}
	} else {
		return nil, fmt.Errorf("Unexpected import id: %s, expected form {{parent}}/dlpJobs/{{name}}", d.Get("name").(string))
	}
	// Remove "/dlpJobs/{{name}}" from the id
	parts = parts[:len(parts)-2]
	if err := d.Set("parent", strings.Join(parts, "/")); err != nil {
		return nil, fmt.Errorf("Error setting parent: %s", err)
	}

	// Replace import id for the resource id
	id, err := ReplaceVars(d, config, "{{parent}}/dlpJobs/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDataLossPreventionJobName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return NameFromSelfLinkStateFunc(v)
}

func flattenDataLossPreventionJobCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobStartTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobEndTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobJobTriggerName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJob(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["actions"] =
		flattenDataLossPreventionJobRiskJobActions(original["actions"], d, config)
	transformed["privacy_metric"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetric(original["privacyMetric"], d, config)
	transformed["source_table"] =
		flattenDataLossPreventionJobRiskJobSourceTable(original["sourceTable"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"save_findings":           flattenDataLossPreventionJobRiskJobActionsSaveFindings(original["saveFindings"], d, config),
			"pub_sub":                 flattenDataLossPreventionJobRiskJobActionsPubSub(original["pubSub"], d, config),
			"job_notification_emails": flattenDataLossPreventionJobRiskJobActionsJobNotificationEmails(original["jobNotificationEmails"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobActionsSaveFindings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["output_config"] =
		flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfig(original["outputConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["table"] =
		flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTable(original["table"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["project_id"] =
		flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableProjectId(original["projectId"], d, config)
	transformed["dataset_id"] =
		flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableDatasetId(original["datasetId"], d, config)
	transformed["table_id"] =
		flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableTableId(original["tableId"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableDatasetId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableTableId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobActionsPubSub(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenDataLossPreventionJobRiskJobActionsPubSubTopic(original["topic"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobActionsPubSubTopic(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobActionsJobNotificationEmails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDataLossPreventionJobRiskJobPrivacyMetric(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["numerical_stats_config"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfig(original["numericalStatsConfig"], d, config)
	transformed["categorical_stats_config"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfig(original["categoricalStatsConfig"], d, config)
	transformed["k_anonymity_config"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfig(original["kAnonymityConfig"], d, config)
	transformed["l_diversity_config"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfig(original["lDiversityConfig"], d, config)
	transformed["k_map_estimation_config"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfig(original["kMapEstimationConfig"], d, config)
	transformed["delta_presence_estimation_config"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfig(original["deltaPresenceEstimationConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["field"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfigField(original["field"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfigField(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfigFieldName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfigFieldName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["field"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfigField(original["field"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfigField(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfigFieldName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfigFieldName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["quasi_ids"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigQuasiIds(original["quasiIds"], d, config)
	transformed["entity_id"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityId(original["entityId"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigQuasiIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name": flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigQuasiIdsName(original["name"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigQuasiIdsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["field"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityIdField(original["field"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityIdField(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityIdFieldName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityIdFieldName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["quasi_ids"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigQuasiIds(original["quasiIds"], d, config)
	transformed["sensitive_attribute"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigSensitiveAttribute(original["sensitiveAttribute"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigQuasiIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name": flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigQuasiIdsName(original["name"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigQuasiIdsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigSensitiveAttribute(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigSensitiveAttributeName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigSensitiveAttributeName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["quasi_ids"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIds(original["quasiIds"], d, config)
	transformed["region_code"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigRegionCode(original["regionCode"], d, config)
	transformed["auxiliary_tables"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTables(original["auxiliaryTables"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"field":      flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsField(original["field"], d, config),
			"info_type":  flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoType(original["infoType"], d, config),
			"custom_tag": flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsCustomTag(original["customTag"], d, config),
			"inferred":   flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInferred(original["inferred"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsField(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsFieldName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsFieldName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoTypeName(original["name"], d, config)
	transformed["version"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoTypeVersion(original["version"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoTypeName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoTypeVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsCustomTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInferred(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigRegionCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTables(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"table":              flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTable(original["table"], d, config),
			"quasi_ids":          flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIds(original["quasiIds"], d, config),
			"relative_frequency": flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesRelativeFrequency(original["relativeFrequency"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["project_id"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableProjectId(original["projectId"], d, config)
	transformed["dataset_id"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableDatasetId(original["datasetId"], d, config)
	transformed["table_id"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableTableId(original["tableId"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableDatasetId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableTableId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"field":      flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsField(original["field"], d, config),
			"custom_tag": flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsCustomTag(original["customTag"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsField(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsFieldName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsFieldName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsCustomTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesRelativeFrequency(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesRelativeFrequencyName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesRelativeFrequencyName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["quasi_ids"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIds(original["quasiIds"], d, config)
	transformed["region_code"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigRegionCode(original["regionCode"], d, config)
	transformed["auxiliary_tables"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTables(original["auxiliaryTables"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"field":      flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsField(original["field"], d, config),
			"info_type":  flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoType(original["infoType"], d, config),
			"custom_tag": flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsCustomTag(original["customTag"], d, config),
			"inferred":   flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInferred(original["inferred"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsField(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsFieldName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsFieldName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoTypeName(original["name"], d, config)
	transformed["version"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoTypeVersion(original["version"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoTypeName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoTypeVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsCustomTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInferred(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigRegionCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTables(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"table":              flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTable(original["table"], d, config),
			"quasi_ids":          flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIds(original["quasiIds"], d, config),
			"relative_frequency": flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesRelativeFrequency(original["relativeFrequency"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["project_id"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableProjectId(original["projectId"], d, config)
	transformed["dataset_id"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableDatasetId(original["datasetId"], d, config)
	transformed["table_id"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableTableId(original["tableId"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableDatasetId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableTableId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"field":      flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsField(original["field"], d, config),
			"custom_tag": flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsCustomTag(original["customTag"], d, config),
		})
	}
	return transformed
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsField(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsFieldName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsFieldName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsCustomTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesRelativeFrequency(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesRelativeFrequencyName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesRelativeFrequencyName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobSourceTable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["project_id"] =
		flattenDataLossPreventionJobRiskJobSourceTableProjectId(original["projectId"], d, config)
	transformed["dataset_id"] =
		flattenDataLossPreventionJobRiskJobSourceTableDatasetId(original["datasetId"], d, config)
	transformed["table_id"] =
		flattenDataLossPreventionJobRiskJobSourceTableTableId(original["tableId"], d, config)
	return []interface{}{transformed}
}
func flattenDataLossPreventionJobRiskJobSourceTableProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobSourceTableDatasetId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataLossPreventionJobRiskJobSourceTableTableId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDataLossPreventionJobRiskJob(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedActions, err := expandDataLossPreventionJobRiskJobActions(original["actions"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedActions); val.IsValid() && !isEmptyValue(val) {
		transformed["actions"] = transformedActions
	}

	transformedPrivacyMetric, err := expandDataLossPreventionJobRiskJobPrivacyMetric(original["privacy_metric"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivacyMetric); val.IsValid() && !isEmptyValue(val) {
		transformed["privacyMetric"] = transformedPrivacyMetric
	}

	transformedSourceTable, err := expandDataLossPreventionJobRiskJobSourceTable(original["source_table"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSourceTable); val.IsValid() && !isEmptyValue(val) {
		transformed["sourceTable"] = transformedSourceTable
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobActions(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedSaveFindings, err := expandDataLossPreventionJobRiskJobActionsSaveFindings(original["save_findings"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedSaveFindings); val.IsValid() && !isEmptyValue(val) {
			transformed["saveFindings"] = transformedSaveFindings
		}

		transformedPubSub, err := expandDataLossPreventionJobRiskJobActionsPubSub(original["pub_sub"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedPubSub); val.IsValid() && !isEmptyValue(val) {
			transformed["pubSub"] = transformedPubSub
		}

		transformedJobNotificationEmails, err := expandDataLossPreventionJobRiskJobActionsJobNotificationEmails(original["job_notification_emails"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["jobNotificationEmails"] = transformedJobNotificationEmails
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobActionsSaveFindings(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOutputConfig, err := expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfig(original["output_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOutputConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["outputConfig"] = transformedOutputConfig
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfig(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTable, err := expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTable(original["table"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTable); val.IsValid() && !isEmptyValue(val) {
		transformed["table"] = transformedTable
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTable(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !isEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedDatasetId, err := expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !isEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedTableId, err := expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableTableId(original["table_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableId); val.IsValid() && !isEmptyValue(val) {
		transformed["tableId"] = transformedTableId
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableProjectId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableDatasetId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobActionsSaveFindingsOutputConfigTableTableId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobActionsPubSub(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTopic, err := expandDataLossPreventionJobRiskJobActionsPubSubTopic(original["topic"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTopic); val.IsValid() && !isEmptyValue(val) {
		transformed["topic"] = transformedTopic
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobActionsPubSubTopic(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobActionsJobNotificationEmails(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetric(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNumericalStatsConfig, err := expandDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfig(original["numerical_stats_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNumericalStatsConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["numericalStatsConfig"] = transformedNumericalStatsConfig
	}

	transformedCategoricalStatsConfig, err := expandDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfig(original["categorical_stats_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCategoricalStatsConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["categoricalStatsConfig"] = transformedCategoricalStatsConfig
	}

	transformedKAnonymityConfig, err := expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfig(original["k_anonymity_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKAnonymityConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["kAnonymityConfig"] = transformedKAnonymityConfig
	}

	transformedLDiversityConfig, err := expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfig(original["l_diversity_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLDiversityConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["lDiversityConfig"] = transformedLDiversityConfig
	}

	transformedKMapEstimationConfig, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfig(original["k_map_estimation_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKMapEstimationConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["kMapEstimationConfig"] = transformedKMapEstimationConfig
	}

	transformedDeltaPresenceEstimationConfig, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfig(original["delta_presence_estimation_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDeltaPresenceEstimationConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["deltaPresenceEstimationConfig"] = transformedDeltaPresenceEstimationConfig
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfig(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedField, err := expandDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfigField(original["field"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedField); val.IsValid() && !isEmptyValue(val) {
		transformed["field"] = transformedField
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfigField(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfigFieldName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricNumericalStatsConfigFieldName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfig(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedField, err := expandDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfigField(original["field"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedField); val.IsValid() && !isEmptyValue(val) {
		transformed["field"] = transformedField
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfigField(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfigFieldName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricCategoricalStatsConfigFieldName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfig(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedQuasiIds, err := expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigQuasiIds(original["quasi_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQuasiIds); val.IsValid() && !isEmptyValue(val) {
		transformed["quasiIds"] = transformedQuasiIds
	}

	transformedEntityId, err := expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityId(original["entity_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEntityId); val.IsValid() && !isEmptyValue(val) {
		transformed["entityId"] = transformedEntityId
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigQuasiIds(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigQuasiIdsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
			transformed["name"] = transformedName
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigQuasiIdsName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedField, err := expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityIdField(original["field"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedField); val.IsValid() && !isEmptyValue(val) {
		transformed["field"] = transformedField
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityIdField(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityIdFieldName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKAnonymityConfigEntityIdFieldName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfig(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedQuasiIds, err := expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigQuasiIds(original["quasi_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQuasiIds); val.IsValid() && !isEmptyValue(val) {
		transformed["quasiIds"] = transformedQuasiIds
	}

	transformedSensitiveAttribute, err := expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigSensitiveAttribute(original["sensitive_attribute"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSensitiveAttribute); val.IsValid() && !isEmptyValue(val) {
		transformed["sensitiveAttribute"] = transformedSensitiveAttribute
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigQuasiIds(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigQuasiIdsName(original["name"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
			transformed["name"] = transformedName
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigQuasiIdsName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigSensitiveAttribute(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigSensitiveAttributeName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricLDiversityConfigSensitiveAttributeName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfig(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedQuasiIds, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIds(original["quasi_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQuasiIds); val.IsValid() && !isEmptyValue(val) {
		transformed["quasiIds"] = transformedQuasiIds
	}

	transformedRegionCode, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigRegionCode(original["region_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegionCode); val.IsValid() && !isEmptyValue(val) {
		transformed["regionCode"] = transformedRegionCode
	}

	transformedAuxiliaryTables, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTables(original["auxiliary_tables"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuxiliaryTables); val.IsValid() && !isEmptyValue(val) {
		transformed["auxiliaryTables"] = transformedAuxiliaryTables
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIds(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedField, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsField(original["field"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedField); val.IsValid() && !isEmptyValue(val) {
			transformed["field"] = transformedField
		}

		transformedInfoType, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoType(original["info_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedInfoType); val.IsValid() && !isEmptyValue(val) {
			transformed["infoType"] = transformedInfoType
		}

		transformedCustomTag, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsCustomTag(original["custom_tag"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCustomTag); val.IsValid() && !isEmptyValue(val) {
			transformed["customTag"] = transformedCustomTag
		}

		transformedInferred, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInferred(original["inferred"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["inferred"] = transformedInferred
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsField(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsFieldName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsFieldName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoType(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoTypeName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedVersion, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoTypeVersion(original["version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["version"] = transformedVersion
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoTypeName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInfoTypeVersion(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsCustomTag(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigQuasiIdsInferred(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigRegionCode(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTables(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedTable, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTable(original["table"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTable); val.IsValid() && !isEmptyValue(val) {
			transformed["table"] = transformedTable
		}

		transformedQuasiIds, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIds(original["quasi_ids"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQuasiIds); val.IsValid() && !isEmptyValue(val) {
			transformed["quasiIds"] = transformedQuasiIds
		}

		transformedRelativeFrequency, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesRelativeFrequency(original["relative_frequency"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRelativeFrequency); val.IsValid() && !isEmptyValue(val) {
			transformed["relativeFrequency"] = transformedRelativeFrequency
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTable(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !isEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedDatasetId, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !isEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedTableId, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableTableId(original["table_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableId); val.IsValid() && !isEmptyValue(val) {
		transformed["tableId"] = transformedTableId
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableProjectId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableDatasetId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesTableTableId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIds(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedField, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsField(original["field"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedField); val.IsValid() && !isEmptyValue(val) {
			transformed["field"] = transformedField
		}

		transformedCustomTag, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsCustomTag(original["custom_tag"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCustomTag); val.IsValid() && !isEmptyValue(val) {
			transformed["customTag"] = transformedCustomTag
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsField(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsFieldName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsFieldName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesQuasiIdsCustomTag(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesRelativeFrequency(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesRelativeFrequencyName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricKMapEstimationConfigAuxiliaryTablesRelativeFrequencyName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfig(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedQuasiIds, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIds(original["quasi_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQuasiIds); val.IsValid() && !isEmptyValue(val) {
		transformed["quasiIds"] = transformedQuasiIds
	}

	transformedRegionCode, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigRegionCode(original["region_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRegionCode); val.IsValid() && !isEmptyValue(val) {
		transformed["regionCode"] = transformedRegionCode
	}

	transformedAuxiliaryTables, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTables(original["auxiliary_tables"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAuxiliaryTables); val.IsValid() && !isEmptyValue(val) {
		transformed["auxiliaryTables"] = transformedAuxiliaryTables
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIds(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedField, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsField(original["field"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedField); val.IsValid() && !isEmptyValue(val) {
			transformed["field"] = transformedField
		}

		transformedInfoType, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoType(original["info_type"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedInfoType); val.IsValid() && !isEmptyValue(val) {
			transformed["infoType"] = transformedInfoType
		}

		transformedCustomTag, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsCustomTag(original["custom_tag"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCustomTag); val.IsValid() && !isEmptyValue(val) {
			transformed["customTag"] = transformedCustomTag
		}

		transformedInferred, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInferred(original["inferred"], d, config)
		if err != nil {
			return nil, err
		} else {
			transformed["inferred"] = transformedInferred
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsField(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsFieldName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsFieldName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoType(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoTypeName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	transformedVersion, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoTypeVersion(original["version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !isEmptyValue(val) {
		transformed["version"] = transformedVersion
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoTypeName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInfoTypeVersion(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsCustomTag(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigQuasiIdsInferred(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigRegionCode(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTables(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedTable, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTable(original["table"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedTable); val.IsValid() && !isEmptyValue(val) {
			transformed["table"] = transformedTable
		}

		transformedQuasiIds, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIds(original["quasi_ids"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQuasiIds); val.IsValid() && !isEmptyValue(val) {
			transformed["quasiIds"] = transformedQuasiIds
		}

		transformedRelativeFrequency, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesRelativeFrequency(original["relative_frequency"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRelativeFrequency); val.IsValid() && !isEmptyValue(val) {
			transformed["relativeFrequency"] = transformedRelativeFrequency
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTable(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !isEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedDatasetId, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !isEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedTableId, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableTableId(original["table_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableId); val.IsValid() && !isEmptyValue(val) {
		transformed["tableId"] = transformedTableId
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableProjectId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableDatasetId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesTableTableId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIds(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedField, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsField(original["field"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedField); val.IsValid() && !isEmptyValue(val) {
			transformed["field"] = transformedField
		}

		transformedCustomTag, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsCustomTag(original["custom_tag"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedCustomTag); val.IsValid() && !isEmptyValue(val) {
			transformed["customTag"] = transformedCustomTag
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsField(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsFieldName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsFieldName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesQuasiIdsCustomTag(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesRelativeFrequency(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedName, err := expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesRelativeFrequencyName(original["name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
		transformed["name"] = transformedName
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobPrivacyMetricDeltaPresenceEstimationConfigAuxiliaryTablesRelativeFrequencyName(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobSourceTable(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProjectId, err := expandDataLossPreventionJobRiskJobSourceTableProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !isEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	transformedDatasetId, err := expandDataLossPreventionJobRiskJobSourceTableDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !isEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedTableId, err := expandDataLossPreventionJobRiskJobSourceTableTableId(original["table_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTableId); val.IsValid() && !isEmptyValue(val) {
		transformed["tableId"] = transformedTableId
	}

	return transformed, nil
}

func expandDataLossPreventionJobRiskJobSourceTableProjectId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobSourceTableDatasetId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataLossPreventionJobRiskJobSourceTableTableId(v interface{}, d TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func resourceDataLossPreventionJobEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	jobIdProp, ok := d.GetOk("job_id")
	if ok && jobIdProp != nil {
		obj["jobId"] = jobIdProp
	}
	return obj, nil
}

func resourceDataLossPreventionJobDecoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
	// The GET endpoint contains the configuration used for creating the risk job
	// inside the 'riskDetails.requestedOptions.jobConfig' field. Hence, this field
	// is getting extracted into a new field named 'riskJob' in the response body.
	riskDetails, ok := res["riskDetails"]
	if ok && riskDetails != nil {
		requestedOptionsRiskJob, ok := riskDetails.(map[string]interface{})["requestedOptions"]
		if ok && requestedOptionsRiskJob != nil {
			riskJobConfig, ok := requestedOptionsRiskJob.(map[string]interface{})["jobConfig"]
			if ok && riskJobConfig != nil {
				res["riskJob"] = riskJobConfig.(map[string]interface{})
			}
		}
	}

	// The jobId field is not returned from the API as a separate field; instead,
	// it is a part of the name field. Hence, we are using the flattener of the
	// name field.
	config := meta.(*transport_tpg.Config)
	jobIdAsInterface := flattenDataLossPreventionJobName(res["name"], d, config)
	if jobIdAsInterface == nil {
		return nil, fmt.Errorf(`Error getting field "job_id"`)
	}
	jobIdAsString := fmt.Sprintf("%v", jobIdAsInterface)

	// jobId returned in the name field from the API will contain the prefix 'r-'
	// or 'i-' based on the type of job being created. Hence, to avoid state drift,
	// we are trimming such prefix from the jobId.
	jobIdAsString = strings.TrimPrefix(jobIdAsString, "r-")
	if err := d.Set("job_id", jobIdAsString); err != nil {
		return nil, fmt.Errorf(`Error setting field "job_id": %s`, err)
	}

	return res, nil
}
