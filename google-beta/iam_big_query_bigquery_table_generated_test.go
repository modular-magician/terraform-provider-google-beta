// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
)

func TestAccBigQueryBigqueryTableIamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   randString(t, 10),
		"role":            "roles/bigquery.dataOwner",
		"condition_title": "expires_after_2019_12_31",
		"condition_expr":  `request.time < timestamp(\"2020-01-01T00:00:00Z\")`,
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccBigQueryBigqueryTableIamBinding_basicGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				// Test Iam Binding update
				Config: testAccBigQueryBigqueryTableIamBinding_updateGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccBigQueryBigqueryTableIamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   randString(t, 10),
		"role":            "roles/bigquery.dataOwner",
		"condition_title": "expires_after_2019_12_31",
		"condition_expr":  `request.time < timestamp(\"2020-01-01T00:00:00Z\")`,
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccBigQueryBigqueryTableIamMember_basicGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner user:admin@hashicorptest.com", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccBigQueryBigqueryTableIamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   randString(t, 10),
		"role":            "roles/bigquery.dataOwner",
		"condition_title": "expires_after_2019_12_31",
		"condition_expr":  `request.time < timestamp(\"2020-01-01T00:00:00Z\")`,
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccBigQueryBigqueryTableIamPolicy_basicGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccBigQueryBigqueryTableIamPolicy_emptyBinding(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccBigQueryBigqueryTableIamBindingGenerated_withCondition(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   randString(t, 10),
		"role":            "roles/bigquery.dataOwner",
		"condition_title": "expires_after_2019_12_31",
		"condition_expr":  `request.time < timestamp(\"2020-01-01T00:00:00Z\")`,
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccBigQueryBigqueryTableIamBinding_withConditionGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner %s", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"]), context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccBigQueryBigqueryTableIamBindingGenerated_withAndWithoutCondition(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   randString(t, 10),
		"role":            "roles/bigquery.dataOwner",
		"condition_title": "expires_after_2019_12_31",
		"condition_expr":  `request.time < timestamp(\"2020-01-01T00:00:00Z\")`,
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccBigQueryBigqueryTableIamBinding_withAndWithoutConditionGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "google_bigquery_table_iam_binding.foo2",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner %s", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"]), context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccBigQueryBigqueryTableIamMemberGenerated_withCondition(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   randString(t, 10),
		"role":            "roles/bigquery.dataOwner",
		"condition_title": "expires_after_2019_12_31",
		"condition_expr":  `request.time < timestamp(\"2020-01-01T00:00:00Z\")`,
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccBigQueryBigqueryTableIamMember_withConditionGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner user:admin@hashicorptest.com %s", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"]), context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccBigQueryBigqueryTableIamMemberGenerated_withAndWithoutCondition(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   randString(t, 10),
		"role":            "roles/bigquery.dataOwner",
		"condition_title": "expires_after_2019_12_31",
		"condition_expr":  `request.time < timestamp(\"2020-01-01T00:00:00Z\")`,
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccBigQueryBigqueryTableIamMember_withAndWithoutConditionGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner user:admin@hashicorptest.com", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "google_bigquery_table_iam_member.foo2",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s roles/bigquery.dataOwner user:admin@hashicorptest.com %s", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"]), context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccBigQueryBigqueryTableIamPolicyGenerated_withCondition(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix":   randString(t, 10),
		"role":            "roles/bigquery.dataOwner",
		"condition_title": "expires_after_2019_12_31",
		"condition_expr":  `request.time < timestamp(\"2020-01-01T00:00:00Z\")`,
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccBigQueryBigqueryTableIamPolicy_withConditionGenerated(context),
			},
			{
				ResourceName:      "google_bigquery_table_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/datasets/%s/tables/%s", getTestProjectFromEnv(), fmt.Sprintf("dataset%s", context["random_suffix"]), fmt.Sprintf("table%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccBigQueryBigqueryTableIamMember_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

resource "google_bigquery_table_iam_member" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccBigQueryBigqueryTableIamPolicy_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

data "google_iam_policy" "foo" {
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
}

resource "google_bigquery_table_iam_policy" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccBigQueryBigqueryTableIamPolicy_emptyBinding(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

data "google_iam_policy" "foo" {
}

resource "google_bigquery_table_iam_policy" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccBigQueryBigqueryTableIamBinding_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

resource "google_bigquery_table_iam_binding" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccBigQueryBigqueryTableIamBinding_updateGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

resource "google_bigquery_table_iam_binding" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:paddy@hashicorp.com"]
}
`, context)
}

func testAccBigQueryBigqueryTableIamBinding_withConditionGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

resource "google_bigquery_table_iam_binding" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
  condition {
    title       = "%{condition_title}"
    description = "Expiring at midnight of 2019-12-31"
    expression  = "%{condition_expr}"
  }
}
`, context)
}

func testAccBigQueryBigqueryTableIamBinding_withAndWithoutConditionGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

resource "google_bigquery_table_iam_binding" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}

resource "google_bigquery_table_iam_binding" "foo2" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
  condition {
    title       = "%{condition_title}"
    description = "Expiring at midnight of 2019-12-31"
    expression  = "%{condition_expr}"
  }
}
`, context)
}

func testAccBigQueryBigqueryTableIamMember_withConditionGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

resource "google_bigquery_table_iam_member" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
  condition {
    title       = "%{condition_title}"
    description = "Expiring at midnight of 2019-12-31"
    expression  = "%{condition_expr}"
  }
}
`, context)
}

func testAccBigQueryBigqueryTableIamMember_withAndWithoutConditionGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

resource "google_bigquery_table_iam_member" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}

resource "google_bigquery_table_iam_member" "foo2" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
  condition {
    title       = "%{condition_title}"
    description = "Expiring at midnight of 2019-12-31"
    expression  = "%{condition_expr}"
  }
}
`, context)
}

func testAccBigQueryBigqueryTableIamPolicy_withConditionGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_bigquery_dataset" "test" {
	dataset_id = "dataset%{random_suffix}"
}

resource "google_bigquery_table" "test" {
	table_id   = "table%{random_suffix}"
	dataset_id = google_bigquery_dataset.test.dataset_id
	time_partitioning {
		type = "DAY"
	}
	schema = <<EOH
[
	{
		"name": "city",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "coord",
		"type": "RECORD",
		"fields": [
		{
			"name": "lon",
			"type": "FLOAT"
		},
		{
			"name": "lat",
			"type": "FLOAT"
		}
		]
	}
		]
	},
	{
		"name": "country",
		"type": "RECORD",
		"fields": [
	{
		"name": "id",
		"type": "INTEGER"
	},
	{
		"name": "name",
		"type": "STRING"
	}
		]
	}
]
EOH
}

data "google_iam_policy" "foo" {
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
    condition {
      title       = "%{condition_title}"
      description = "Expiring at midnight of 2019-12-31"
      expression  = "%{condition_expr}"
    }
  }
}

resource "google_bigquery_table_iam_policy" "foo" {
  project = google_bigquery_table.test.project
  dataset_id = google_bigquery_table.test.dataset_id
  table_id = google_bigquery_table.test.table_id
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}
