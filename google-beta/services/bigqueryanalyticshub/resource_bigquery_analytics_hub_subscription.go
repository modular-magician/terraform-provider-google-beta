// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package bigqueryanalyticshub

import (
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourceBigqueryAnalyticsHubSubscription() *schema.Resource {
	return &schema.Resource{
		Create: resourceBigqueryAnalyticsHubSubscriptionCreate,
		Read:   resourceBigqueryAnalyticsHubSubscriptionRead,
		Delete: resourceBigqueryAnalyticsHubSubscriptionDelete,

		Importer: &schema.ResourceImporter{
			State: resourceBigqueryAnalyticsHubSubscriptionImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"data_exchange_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the data exchange for subscription. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.`,
			},
			"destination_dataset": {
				Type:        schema.TypeList,
				Required:    true,
				ForceNew:    true,
				Description: `BigQuery destination dataset to create for the subscriber.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"dataset_reference": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `Required. A reference that identifies the destination dataset.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"dataset_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `Required. A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `Required. The ID of the project containing this dataset.`,
									},
								},
							},
						},
						"location": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.`,
						},
						"description": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `Optional. A user-friendly description of the dataset.`,
						},
						"friendly_name": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `Optional. A descriptive name for the dataset.`,
						},
					},
				},
			},
			"listing_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the listing for subscription. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.`,
			},
			"location": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Description: `The geographic location where the transfer config should reside.
Examples: US, EU, asia-northeast1. The default value is US.`,
				Default: "US",
			},
			"creation_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Output only. Timestamp when the subscription was created.

A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
			},
			"data_exchange": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/US/dataExchanges/456`,
			},
			"last_modify_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Output only. Timestamp when the subscription was last modified.

A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
			},
			"linked_dataset_map": {
				Type:     schema.TypeSet,
				Computed: true,
				Description: `Output only. Map of listing resource names to associated linked resource, e.g. projects/123/locations/US/dataExchanges/456/listings/789 -> projects/123/datasets/my_dataset

For listing-level subscriptions, this is a map of size 1. Only contains values if state == STATE_ACTIVE.

An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:     schema.TypeString,
							Required: true,
						},
						"linked_dataset": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset`,
						},
					},
				},
			},
			"listing": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Resource name of the source Listing. e.g. projects/123/locations/US/dataExchanges/456/listings/789`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The resource name of the subscription. e.g. projects/myproject/locations/US/subscriptions/123.`,
			},
			"organization_display_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Display name of the project of this subscription.`,
			},
			"organization_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Organization of the project this subscription belongs to.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Current state of the subscription.`,
			},
			"subscriber_contact": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Email of the subscriber.`,
			},
			"subscription_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `ID of the created subscription`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceBigqueryAnalyticsHubSubscriptionCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	destinationDatasetProp, err := expandBigqueryAnalyticsHubSubscriptionDestinationDataset(d.Get("destination_dataset"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("destination_dataset"); !tpgresource.IsEmptyValue(reflect.ValueOf(destinationDatasetProp)) && (ok || !reflect.DeepEqual(v, destinationDatasetProp)) {
		obj["destinationDataset"] = destinationDatasetProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}:subscribe")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Subscription: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Subscription: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating Subscription: %s", err)
	}
	if err := d.Set("name", flattenBigqueryAnalyticsHubSubscriptionName(res["name"], d, config)); err != nil {
		return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// `name` is autogenerated from the api so needs to be set post-create
	subscription, ok := res["subscription"]
	if !ok {
		return fmt.Errorf("Create response didn't contain subscription object. Create may not have succeeded.")
	}

	subscriptionMap := subscription.(map[string]interface{})
	name, ok := subscriptionMap["name"].(string)
	if !ok {
		return fmt.Errorf("Subscription object didn't contain name. Create may not have succeeded.")
	}
	if err := d.Set("name", name); err != nil {
		return fmt.Errorf("Error setting name: %s, %s", err, name)
	}

	if err := d.Set("subscription_id", tpgresource.GetResourceNameFromSelfLink(name)); err != nil {
		return fmt.Errorf("Error setting subscription_id: %s, %s", err, name)
	}

	// Store the ID now that we have set the computed name
	id, err = tpgresource.ReplaceVars(d, config, "{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Subscription %q: %#v", d.Id(), res)

	return resourceBigqueryAnalyticsHubSubscriptionRead(d, meta)
}

func resourceBigqueryAnalyticsHubSubscriptionRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Subscription: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("BigqueryAnalyticsHubSubscription %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}

	if err := d.Set("name", flattenBigqueryAnalyticsHubSubscriptionName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("creation_time", flattenBigqueryAnalyticsHubSubscriptionCreationTime(res["creationTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("last_modify_time", flattenBigqueryAnalyticsHubSubscriptionLastModifyTime(res["lastModifyTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("organization_id", flattenBigqueryAnalyticsHubSubscriptionOrganizationId(res["organizationId"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("organization_display_name", flattenBigqueryAnalyticsHubSubscriptionOrganizationDisplayName(res["organizationDisplayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("state", flattenBigqueryAnalyticsHubSubscriptionState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("linked_dataset_map", flattenBigqueryAnalyticsHubSubscriptionLinkedDatasetMap(res["linkedDatasetMap"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("subscriber_contact", flattenBigqueryAnalyticsHubSubscriptionSubscriberContact(res["subscriberContact"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("listing", flattenBigqueryAnalyticsHubSubscriptionListing(res["listing"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}
	if err := d.Set("data_exchange", flattenBigqueryAnalyticsHubSubscriptionDataExchange(res["dataExchange"], d, config)); err != nil {
		return fmt.Errorf("Error reading Subscription: %s", err)
	}

	return nil
}

func resourceBigqueryAnalyticsHubSubscriptionDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Subscription: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting Subscription %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Subscription")
	}

	log.Printf("[DEBUG] Finished deleting Subscription %q: %#v", d.Id(), res)
	return nil
}

func resourceBigqueryAnalyticsHubSubscriptionImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/subscriptions/(?P<subscription_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<subscription_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<subscription_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenBigqueryAnalyticsHubSubscriptionName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionCreationTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionLastModifyTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionOrganizationId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionOrganizationDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionLinkedDatasetMap(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"name":           k,
			"linked_dataset": flattenBigqueryAnalyticsHubSubscriptionLinkedDatasetMapLinkedDataset(original["linkedDataset"], d, config),
		})
	}
	return transformed
}
func flattenBigqueryAnalyticsHubSubscriptionLinkedDatasetMapLinkedDataset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionSubscriberContact(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionListing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubSubscriptionDataExchange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandBigqueryAnalyticsHubSubscriptionDestinationDataset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatasetReference, err := expandBigqueryAnalyticsHubSubscriptionDestinationDatasetDatasetReference(original["dataset_reference"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetReference); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetReference"] = transformedDatasetReference
	}

	transformedFriendlyName, err := expandBigqueryAnalyticsHubSubscriptionDestinationDatasetFriendlyName(original["friendly_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFriendlyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["friendlyName"] = transformedFriendlyName
	}

	transformedDescription, err := expandBigqueryAnalyticsHubSubscriptionDestinationDatasetDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedLocation, err := expandBigqueryAnalyticsHubSubscriptionDestinationDatasetLocation(original["location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["location"] = transformedLocation
	}

	return transformed, nil
}

func expandBigqueryAnalyticsHubSubscriptionDestinationDatasetDatasetReference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatasetId, err := expandBigqueryAnalyticsHubSubscriptionDestinationDatasetDatasetReferenceDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedProjectId, err := expandBigqueryAnalyticsHubSubscriptionDestinationDatasetDatasetReferenceProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	return transformed, nil
}

func expandBigqueryAnalyticsHubSubscriptionDestinationDatasetDatasetReferenceDatasetId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubSubscriptionDestinationDatasetDatasetReferenceProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubSubscriptionDestinationDatasetFriendlyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubSubscriptionDestinationDatasetDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubSubscriptionDestinationDatasetLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
