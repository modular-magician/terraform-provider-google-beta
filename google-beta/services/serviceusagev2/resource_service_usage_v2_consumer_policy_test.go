// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package serviceusagev2_test

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
)

func TestAccServiceUsageV2ConsumerPolicy_update(t *testing.T) {
	t.Parallel()

	testProject := acctest.BootstrapProject(t, "suv2", envvar.GetTestBillingAccountFromEnv(t), nil)
	context := map[string]interface{}{
		"random_suffix":   acctest.RandString(t, 10),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"project_id":      envvar.GetTestProjectFromEnv(),
		"test_project_id": testProject.ProjectId,
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time":   {},
			"null":   {},
		},
		Steps: []resource.TestStep{
			{
				Config:      testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependencyError(context),
				ExpectError: regexp.MustCompile("[\\s\\S]*There are additional services for which all necessary dependencies haven't been added[\\s\\S]*Please add these missing dependencies:[\\s\\S]*Added service: \\[\"services\\/compute\\.googleapis\\.com\"][\\s\\S]*If you don't want to validate dependencies, set validate_dependencies to false to override.*"),
			},
			{
				Config: testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependencyOK(context),
			},
			{
				Config:      testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeDepedencyError(context),
				ExpectError: regexp.MustCompile("[\\s\\S]*There are existing services in configuration which depend on the services to be removed\\. Please remove existing dependent services:[\\s\\S]*Removed service: \\[\"services\\/oslogin\\.googleapis\\.com\"][\\s\\S]*If you don't want to validate dependencies, set validate_dependencies to false to override.*"),
			},
			{
				Config: testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeDependencyOK(context),
			},
			{
				Config:      testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeCheckUsageError(context),
				ExpectError: regexp.MustCompile(".*has been used in the last 30 days or was enabled in the past 3 days\\. If you still wish to remove the service\\{s}, please set the check_usage_on_remove flag to false to proceed.*"),
			},
			{
				Config: testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependnecyValidationOff(context),
			},
			{
				Config:      testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependnecyValidationOnError(context),
				ExpectError: regexp.MustCompile("[\\s\\S]*There are additional services for which all necessary dependencies haven't been added[\\s\\S]*Please add these missing dependencies:[\\s\\S]*Added service: \\[\"services\\/compute\\.googleapis\\.com\"][\\s\\S]*If you don't want to validate dependencies, set validate_dependencies to false to override.*"),
			},
		},
	})
}
func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependencyError(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "null_resource" "previous" {}

# Wait delay after enabling APIs
resource "time_sleep" "wait_60s" {
  depends_on       = [null_resource.previous]
  create_duration  = "60s"
}


resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "projects/%{test_project_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
  depends_on       = [time_sleep.wait_60s]
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependencyOK(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "organizations/%{org_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com","services/oslogin.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeDepedencyError(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "organizations/%{org_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeDependencyOK(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "organizations/%{org_id}"
  name   = "default"
  enable_rules  {
    services = ["services/oslogin.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeCheckUsageError(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "organizations/%{org_id}"
  name   = "default"
  enable_rules  {
    services = []
  }
  validate_dependencies = true
  check_usage_on_remove = true
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependnecyValidationOff(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "organizations/%{org_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com"]
  }
  validate_dependencies = false
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependnecyValidationOnError(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "organizations/%{org_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}
