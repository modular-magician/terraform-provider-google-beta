// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package serviceusagev2_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccServiceUsageV2ConsumerPolicy_serviceusagev2ConsumerpolicyBasicExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"project_id":    envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time":   {},
		},
		CheckDestroy: testAccCheckServiceUsageV2ConsumerPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccServiceUsageV2ConsumerPolicy_serviceusagev2ConsumerpolicyBasicExample(context),
			},
			{
				ResourceName:            "google_service_usage_v2_consumer_policy.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"check_usage_on_remove", "enable_rules", "name", "parent", "validate_dependencies"},
			},
		},
	})
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2ConsumerpolicyBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"

}

resource "google_folder" "basic" {
  provider = google-beta
  parent       = "organizations/%{org_id}"
  display_name = "suv2%{random_suffix}"
  deletion_protection = false
}

# Wait delay after enabling APIs
resource "time_sleep" "wait_60s" {
  depends_on       = [google_folder.basic]
  create_duration  = "60s"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "folders/${google_folder.basic.folder_id}"
  name   = "default"
  enable_rules  {
    services = ["services/oslogin.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false

  depends_on = [time_sleep.wait_60s]
}
`, context)
}

func testAccCheckServiceUsageV2ConsumerPolicyDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_service_usage_v2_consumer_policy" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ServiceUsageV2BasePath}}{{parent}}/consumerPolicies/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ServiceUsageV2ConsumerPolicy still exists at %s", url)
			}
		}

		return nil
	}
}
