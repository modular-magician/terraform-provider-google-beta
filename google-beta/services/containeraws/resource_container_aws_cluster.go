// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package containeraws

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
)

func ResourceContainerAwsCluster() *schema.Resource {
	return &schema.Resource{
		Create: resourceContainerAwsClusterCreate,
		Read:   resourceContainerAwsClusterRead,
		Update: resourceContainerAwsClusterUpdate,
		Delete: resourceContainerAwsClusterDelete,

		Importer: &schema.ResourceImporter{
			State: resourceContainerAwsClusterImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"authorization": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Configuration related to the cluster RBAC settings.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"admin_users": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the 'cluster-admin' ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"username": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The name of the user, e.g. 'my-gcp-id@gmail.com'.`,
									},
								},
							},
						},
					},
				},
			},
			"aws_region": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.`,
			},
			"control_plane": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Configuration related to the cluster control plane.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"aws_services_authentication": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Authentication configuration for management of AWS resources.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"role_arn": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The Amazon Resource Name (ARN) of the role that the Anthos Multi-Cloud API will assume when managing AWS resources on your account.`,
									},
									"role_session_name": {
										Type:        schema.TypeString,
										Computed:    true,
										Optional:    true,
										Description: `Optional. An identifier for the assumed role session. When unspecified, it defaults to 'multicloud-service-agent'.`,
									},
								},
							},
						},
						"config_encryption": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `The ARN of the AWS KMS key used to encrypt cluster configuration.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"kms_key_arn": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The ARN of the AWS KMS key used to encrypt cluster configuration.`,
									},
								},
							},
						},
						"database_encryption": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `The ARN of the AWS KMS key used to encrypt cluster secrets.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"kms_key_arn": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `The ARN of the AWS KMS key used to encrypt cluster secrets.`,
									},
								},
							},
						},
						"iam_instance_profile": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The name of the AWS IAM instance pofile to assign to each control plane replica.`,
						},
						"subnet_ids": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `The list of subnets where control plane replicas will run. A replica will be provisioned on each subnet and up to three values can be provided. Each subnet must be in a different AWS Availability Zone (AZ).`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"version": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The Kubernetes version to run on control plane replicas (e.g. '1.19.10-gke.1000'). You can list all supported versions on a given Google Cloud region by calling .`,
						},
						"instance_placement": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							Description: `Details of placement information for an instance.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"tenancy": {
										Type:         schema.TypeString,
										Computed:     true,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"TENANCY_UNSPECIFIED", "DEFAULT", "DEDICATED", "HOST", ""}),
										Description:  `The tenancy for the instance. Possible values: ["TENANCY_UNSPECIFIED", "DEFAULT", "DEDICATED", "HOST"]`,
									},
								},
							},
						},
						"instance_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `Optional. The AWS instance type. When unspecified, it defaults to 'm5.large'.`,
						},
						"main_volume": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 8 GiB with the GP2 volume type.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"iops": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.`,
									},
									"kms_key_arn": {
										Type:        schema.TypeString,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.`,
									},
									"size_gib": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.`,
									},
									"throughput": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Optional. The throughput to provision for the volume, in MiB/s. Only valid if the volume type is GP3.`,
									},
									"volume_type": {
										Type:         schema.TypeString,
										Optional:     true,
										ForceNew:     true,
										ValidateFunc: verify.ValidateEnum([]string{"VOLUME_TYPE_UNSPECIFIED", "GP2", "GP3", ""}),
										Description:  `Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Default value: "GP2" Possible values: ["VOLUME_TYPE_UNSPECIFIED", "GP2", "GP3"]`,
										Default:      "GP2",
									},
								},
							},
						},
						"proxy_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Proxy configuration for outbound HTTP(S) traffic.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"secret_arn": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The ARN of the AWS Secret Manager secret that contains the HTTP(S) proxy configuration.`,
									},
									"secret_version": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The version string of the AWS Secret Manager secret that contains the HTTP(S) proxy configuration.`,
									},
								},
							},
						},
						"root_volume": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							Description: `Optional. Configuration related to the root volume provisioned for each control plane replica. Volumes will be provisioned in the availability zone associated with the corresponding subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"iops": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										Description: `Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.`,
									},
									"kms_key_arn": {
										Type:        schema.TypeString,
										Computed:    true,
										Optional:    true,
										Description: `Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.`,
									},
									"size_gib": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										Description: `Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.`,
									},
									"throughput": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										Description: `Optional. The throughput to provision for the volume, in MiB/s. Only valid if the volume type is GP3.`,
									},
									"volume_type": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: verify.ValidateEnum([]string{"VOLUME_TYPE_UNSPECIFIED", "GP2", "GP3", ""}),
										Description:  `Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Default value: "GP2" Possible values: ["VOLUME_TYPE_UNSPECIFIED", "GP2", "GP3"]`,
										Default:      "GP2",
									},
								},
							},
						},
						"security_group_ids": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Optional. The IDs of additional security groups to add to control plane replicas. The Anthos Multi-Cloud API will automatically create and manage security groups with the minimum rules needed for a functioning cluster.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"ssh_config": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Optional. SSH configuration for how to access the underlying control plane machines.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ec2_key_pair": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `The name of the EC2 key pair used to login into cluster machines.`,
									},
								},
							},
						},
						"tags": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: `Optional. A set of AWS resource tags to propagate to all underlying managed AWS resources. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.`,
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"fleet": {
				Type:        schema.TypeList,
				Required:    true,
				ForceNew:    true,
				Description: `Fleet configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"project": {
							Type:         schema.TypeString,
							Required:     true,
							ForceNew:     true,
							ValidateFunc: verify.ValidateRegexp(`^projects/[0-9]+$`),
							Description:  `The number of the Fleet host project where this cluster will be registered.`,
						},
						"membership": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the managed Hub Membership resource associated to this cluster. Membership names are formatted as projects/<project-number>/locations/global/membership/<cluster-id>.`,
						},
					},
				},
			},
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location for the resource`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of this resource.`,
			},
			"networking": {
				Type:        schema.TypeList,
				Required:    true,
				Description: `Cluster-wide networking configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"pod_address_cidr_blocks": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"service_address_cidr_blocks": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: `The VPC associated with the cluster. All component clusters (i.e. control plane and node pools) run on a single VPC. This field cannot be changed after creation.`,
						},
						"per_node_pool_sg_rules_disabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Disable the per node pool subnet security group rules on the control plane security group. When set to true, you must also provide one or more security groups that ensure node pools are able to send requests to the control plane on TCP/443 and TCP/8132. Failure to do so may result in unavailable node pools.`,
						},
					},
				},
			},
			"annotations": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: `Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.`,
			},
			"logging_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Logging configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"component_config": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							Description: `Configuration of the logging components.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enable_components": {
										Type:        schema.TypeList,
										Computed:    true,
										Optional:    true,
										Description: `Components of the logging configuration to be enabled. Possible values: ["SYSTEM_COMPONENTS", "WORKLOADS"]`,
										Elem: &schema.Schema{
											Type:         schema.TypeString,
											ValidateFunc: verify.ValidateEnum([]string{"SYSTEM_COMPONENTS", "WORKLOADS"}),
										},
									},
								},
							},
						},
					},
				},
			},
			"monitoring_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Monitoring configuration.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"managed_prometheus_config": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							Description: `Configuration of the Google Cloud Managed Service for Prometheus.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Computed:    true,
										Optional:    true,
										Description: `Configuration of the enable Managed Collection.`,
									},
								},
							},
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The time at which this cluster was created.`,
			},
			"endpoint": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The endpoint of the cluster's API server.`,
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.`,
			},
			"reconciling": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Output only. If set, there are currently changes in flight to the cluster.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The current state of the cluster.`,
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. A globally unique identifier for the cluster.`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. The time at which this cluster was last updated.`,
			},
			"workload_identity_config": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Output only. Workload Identity settings.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"identity_provider": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The ID of the OIDC Identity Provider (IdP) associated to the Workload Identity Pool.`,
						},
						"issuer_uri": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The OIDC issuer URL for this cluster.`,
						},
						"workload_pool": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `The Workload Identity Pool associated to the cluster.`,
						},
					},
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceContainerAwsClusterCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandContainerAwsClusterName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	descriptionProp, err := expandContainerAwsClusterDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	networkingProp, err := expandContainerAwsClusterNetworking(d.Get("networking"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("networking"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkingProp)) && (ok || !reflect.DeepEqual(v, networkingProp)) {
		obj["networking"] = networkingProp
	}
	awsRegionProp, err := expandContainerAwsClusterAwsRegion(d.Get("aws_region"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("aws_region"); !tpgresource.IsEmptyValue(reflect.ValueOf(awsRegionProp)) && (ok || !reflect.DeepEqual(v, awsRegionProp)) {
		obj["awsRegion"] = awsRegionProp
	}
	controlPlaneProp, err := expandContainerAwsClusterControlPlane(d.Get("control_plane"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("control_plane"); !tpgresource.IsEmptyValue(reflect.ValueOf(controlPlaneProp)) && (ok || !reflect.DeepEqual(v, controlPlaneProp)) {
		obj["controlPlane"] = controlPlaneProp
	}
	authorizationProp, err := expandContainerAwsClusterAuthorization(d.Get("authorization"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("authorization"); !tpgresource.IsEmptyValue(reflect.ValueOf(authorizationProp)) && (ok || !reflect.DeepEqual(v, authorizationProp)) {
		obj["authorization"] = authorizationProp
	}
	annotationsProp, err := expandContainerAwsClusterAnnotations(d.Get("annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	fleetProp, err := expandContainerAwsClusterFleet(d.Get("fleet"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("fleet"); !tpgresource.IsEmptyValue(reflect.ValueOf(fleetProp)) && (ok || !reflect.DeepEqual(v, fleetProp)) {
		obj["fleet"] = fleetProp
	}
	loggingConfigProp, err := expandContainerAwsClusterLoggingConfig(d.Get("logging_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("logging_config"); ok || !reflect.DeepEqual(v, loggingConfigProp) {
		obj["loggingConfig"] = loggingConfigProp
	}
	monitoringConfigProp, err := expandContainerAwsClusterMonitoringConfig(d.Get("monitoring_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("monitoring_config"); ok || !reflect.DeepEqual(v, monitoringConfigProp) {
		obj["monitoringConfig"] = monitoringConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ContainerAwsBasePath}}projects/{{project}}/locations/{{location}}/awsClusters?awsClusterId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Cluster: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Cluster: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating Cluster: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/awsClusters/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = ContainerAwsOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating Cluster", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create Cluster: %s", err)
	}

	if err := d.Set("name", flattenContainerAwsClusterName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/awsClusters/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Cluster %q: %#v", d.Id(), res)

	return resourceContainerAwsClusterRead(d, meta)
}

func resourceContainerAwsClusterRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ContainerAwsBasePath}}projects/{{project}}/locations/{{location}}/awsClusters/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Cluster: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ContainerAwsCluster %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}

	if err := d.Set("name", flattenContainerAwsClusterName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("description", flattenContainerAwsClusterDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("networking", flattenContainerAwsClusterNetworking(res["networking"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("aws_region", flattenContainerAwsClusterAwsRegion(res["awsRegion"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("control_plane", flattenContainerAwsClusterControlPlane(res["controlPlane"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("authorization", flattenContainerAwsClusterAuthorization(res["authorization"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("state", flattenContainerAwsClusterState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("endpoint", flattenContainerAwsClusterEndpoint(res["endpoint"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("uid", flattenContainerAwsClusterUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("reconciling", flattenContainerAwsClusterReconciling(res["reconciling"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("create_time", flattenContainerAwsClusterCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("update_time", flattenContainerAwsClusterUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("etag", flattenContainerAwsClusterEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("annotations", flattenContainerAwsClusterAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("workload_identity_config", flattenContainerAwsClusterWorkloadIdentityConfig(res["workloadIdentityConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("fleet", flattenContainerAwsClusterFleet(res["fleet"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("logging_config", flattenContainerAwsClusterLoggingConfig(res["loggingConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}
	if err := d.Set("monitoring_config", flattenContainerAwsClusterMonitoringConfig(res["monitoringConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading Cluster: %s", err)
	}

	return nil
}

func resourceContainerAwsClusterUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Cluster: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandContainerAwsClusterDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	networkingProp, err := expandContainerAwsClusterNetworking(d.Get("networking"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("networking"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, networkingProp)) {
		obj["networking"] = networkingProp
	}
	controlPlaneProp, err := expandContainerAwsClusterControlPlane(d.Get("control_plane"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("control_plane"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, controlPlaneProp)) {
		obj["controlPlane"] = controlPlaneProp
	}
	authorizationProp, err := expandContainerAwsClusterAuthorization(d.Get("authorization"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("authorization"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, authorizationProp)) {
		obj["authorization"] = authorizationProp
	}
	annotationsProp, err := expandContainerAwsClusterAnnotations(d.Get("annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	loggingConfigProp, err := expandContainerAwsClusterLoggingConfig(d.Get("logging_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("logging_config"); ok || !reflect.DeepEqual(v, loggingConfigProp) {
		obj["loggingConfig"] = loggingConfigProp
	}
	monitoringConfigProp, err := expandContainerAwsClusterMonitoringConfig(d.Get("monitoring_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("monitoring_config"); ok || !reflect.DeepEqual(v, monitoringConfigProp) {
		obj["monitoringConfig"] = monitoringConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ContainerAwsBasePath}}projects/{{project}}/locations/{{location}}/awsClusters/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Cluster %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("networking") {
		updateMask = append(updateMask, "networking")
	}

	if d.HasChange("control_plane") {
		updateMask = append(updateMask, "controlPlane")
	}

	if d.HasChange("authorization") {
		updateMask = append(updateMask, "authorization")
	}

	if d.HasChange("annotations") {
		updateMask = append(updateMask, "annotations")
	}

	if d.HasChange("logging_config") {
		updateMask = append(updateMask, "loggingConfig")
	}

	if d.HasChange("monitoring_config") {
		updateMask = append(updateMask, "monitoringConfig")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}
	// The generated code sets the wrong masks for the following fields.
	newUpdateMask := []string{}
	if d.HasChange("authorization") {
		newUpdateMask = append(newUpdateMask, "authorization.admin_users")
	}
	if d.HasChange("logging_config") {
		newUpdateMask = append(newUpdateMask, "logging_config.component_config.enable_components")
	}
	if d.HasChange("monitoring_config") {
		newUpdateMask = append(newUpdateMask, "monitoring_config.managed_prometheus_config.enabled")
	}
	if d.HasChange("networking") {
		newUpdateMask = append(newUpdateMask, "networking.per_node_pool_sg_rules_disabled")
	}
	if d.HasChange("control_plane") {
		fields := map[string]string{
			"control_plane.0.aws_services_authentication.0.role_arn":          "control_plane.aws_services_authentication.role_arn",
			"control_plane.0.aws_services_authentication.0.role_session_name": "control_plane.aws_services_authentication.role_session_name",
			"control_plane.0.config_encryption":                               "control_plane.config_encryption.kms_key_arn",
			"control_plane.0.iam_instance_profile":                            "control_plane.iam_instance_profile",
			"control_plane.0.instance_placement.0.tenancy":                    "control_plane.instance_placement.tenancy",
			"control_plane.0.instance_type":                                   "control_plane.instance_type",
			"control_plane.0.proxy_config":                                    "control_plane.proxy_config",
			"control_plane.0.root_volume.0.size_gib":                          "control_plane.root_volume.size_gib",
			"control_plane.0.root_volume.0.volume_type":                       "control_plane.root_volume.volume_type",
			"control_plane.0.root_volume.0.iops":                              "control_plane.root_volume.iops",
			"control_plane.0.root_volume.0.throughput":                        "control_plane.root_volume.throughput",
			"control_plane.0.root_volume.0.kms_key_arn":                       "control_plane.root_volume.kms_key_arn",
			"control_plane.0.security_group_ids":                              "control_plane.security_group_ids",
			"control_plane.0.ssh_config":                                      "control_plane.ssh_config",
			"control_plane.0.tags":                                            "control_plane.tags",
			"control_plane.0.version":                                         "control_plane.version",
		}
		for k, v := range fields {
			if d.HasChange(k) {
				newUpdateMask = append(newUpdateMask, v)
			}
		}
	}
	// Pull out any other set fields from the generated mask.
	for _, mask := range updateMask {
		if mask == "authorization" || mask == "loggingConfig" || mask == "monitoringConfig" || mask == "networking" || mask == "controlPlane" {
			continue
		}
		newUpdateMask = append(newUpdateMask, mask)
	}
	// Overwrite the previously set mask.
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(newUpdateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})

	if err != nil {
		return fmt.Errorf("Error updating Cluster %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating Cluster %q: %#v", d.Id(), res)
	}

	err = ContainerAwsOperationWaitTime(
		config, res, project, "Updating Cluster", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceContainerAwsClusterRead(d, meta)
}

func resourceContainerAwsClusterDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Cluster: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ContainerAwsBasePath}}projects/{{project}}/locations/{{location}}/awsClusters/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting Cluster %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Cluster")
	}

	err = ContainerAwsOperationWaitTime(
		config, res, project, "Deleting Cluster", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting Cluster %q: %#v", d.Id(), res)
	return nil
}

func resourceContainerAwsClusterImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/awsClusters/(?P<name>[^/]+)",
		"(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)",
		"(?P<location>[^/]+)/(?P<name>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/awsClusters/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenContainerAwsClusterName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenContainerAwsClusterDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterNetworking(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["vpc_id"] =
		flattenContainerAwsClusterNetworkingVpcId(original["vpcId"], d, config)
	transformed["pod_address_cidr_blocks"] =
		flattenContainerAwsClusterNetworkingPodAddressCidrBlocks(original["podAddressCidrBlocks"], d, config)
	transformed["service_address_cidr_blocks"] =
		flattenContainerAwsClusterNetworkingServiceAddressCidrBlocks(original["serviceAddressCidrBlocks"], d, config)
	transformed["per_node_pool_sg_rules_disabled"] =
		flattenContainerAwsClusterNetworkingPerNodePoolSgRulesDisabled(original["perNodePoolSgRulesDisabled"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterNetworkingVpcId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterNetworkingPodAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterNetworkingServiceAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterNetworkingPerNodePoolSgRulesDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterAwsRegion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlane(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["version"] =
		flattenContainerAwsClusterControlPlaneVersion(original["version"], d, config)
	transformed["instance_type"] =
		flattenContainerAwsClusterControlPlaneInstanceType(original["instanceType"], d, config)
	transformed["ssh_config"] =
		flattenContainerAwsClusterControlPlaneSshConfig(original["sshConfig"], d, config)
	transformed["subnet_ids"] =
		flattenContainerAwsClusterControlPlaneSubnetIds(original["subnetIds"], d, config)
	transformed["config_encryption"] =
		flattenContainerAwsClusterControlPlaneConfigEncryption(original["configEncryption"], d, config)
	transformed["security_group_ids"] =
		flattenContainerAwsClusterControlPlaneSecurityGroupIds(original["securityGroupIds"], d, config)
	transformed["iam_instance_profile"] =
		flattenContainerAwsClusterControlPlaneIamInstanceProfile(original["iamInstanceProfile"], d, config)
	transformed["root_volume"] =
		flattenContainerAwsClusterControlPlaneRootVolume(original["rootVolume"], d, config)
	transformed["main_volume"] =
		flattenContainerAwsClusterControlPlaneMainVolume(original["mainVolume"], d, config)
	transformed["database_encryption"] =
		flattenContainerAwsClusterControlPlaneDatabaseEncryption(original["databaseEncryption"], d, config)
	transformed["tags"] =
		flattenContainerAwsClusterControlPlaneTags(original["tags"], d, config)
	transformed["aws_services_authentication"] =
		flattenContainerAwsClusterControlPlaneAwsServicesAuthentication(original["awsServicesAuthentication"], d, config)
	transformed["proxy_config"] =
		flattenContainerAwsClusterControlPlaneProxyConfig(original["proxyConfig"], d, config)
	transformed["instance_placement"] =
		flattenContainerAwsClusterControlPlaneInstancePlacement(original["instancePlacement"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneInstanceType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneSshConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["ec2_key_pair"] =
		flattenContainerAwsClusterControlPlaneSshConfigEc2KeyPair(original["ec2KeyPair"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneSshConfigEc2KeyPair(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneSubnetIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneConfigEncryption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["kms_key_arn"] =
		flattenContainerAwsClusterControlPlaneConfigEncryptionKmsKeyArn(original["kmsKeyArn"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneConfigEncryptionKmsKeyArn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneSecurityGroupIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneIamInstanceProfile(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneRootVolume(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["size_gib"] =
		flattenContainerAwsClusterControlPlaneRootVolumeSizeGib(original["sizeGib"], d, config)
	transformed["volume_type"] =
		flattenContainerAwsClusterControlPlaneRootVolumeVolumeType(original["volumeType"], d, config)
	transformed["iops"] =
		flattenContainerAwsClusterControlPlaneRootVolumeIops(original["iops"], d, config)
	transformed["throughput"] =
		flattenContainerAwsClusterControlPlaneRootVolumeThroughput(original["throughput"], d, config)
	transformed["kms_key_arn"] =
		flattenContainerAwsClusterControlPlaneRootVolumeKmsKeyArn(original["kmsKeyArn"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneRootVolumeSizeGib(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenContainerAwsClusterControlPlaneRootVolumeVolumeType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneRootVolumeIops(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenContainerAwsClusterControlPlaneRootVolumeThroughput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenContainerAwsClusterControlPlaneRootVolumeKmsKeyArn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneMainVolume(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["size_gib"] =
		flattenContainerAwsClusterControlPlaneMainVolumeSizeGib(original["sizeGib"], d, config)
	transformed["volume_type"] =
		flattenContainerAwsClusterControlPlaneMainVolumeVolumeType(original["volumeType"], d, config)
	transformed["iops"] =
		flattenContainerAwsClusterControlPlaneMainVolumeIops(original["iops"], d, config)
	transformed["throughput"] =
		flattenContainerAwsClusterControlPlaneMainVolumeThroughput(original["throughput"], d, config)
	transformed["kms_key_arn"] =
		flattenContainerAwsClusterControlPlaneMainVolumeKmsKeyArn(original["kmsKeyArn"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneMainVolumeSizeGib(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenContainerAwsClusterControlPlaneMainVolumeVolumeType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneMainVolumeIops(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenContainerAwsClusterControlPlaneMainVolumeThroughput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenContainerAwsClusterControlPlaneMainVolumeKmsKeyArn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneDatabaseEncryption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["kms_key_arn"] =
		flattenContainerAwsClusterControlPlaneDatabaseEncryptionKmsKeyArn(original["kmsKeyArn"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneDatabaseEncryptionKmsKeyArn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneTags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneAwsServicesAuthentication(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["role_arn"] =
		flattenContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleArn(original["roleArn"], d, config)
	transformed["role_session_name"] =
		flattenContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleSessionName(original["roleSessionName"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleArn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleSessionName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneProxyConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret_arn"] =
		flattenContainerAwsClusterControlPlaneProxyConfigSecretArn(original["secretArn"], d, config)
	transformed["secret_version"] =
		flattenContainerAwsClusterControlPlaneProxyConfigSecretVersion(original["secretVersion"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneProxyConfigSecretArn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneProxyConfigSecretVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterControlPlaneInstancePlacement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["tenancy"] =
		flattenContainerAwsClusterControlPlaneInstancePlacementTenancy(original["tenancy"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterControlPlaneInstancePlacementTenancy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterAuthorization(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["admin_users"] =
		flattenContainerAwsClusterAuthorizationAdminUsers(original["adminUsers"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterAuthorizationAdminUsers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"username": flattenContainerAwsClusterAuthorizationAdminUsersUsername(original["username"], d, config),
		})
	}
	return transformed
}
func flattenContainerAwsClusterAuthorizationAdminUsersUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterReconciling(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterWorkloadIdentityConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["issuer_uri"] =
		flattenContainerAwsClusterWorkloadIdentityConfigIssuerUri(original["issuerUri"], d, config)
	transformed["workload_pool"] =
		flattenContainerAwsClusterWorkloadIdentityConfigWorkloadPool(original["workloadPool"], d, config)
	transformed["identity_provider"] =
		flattenContainerAwsClusterWorkloadIdentityConfigIdentityProvider(original["identityProvider"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterWorkloadIdentityConfigIssuerUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterWorkloadIdentityConfigWorkloadPool(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterWorkloadIdentityConfigIdentityProvider(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterFleet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["project"] =
		flattenContainerAwsClusterFleetProject(original["project"], d, config)
	transformed["membership"] =
		flattenContainerAwsClusterFleetMembership(original["membership"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterFleetProject(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterFleetMembership(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterLoggingConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["component_config"] =
		flattenContainerAwsClusterLoggingConfigComponentConfig(original["componentConfig"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterLoggingConfigComponentConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["enable_components"] =
		flattenContainerAwsClusterLoggingConfigComponentConfigEnableComponents(original["enableComponents"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterLoggingConfigComponentConfigEnableComponents(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAwsClusterMonitoringConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["managed_prometheus_config"] =
		flattenContainerAwsClusterMonitoringConfigManagedPrometheusConfig(original["managedPrometheusConfig"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterMonitoringConfigManagedPrometheusConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenContainerAwsClusterMonitoringConfigManagedPrometheusConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAwsClusterMonitoringConfigManagedPrometheusConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandContainerAwsClusterName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterNetworking(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedVpcId, err := expandContainerAwsClusterNetworkingVpcId(original["vpc_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVpcId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vpcId"] = transformedVpcId
	}

	transformedPodAddressCidrBlocks, err := expandContainerAwsClusterNetworkingPodAddressCidrBlocks(original["pod_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPodAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["podAddressCidrBlocks"] = transformedPodAddressCidrBlocks
	}

	transformedServiceAddressCidrBlocks, err := expandContainerAwsClusterNetworkingServiceAddressCidrBlocks(original["service_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAddressCidrBlocks"] = transformedServiceAddressCidrBlocks
	}

	transformedPerNodePoolSgRulesDisabled, err := expandContainerAwsClusterNetworkingPerNodePoolSgRulesDisabled(original["per_node_pool_sg_rules_disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPerNodePoolSgRulesDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["perNodePoolSgRulesDisabled"] = transformedPerNodePoolSgRulesDisabled
	}

	return transformed, nil
}

func expandContainerAwsClusterNetworkingVpcId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterNetworkingPodAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterNetworkingServiceAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterNetworkingPerNodePoolSgRulesDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterAwsRegion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlane(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedVersion, err := expandContainerAwsClusterControlPlaneVersion(original["version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["version"] = transformedVersion
	}

	transformedInstanceType, err := expandContainerAwsClusterControlPlaneInstanceType(original["instance_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstanceType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instanceType"] = transformedInstanceType
	}

	transformedSshConfig, err := expandContainerAwsClusterControlPlaneSshConfig(original["ssh_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSshConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sshConfig"] = transformedSshConfig
	}

	transformedSubnetIds, err := expandContainerAwsClusterControlPlaneSubnetIds(original["subnet_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSubnetIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["subnetIds"] = transformedSubnetIds
	}

	transformedConfigEncryption, err := expandContainerAwsClusterControlPlaneConfigEncryption(original["config_encryption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfigEncryption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["configEncryption"] = transformedConfigEncryption
	}

	transformedSecurityGroupIds, err := expandContainerAwsClusterControlPlaneSecurityGroupIds(original["security_group_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecurityGroupIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["securityGroupIds"] = transformedSecurityGroupIds
	}

	transformedIamInstanceProfile, err := expandContainerAwsClusterControlPlaneIamInstanceProfile(original["iam_instance_profile"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIamInstanceProfile); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["iamInstanceProfile"] = transformedIamInstanceProfile
	}

	transformedRootVolume, err := expandContainerAwsClusterControlPlaneRootVolume(original["root_volume"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRootVolume); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rootVolume"] = transformedRootVolume
	}

	transformedMainVolume, err := expandContainerAwsClusterControlPlaneMainVolume(original["main_volume"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMainVolume); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mainVolume"] = transformedMainVolume
	}

	transformedDatabaseEncryption, err := expandContainerAwsClusterControlPlaneDatabaseEncryption(original["database_encryption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseEncryption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseEncryption"] = transformedDatabaseEncryption
	}

	transformedTags, err := expandContainerAwsClusterControlPlaneTags(original["tags"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTags); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tags"] = transformedTags
	}

	transformedAwsServicesAuthentication, err := expandContainerAwsClusterControlPlaneAwsServicesAuthentication(original["aws_services_authentication"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAwsServicesAuthentication); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["awsServicesAuthentication"] = transformedAwsServicesAuthentication
	}

	transformedProxyConfig, err := expandContainerAwsClusterControlPlaneProxyConfig(original["proxy_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProxyConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["proxyConfig"] = transformedProxyConfig
	}

	transformedInstancePlacement, err := expandContainerAwsClusterControlPlaneInstancePlacement(original["instance_placement"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstancePlacement); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instancePlacement"] = transformedInstancePlacement
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneInstanceType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneSshConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEc2KeyPair, err := expandContainerAwsClusterControlPlaneSshConfigEc2KeyPair(original["ec2_key_pair"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEc2KeyPair); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ec2KeyPair"] = transformedEc2KeyPair
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneSshConfigEc2KeyPair(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneSubnetIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneConfigEncryption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKeyArn, err := expandContainerAwsClusterControlPlaneConfigEncryptionKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneConfigEncryptionKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneSecurityGroupIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneIamInstanceProfile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolume(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSizeGib, err := expandContainerAwsClusterControlPlaneRootVolumeSizeGib(original["size_gib"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSizeGib); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sizeGib"] = transformedSizeGib
	}

	transformedVolumeType, err := expandContainerAwsClusterControlPlaneRootVolumeVolumeType(original["volume_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeType"] = transformedVolumeType
	}

	transformedIops, err := expandContainerAwsClusterControlPlaneRootVolumeIops(original["iops"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIops); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["iops"] = transformedIops
	}

	transformedThroughput, err := expandContainerAwsClusterControlPlaneRootVolumeThroughput(original["throughput"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedThroughput); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["throughput"] = transformedThroughput
	}

	transformedKmsKeyArn, err := expandContainerAwsClusterControlPlaneRootVolumeKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeSizeGib(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeVolumeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeIops(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeThroughput(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolume(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSizeGib, err := expandContainerAwsClusterControlPlaneMainVolumeSizeGib(original["size_gib"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSizeGib); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sizeGib"] = transformedSizeGib
	}

	transformedVolumeType, err := expandContainerAwsClusterControlPlaneMainVolumeVolumeType(original["volume_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeType"] = transformedVolumeType
	}

	transformedIops, err := expandContainerAwsClusterControlPlaneMainVolumeIops(original["iops"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIops); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["iops"] = transformedIops
	}

	transformedThroughput, err := expandContainerAwsClusterControlPlaneMainVolumeThroughput(original["throughput"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedThroughput); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["throughput"] = transformedThroughput
	}

	transformedKmsKeyArn, err := expandContainerAwsClusterControlPlaneMainVolumeKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeSizeGib(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeVolumeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeIops(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeThroughput(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneDatabaseEncryption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKeyArn, err := expandContainerAwsClusterControlPlaneDatabaseEncryptionKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneDatabaseEncryptionKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneTags(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandContainerAwsClusterControlPlaneAwsServicesAuthentication(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRoleArn, err := expandContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleArn(original["role_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRoleArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["roleArn"] = transformedRoleArn
	}

	transformedRoleSessionName, err := expandContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleSessionName(original["role_session_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRoleSessionName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["roleSessionName"] = transformedRoleSessionName
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleSessionName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneProxyConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretArn, err := expandContainerAwsClusterControlPlaneProxyConfigSecretArn(original["secret_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretArn"] = transformedSecretArn
	}

	transformedSecretVersion, err := expandContainerAwsClusterControlPlaneProxyConfigSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneProxyConfigSecretArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneProxyConfigSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneInstancePlacement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTenancy, err := expandContainerAwsClusterControlPlaneInstancePlacementTenancy(original["tenancy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTenancy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tenancy"] = transformedTenancy
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneInstancePlacementTenancy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterAuthorization(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdminUsers, err := expandContainerAwsClusterAuthorizationAdminUsers(original["admin_users"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdminUsers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["adminUsers"] = transformedAdminUsers
	}

	return transformed, nil
}

func expandContainerAwsClusterAuthorizationAdminUsers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedUsername, err := expandContainerAwsClusterAuthorizationAdminUsersUsername(original["username"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["username"] = transformedUsername
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandContainerAwsClusterAuthorizationAdminUsersUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandContainerAwsClusterFleet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProject, err := expandContainerAwsClusterFleetProject(original["project"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProject); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["project"] = transformedProject
	}

	transformedMembership, err := expandContainerAwsClusterFleetMembership(original["membership"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMembership); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["membership"] = transformedMembership
	}

	return transformed, nil
}

func expandContainerAwsClusterFleetProject(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterFleetMembership(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterLoggingConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedComponentConfig, err := expandContainerAwsClusterLoggingConfigComponentConfig(original["component_config"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["componentConfig"] = transformedComponentConfig
	}

	return transformed, nil
}

func expandContainerAwsClusterLoggingConfigComponentConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableComponents, err := expandContainerAwsClusterLoggingConfigComponentConfigEnableComponents(original["enable_components"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enableComponents"] = transformedEnableComponents
	}

	return transformed, nil
}

func expandContainerAwsClusterLoggingConfigComponentConfigEnableComponents(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterMonitoringConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedManagedPrometheusConfig, err := expandContainerAwsClusterMonitoringConfigManagedPrometheusConfig(original["managed_prometheus_config"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["managedPrometheusConfig"] = transformedManagedPrometheusConfig
	}

	return transformed, nil
}

func expandContainerAwsClusterMonitoringConfigManagedPrometheusConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandContainerAwsClusterMonitoringConfigManagedPrometheusConfigEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandContainerAwsClusterMonitoringConfigManagedPrometheusConfigEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
