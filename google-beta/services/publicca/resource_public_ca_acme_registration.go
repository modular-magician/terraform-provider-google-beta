// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package publicca

import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourcePublicCAAcmeRegistration() *schema.Resource {
	return &schema.Resource{
		Create: resourcePublicCAAcmeRegistrationCreate,
		Read:   resourcePublicCAAcmeRegistrationRead,
		Delete: resourcePublicCAAcmeRegistrationDelete,

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"eab_hmac_key": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: `Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
when the ExternalAccountKey is created.`,
				Sensitive: true,
			},
			"eab_key_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.`,
				Sensitive:   true,
			},
			"email": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Email address used for registering an account with ACME.`,
			},
			"private_key_pem": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Private key in PEM format, used for registering an account with ACME. Currently only RSA is supported.`,
				Sensitive:   true,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `Name of the ACME registration, this is just used for resource identity.`,
			},
			"account_uri": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Registered ACME account URI.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourcePublicCAAcmeRegistrationCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	email, ok := d.GetOk("email")
	if !ok {
		return fmt.Errorf("error registering ACME account, email address is required")
	}
	privateKeyPem, _ := d.GetOk("private_key_pem")
	basePath, err := tpgresource.ReplaceVars(d, config, "{{PublicCABasePath}}")
	if err != nil {
		return err
	}
	isStagingEnv := strings.Contains(basePath, "preprod-")
	eabKeyId, ok := d.GetOk("eab_key_id")
	if !ok {
		return fmt.Errorf("error registering ACME account, registration server is required")
	}
	eabHmacKeyUrlEncoded, ok := d.GetOk("eab_hmac_key")
	if !ok {
		return fmt.Errorf("error registering ACME account, registration server is required")
	}

	log.Printf("[DEBUG] Registering ACME account")
	accountUri, err := createNewAccountUsingEab(email.(string), isStagingEnv, privateKeyPem.(string), eabKeyId.(string), eabHmacKeyUrlEncoded.(string))
	if err != nil {
		return fmt.Errorf("couldn't register the account: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/global/acmeRegistrations/{{name}}")
	if err != nil {
		return fmt.Errorf("error constructing id: %s", err)
	}
	d.SetId(id)
	log.Printf("[DEBUG] Finished registering ACME account: %s", accountUri)
	d.Set("account_uri", accountUri)
	return nil
}

func resourcePublicCAAcmeRegistrationRead(d *schema.ResourceData, meta interface{}) error {
	// This resource could not be read from the API.
	return nil
}

func resourcePublicCAAcmeRegistrationDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	email, ok := d.GetOk("email")
	if !ok {
		return fmt.Errorf("error deactivating ACME account, email address is required")
	}
	privateKeyPem, _ := d.GetOk("private_key_pem")
	accountUri, ok := d.GetOk("account_uri")
	if !ok {
		return fmt.Errorf("error deactivating ACME account, account URI is required.")
	}
	log.Printf("[DEBUG] Deactivating ACME account: %s userAgent: %s", accountUri, userAgent)
	err = deactivateAccount(accountUri.(string), email.(string), privateKeyPem.(string))
	if err != nil {
		return fmt.Errorf("error occurred deactivating the account: %s", err)
	}
	d.Set("account_uri", "")
	return nil
}

func flattenPublicCAAcmeRegistrationEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPublicCAAcmeRegistrationPrivateKeyPem(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPublicCAAcmeRegistrationEabKeyId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPublicCAAcmeRegistrationEabHmacKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPublicCAAcmeRegistrationAccountUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPublicCAAcmeRegistrationName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandPublicCAAcmeRegistrationEmail(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPublicCAAcmeRegistrationPrivateKeyPem(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPublicCAAcmeRegistrationEabKeyId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPublicCAAcmeRegistrationEabHmacKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPublicCAAcmeRegistrationName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
