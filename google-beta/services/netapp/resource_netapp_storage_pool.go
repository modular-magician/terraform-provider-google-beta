// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package netapp

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
)

func ResourceNetappstoragePool() *schema.Resource {
	return &schema.Resource{
		Create: resourceNetappstoragePoolCreate,
		Read:   resourceNetappstoragePoolRead,
		Update: resourceNetappstoragePoolUpdate,
		Delete: resourceNetappstoragePoolDelete,

		Importer: &schema.ResourceImporter{
			State: resourceNetappstoragePoolImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `LOCATION_DESCRIPTION`,
			},
			"storage_pool_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The unique name of the storage pool '[_a-zA-Z0-9][-_.a-zA-Z0-9]*'.`,
			},
			"active_directory": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the Active Directory to be used for creating a SMB volume.`,
			},
			"capacity_gib": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Capacity in GIB of the pool`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Description of the storage pool`,
			},
			"global_access_allowed": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Allows SO pool to access AD or DNS server from other regions.`,
			},
			"kms_config": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the KMS config to be used for volume encryption.`,
			},
			"labels": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: `Labels as key value pairs.An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"ldap_enabled": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Flag indicating if the pool is NFS LDAP enabled or not.`,
			},
			"network": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `VPC Network name. Format: projects/{project}/global/networks/{network}`,
			},
			"psa_range": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Name of the Private Service Access allocated range. If not provided, any available range will be chosen.`,
			},
			"service_level": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"PREMIUM", "EXTREME", "STANDARD", ""}),
				Description:  `Service level of the storage pool Possible values: ["PREMIUM", "EXTREME", "STANDARD"]`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `State of the storage pool`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Create time of the storage pool`,
			},
			"encryption_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Specifies the current pool encryption key source.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Name of the storage pool`,
			},
			"state_details": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `State details of the storage pool`,
			},
			"volume_capacity_gib": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Allocated size of all volumes in GIB in the storage pool`,
			},
			"volume_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `Volume count of the storage pool`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceNetappstoragePoolCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	serviceLevelProp, err := expandNetappstoragePoolServiceLevel(d.Get("service_level"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("service_level"); !tpgresource.IsEmptyValue(reflect.ValueOf(serviceLevelProp)) && (ok || !reflect.DeepEqual(v, serviceLevelProp)) {
		obj["serviceLevel"] = serviceLevelProp
	}
	capacityGibProp, err := expandNetappstoragePoolCapacityGib(d.Get("capacity_gib"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("capacity_gib"); !tpgresource.IsEmptyValue(reflect.ValueOf(capacityGibProp)) && (ok || !reflect.DeepEqual(v, capacityGibProp)) {
		obj["capacityGib"] = capacityGibProp
	}
	descriptionProp, err := expandNetappstoragePoolDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	labelsProp, err := expandNetappstoragePoolLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	networkProp, err := expandNetappstoragePoolNetwork(d.Get("network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("network"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkProp)) && (ok || !reflect.DeepEqual(v, networkProp)) {
		obj["network"] = networkProp
	}
	activeDirectoryProp, err := expandNetappstoragePoolActiveDirectory(d.Get("active_directory"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("active_directory"); !tpgresource.IsEmptyValue(reflect.ValueOf(activeDirectoryProp)) && (ok || !reflect.DeepEqual(v, activeDirectoryProp)) {
		obj["activeDirectory"] = activeDirectoryProp
	}
	kmsConfigProp, err := expandNetappstoragePoolKmsConfig(d.Get("kms_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("kms_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(kmsConfigProp)) && (ok || !reflect.DeepEqual(v, kmsConfigProp)) {
		obj["kmsConfig"] = kmsConfigProp
	}
	ldapEnabledProp, err := expandNetappstoragePoolLdapEnabled(d.Get("ldap_enabled"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("ldap_enabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(ldapEnabledProp)) && (ok || !reflect.DeepEqual(v, ldapEnabledProp)) {
		obj["ldapEnabled"] = ldapEnabledProp
	}
	psaRangeProp, err := expandNetappstoragePoolPsaRange(d.Get("psa_range"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("psa_range"); !tpgresource.IsEmptyValue(reflect.ValueOf(psaRangeProp)) && (ok || !reflect.DeepEqual(v, psaRangeProp)) {
		obj["psaRange"] = psaRangeProp
	}
	globalAccessAllowedProp, err := expandNetappstoragePoolGlobalAccessAllowed(d.Get("global_access_allowed"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("global_access_allowed"); !tpgresource.IsEmptyValue(reflect.ValueOf(globalAccessAllowedProp)) && (ok || !reflect.DeepEqual(v, globalAccessAllowedProp)) {
		obj["globalAccessAllowed"] = globalAccessAllowedProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/storagePools?storagePoolId={{storage_pool_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new storagePool: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for storagePool: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating storagePool: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/storagePools/{{storage_pool_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = NetappOperationWaitTime(
		config, res, project, "Creating storagePool", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create storagePool: %s", err)
	}

	log.Printf("[DEBUG] Finished creating storagePool %q: %#v", d.Id(), res)

	return resourceNetappstoragePoolRead(d, meta)
}

func resourceNetappstoragePoolRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/storagePools/{{storage_pool_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for storagePool: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("NetappstoragePool %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}

	if err := d.Set("name", flattenNetappstoragePoolName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("service_level", flattenNetappstoragePoolServiceLevel(res["serviceLevel"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("capacity_gib", flattenNetappstoragePoolCapacityGib(res["capacityGib"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("volume_capacity_gib", flattenNetappstoragePoolVolumeCapacityGib(res["volumeCapacityGib"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("volume_count", flattenNetappstoragePoolVolumeCount(res["volumeCount"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("state", flattenNetappstoragePoolState(res["State"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("state_details", flattenNetappstoragePoolStateDetails(res["stateDetails"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("create_time", flattenNetappstoragePoolCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("description", flattenNetappstoragePoolDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("labels", flattenNetappstoragePoolLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("network", flattenNetappstoragePoolNetwork(res["network"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("active_directory", flattenNetappstoragePoolActiveDirectory(res["activeDirectory"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("kms_config", flattenNetappstoragePoolKmsConfig(res["kmsConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("ldap_enabled", flattenNetappstoragePoolLdapEnabled(res["ldapEnabled"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("psa_range", flattenNetappstoragePoolPsaRange(res["psaRange"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("encryption_type", flattenNetappstoragePoolEncryptionType(res["encryptionType"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}
	if err := d.Set("global_access_allowed", flattenNetappstoragePoolGlobalAccessAllowed(res["globalAccessAllowed"], d, config)); err != nil {
		return fmt.Errorf("Error reading storagePool: %s", err)
	}

	return nil
}

func resourceNetappstoragePoolUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for storagePool: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	serviceLevelProp, err := expandNetappstoragePoolServiceLevel(d.Get("service_level"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("service_level"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, serviceLevelProp)) {
		obj["serviceLevel"] = serviceLevelProp
	}
	capacityGibProp, err := expandNetappstoragePoolCapacityGib(d.Get("capacity_gib"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("capacity_gib"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, capacityGibProp)) {
		obj["capacityGib"] = capacityGibProp
	}
	descriptionProp, err := expandNetappstoragePoolDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	labelsProp, err := expandNetappstoragePoolLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	networkProp, err := expandNetappstoragePoolNetwork(d.Get("network"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("network"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, networkProp)) {
		obj["network"] = networkProp
	}
	activeDirectoryProp, err := expandNetappstoragePoolActiveDirectory(d.Get("active_directory"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("active_directory"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, activeDirectoryProp)) {
		obj["activeDirectory"] = activeDirectoryProp
	}
	kmsConfigProp, err := expandNetappstoragePoolKmsConfig(d.Get("kms_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("kms_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, kmsConfigProp)) {
		obj["kmsConfig"] = kmsConfigProp
	}
	ldapEnabledProp, err := expandNetappstoragePoolLdapEnabled(d.Get("ldap_enabled"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("ldap_enabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, ldapEnabledProp)) {
		obj["ldapEnabled"] = ldapEnabledProp
	}
	psaRangeProp, err := expandNetappstoragePoolPsaRange(d.Get("psa_range"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("psa_range"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, psaRangeProp)) {
		obj["psaRange"] = psaRangeProp
	}
	globalAccessAllowedProp, err := expandNetappstoragePoolGlobalAccessAllowed(d.Get("global_access_allowed"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("global_access_allowed"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, globalAccessAllowedProp)) {
		obj["globalAccessAllowed"] = globalAccessAllowedProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/storagePools/{{storage_pool_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating storagePool %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("service_level") {
		updateMask = append(updateMask, "serviceLevel")
	}

	if d.HasChange("capacity_gib") {
		updateMask = append(updateMask, "capacityGib")
	}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("labels") {
		updateMask = append(updateMask, "labels")
	}

	if d.HasChange("network") {
		updateMask = append(updateMask, "network")
	}

	if d.HasChange("active_directory") {
		updateMask = append(updateMask, "activeDirectory")
	}

	if d.HasChange("kms_config") {
		updateMask = append(updateMask, "kmsConfig")
	}

	if d.HasChange("ldap_enabled") {
		updateMask = append(updateMask, "ldapEnabled")
	}

	if d.HasChange("psa_range") {
		updateMask = append(updateMask, "psaRange")
	}

	if d.HasChange("global_access_allowed") {
		updateMask = append(updateMask, "globalAccessAllowed")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
		})

		if err != nil {
			return fmt.Errorf("Error updating storagePool %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating storagePool %q: %#v", d.Id(), res)
		}

		err = NetappOperationWaitTime(
			config, res, project, "Updating storagePool", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourceNetappstoragePoolRead(d, meta)
}

func resourceNetappstoragePoolDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for storagePool: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/storagePools/{{storage_pool_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting storagePool %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "storagePool")
	}

	err = NetappOperationWaitTime(
		config, res, project, "Deleting storagePool", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting storagePool %q: %#v", d.Id(), res)
	return nil
}

func resourceNetappstoragePoolImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/storagePools/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/storagePools/{{storage_pool_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenNetappstoragePoolName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolServiceLevel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolCapacityGib(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolVolumeCapacityGib(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolVolumeCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetappstoragePoolState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolStateDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolActiveDirectory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolKmsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolLdapEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolPsaRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolEncryptionType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetappstoragePoolGlobalAccessAllowed(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandNetappstoragePoolServiceLevel(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetappstoragePoolCapacityGib(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetappstoragePoolDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetappstoragePoolLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandNetappstoragePoolNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetappstoragePoolActiveDirectory(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetappstoragePoolKmsConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetappstoragePoolLdapEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetappstoragePoolPsaRange(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetappstoragePoolGlobalAccessAllowed(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
