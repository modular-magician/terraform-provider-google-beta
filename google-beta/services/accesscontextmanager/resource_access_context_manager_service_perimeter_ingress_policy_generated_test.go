// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package accesscontextmanager_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccAccessContextManagerServicePerimeterIngressPolicy_accessContextManagerServicePerimeterIngressPolicyExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckAccessContextManagerServicePerimeterIngressPolicyDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccAccessContextManagerServicePerimeterIngressPolicy_accessContextManagerServicePerimeterIngressPolicyExample(context),
			},
			{
				ResourceName:            "google_access_context_manager_service_perimeter_ingress_policy.",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"perimeter"},
			},
		},
	})
}

func testAccAccessContextManagerServicePerimeterIngressPolicy_accessContextManagerServicePerimeterIngressPolicyExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_access_context_manager_service_perimeter" "storage-perimeter" {
  parent = "accesspolicies/${google_access_context_manager_access_policy.access-policy.name}"
  name   = "accesspolicies/${google_access_context_manager_access_policy.access-policy.name}/serviceperimeters/storage-perimeter"
  title  = "Storage Perimeter"
  status {
    restricted_services = ["storage.googleapis.com"]
  }
  lifecycle {
    ignore_changes = [status[0].resources]
  }
}

# Allow for anyone
resource "google_access_context_manager_service_perimeter_ingress_policy" "ingress_policy" {
  perimeter = "${google_access_context_manager_service_perimeter.storage-perimeter.name}"

  ingress_from {
    identity_type = "ANY_IDENTITY"
    sources {
      access_level = "*"
    }
  }

  ingress_to {
    resources = ["*"]
    operations {
      service_name = "bigquery.googleapis.com"
      method_selectors {
        method = "*"
      }
    }
  }
  lifecycle {
    create_before_destroy = true
  }
}

# Allow just from a specific VPC
resource "google_access_context_manager_service_perimeter_ingress_policy" "restricted_network" {
  perimeter = "${google_access_context_manager_service_perimeter.storage-perimeter.name}"

  # Allow ingress from a specific VPC in another project
  ingress_from {
    sources {
      resource = "//compute.googleapis.com/projects/87654321/global/networks/network-in-another-project"
    }
  }

  ingress_to {
    resources = ["*"]
    operations {
      service_name = "bigquery.googleapis.com"
      method_selectors {
        method = "*"
      }
    }
  }
  lifecycle {
    create_before_destroy = true
  }
}

resource "google_access_context_manager_access_policy" "access-policy" {
  parent = "organizations/123456789"
  title  = "Storage Policy"
}
`, context)
}

func testAccCheckAccessContextManagerServicePerimeterIngressPolicyDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_access_context_manager_service_perimeter_ingress_policy" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{AccessContextManagerBasePath}}{{perimeter}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("AccessContextManagerServicePerimeterIngressPolicy still exists at %s", url)
			}
		}

		return nil
	}
}
