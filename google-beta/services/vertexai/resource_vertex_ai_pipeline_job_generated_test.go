// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vertexai_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccVertexAIPipelineJob_vertexAiPipelineJobBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIPipelineJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIPipelineJob_vertexAiPipelineJobBasicExample(context),
			},
			{
				ResourceName:            "google_vertex_ai_pipeline_job.pipeline_job",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"name", "location"},
			},
		},
	})
}

func testAccVertexAIPipelineJob_vertexAiPipelineJobBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_pipeline_job" "pipeline_job" {
  name = "tf-test-pipeline-job%{random_suffix}"
  location = "us-central1"
  runtime_config {
    gcs_output_directory = google_storage_bucket.bucket.url
    parameter_values = {
      model_display_name = "The display name for your model in the UI"
      large_model_reference = "text-bison@001"
      train_steps = 20
      project = data.google_project.project.project_id
      location = "us-central1"
      dataset_uri = google_storage_bucket_object.object.media_link
    }
  }
  template_uri = "https://us-kfp.pkg.dev/ml-pipeline/large-language-model-pipelines/tune-large-model/v2.0.0"
}

data "google_project" "project" {}

resource "google_storage_bucket" "bucket" {
  name     = "tf-test-pipeline-job-bucket%{random_suffix}"
  location = "US"
}

resource "google_storage_bucket_object" "object" {
  name   = "tf-test-pipeline-job-dataset%{random_suffix}"
  bucket = google_storage_bucket.bucket.name
  source = "./test-fixtures/dataset.jsonl"
}
`, context)
}

func testAccCheckVertexAIPipelineJobDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_vertex_ai_pipeline_job" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{VertexAIBasePath}}projects/{{project}}/locations/{{location}}/pipelineJobs/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("VertexAIPipelineJob still exists at %s", url)
			}
		}

		return nil
	}
}
