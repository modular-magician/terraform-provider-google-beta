// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vertexai_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccVertexAIModels_vertexAiModelBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"kms_key_name":  acctest.BootstrapKMSKeyWithPurposeInLocation(t, "ASYMMETRIC_SIGN", "us-central1").CryptoKey.Name,
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelBasicExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "model" {
  display_name = "tf-test-test-model%{random_suffix}"
  description  = "sample description"
  labels       = {
    "key1" : "value1",
    "key2" : "value2"
  }

  // encryption_spec {
  //   kms_key_name = "%{kms_key_name}"
  // }
  region       = "us-central1"
}
`, context)
}

func TestAccVertexAIModels_vertexAiModelUploadBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelUploadBasicExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelUploadBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "upload_model" {
  display_name = "tf-test-test-model-upload-basic%{random_suffix}"
  description  = "basic upload model"

  metadata_schema_uri   = "gs://cloud-ai-platform-d357fffa-aab0-409b-8e4e-3af03de82d76/instance_schemas/job-5547038670390820864/analysis"

  version_aliases = ["v2beta1"]
  model_id = "id_upload_test"

  metadata {
    config {
      algorithm_config {
        tree_ah_config {
          leaf_node_embedding_count    = 1
          leaf_nodes_to_search_percent = 1
        }
      }
      approximate_neighbors_count = 1
      dimensions                  = 1
      distance_measure_type       = 1
      feature_norm_type           = "normal"
      shard_size                  = 1
    }
    contents_delta_uri    = "test"
    is_complete_overwrite = false
  }

  labels       = {
    "key1" : "value1",
    "key2" : "value2"
  }
  region       = "us-central1"
}
`, context)
}

func TestAccVertexAIModels_vertexAiModelUploadContainerSpecExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelUploadContainerSpecExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelUploadContainerSpecExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "upload_model" {
  display_name = "tf-test-test-model-upload-container-spec%{random_suffix}"
  region       = "us-central1"
  artifact_uri = "gs://cloud-samples-data/vertex-ai/google-cloud-aiplatform-ci-artifacts/models/iris_xgboost/"
  description  = "A sample model"
  labels = {
    label-one = "value-one"
  }

  container_spec {
    image_uri = "us-docker.pkg.dev/vertex-ai/prediction/xgboost-cpu.1-5:latest"
    args      = ["sample", "args"]
    command   = ["sample", "command"]
    deployment_timeout = "60s"
    shared_memory_size_mb = 10
    env {
      name  = "env_one"
      value = "value_one"
    }
    grpc_ports {
      container_port = 8080
    }
    health_probe {
      exec {
        command = ["pwd"]
      }
      period_seconds  = 30
      timeout_seconds = 1
    }
    health_route = "/health"
    ports {
      container_port = 8080
    }
    predict_route = "/predict"
    startup_probe {
      exec {
        command = ["pwd"]
      }
      period_seconds  = 30
      timeout_seconds = 1
    }
  }
}
`, context)
}

func TestAccVertexAIModels_vertexAiModelUploadExplanationSpecExamplesOneExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelUploadExplanationSpecExamplesOneExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelUploadExplanationSpecExamplesOneExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "examplesOneModel" { // examples_1
  display_name = "tf-test-test-model-upload-explanation-spec-example-one%{random_suffix}"
  artifact_uri = "gs://cloud-samples-data/vertex-ai/google-cloud-aiplatform-ci-artifacts/models/iris_xgboost/"
  description  = "sample description"

  container_spec {
    image_uri = "us-docker.pkg.dev/vertex-ai/prediction/xgboost-cpu.1-5:latest"
    args      = ["sample", "args"]
    command   = ["sample", "command"]
    deployment_timeout = "60s"
    shared_memory_size_mb = 10
    env {
      name  = "env_one"
      value = "value_one"
    }
    grpc_ports {
      container_port = 8080
    }
    health_probe {
      exec {
        command = ["pwd"]
      }
      period_seconds  = 30
      timeout_seconds = 1
    }
    health_route = "/health"
    ports {
      container_port = 8080
    }
    predict_route = "/predict"
    startup_probe {
      exec {
        command = ["pwd"]
      }
      period_seconds  = 30
      timeout_seconds = 1
    }
  }

    explanation_spec {
    metadata {
      inputs {
        dense_shape_tensor_name = "test"
        encoded_baselines       = [1]
        encoded_tensor_name     = "test"
        encoding                = "IDENTITY"
        feature_value_domain {
          max_value       = 1
          min_value       = 1
          original_mean   = 1
          original_stddev = 1
        }
        group_name            = "test"
        index_feature_mapping = ["test"]
        indices_tensor_name   = "test"
        input_tensor_name     = "test"
        modality              = "numeric"
        name                  = "input-test"
        visualization {
          clip_percent_lowerbound = 1
          clip_percent_upperbound = 1
          color_map               = "PINK_GREEN"
          overlay_type            = "MASK_BLACK"
          polarity                = "POSITIVE"
          type                    = "PIXELS"
        }
      }
      latent_space_source = "test"
      outputs {
        name = "test"
        index_display_name_mapping = ["test"]
        output_tensor_name         = "test"
      }
    }
    parameters {
      examples {
        example_gcs_source {
          data_format = "JSONL"
          gcs_source {
            uris = ["test"]
          }
        }
        nearest_neighbor_search_config {
          config {
            algorithm_config {
              tree_ah_config {
                leaf_node_embedding_count    = 1
                leaf_nodes_to_search_percent = 1
              }
            }
            approximate_neighbors_count = 1
            dimensions                  = 1
            distance_measure_type       = "test"
            feature_norm_type           = "test"
            shard_size                  = "test"
          }
          contents_delta_uri    = "test"
          is_complete_overwrite = false
        }
        neighbor_count = 1
      }
    }
  }

  region       = "us-central1"
}
`, context)
}

func TestAccVertexAIModels_vertexAiModelUploadExplanationSpecExamplesTwoExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelUploadExplanationSpecExamplesTwoExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelUploadExplanationSpecExamplesTwoExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "examplesTwoModel" { // examples_2
  display_name = "tf-test-test-model-upload-explanation-spec-example-two%{random_suffix}"
  artifact_uri = "gs://cloud-samples-data/vertex-ai/google-cloud-aiplatform-ci-artifacts/models/iris_xgboost/"
  description  = "sample description"

  container_spec {
    image_uri = "us-docker.pkg.dev/vertex-ai/prediction/xgboost-cpu.1-5:latest"
    args      = ["sample", "args"]
    command   = ["sample", "command"]
    deployment_timeout = "60s"
    shared_memory_size_mb = 10
    env {
      name  = "env_one"
      value = "value_one"
    }
    grpc_ports {
      container_port = 8080
    }
    health_probe {
      exec {
        command = ["pwd"]
      }
      period_seconds  = 30
      timeout_seconds = 1
    }
    health_route = "/health"
    ports {
      container_port = 8080
    }
    predict_route = "/predict"
    startup_probe {
      exec {
        command = ["pwd"]
      }
      period_seconds  = 30
      timeout_seconds = 1
    }
  }

  explanation_spec {
    metadata {
      inputs {
        dense_shape_tensor_name = "test"
        encoded_baselines       = [1]
        encoded_tensor_name     = "test"
        encoding                = "IDENTITY"
        feature_value_domain {
          max_value       = 1
          min_value       = 1
          original_mean   = 1
          original_stddev = 1
        }
        group_name            = "test"
        index_feature_mapping = ["test"]
        indices_tensor_name   = "test"
        input_tensor_name     = "test"
        modality              = "numeric"
        name                  = "test"
        visualization {
          clip_percent_lowerbound = 1
          clip_percent_upperbound = 1
          color_map               = "PINK_GREEN"
          overlay_type            = "GRAYSCALE"
          polarity                = "POSITIVE"
          type                    = "PIXELS"
        }
      }
      latent_space_source = "test"
      outputs {
        display_name_mapping_key   = "test"
        name                       = "test"
        output_tensor_name         = "test"
      }
    }
    parameters {
      examples {
        example_gcs_source {
          data_format = "JSONL"
          gcs_source {
            uris = ["test"]
          }
        }
        nearest_neighbor_search_config {
          config {
            algorithm_config {
              tree_ah_config {
                leaf_node_embedding_count    = 1
                leaf_nodes_to_search_percent = 1
              }
            }
            approximate_neighbors_count = 1
            dimensions                  = 1
            distance_measure_type       = "test"
            feature_norm_type           = "test"
            shard_size                  = "test"
          }
          contents_delta_uri    = "test"
          is_complete_overwrite = false
        }
        neighbor_count = 1
      }
    }
  }

  region       = "us-central1"
}
`, context)
}

func TestAccVertexAIModels_vertexAiModelUploadExplanationSpecIntegratedGradientsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelUploadExplanationSpecIntegratedGradientsExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelUploadExplanationSpecIntegratedGradientsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "integratedGradientsModel" { // integrated_gradients_attribution
  display_name = "tf-test-test-model-upload-explanation-spec-integrated-%{random_suffix}"
  artifact_uri = "gs://cloud-samples-data/vertex-ai/google-cloud-aiplatform-ci-artifacts/models/iris_xgboost/"
  description  = "sample description"

  explanation_spec {
    metadata {
      inputs {
        dense_shape_tensor_name = "test"
        encoded_baselines       = [1]
        encoded_tensor_name     = "test"
        encoding                = "IDENTITY"
        feature_value_domain {
          max_value       = 1
          min_value       = 1
          original_mean   = 1
          original_stddev = 1
        }
        group_name            = "test"
        index_feature_mapping = ["test"]
        indices_tensor_name   = "test"
        input_tensor_name     = "test"
        modality              = "numeric"
        name                  = "test"
        visualization {
          clip_percent_lowerbound = 1
          clip_percent_upperbound = 1
          color_map               = "PINK_GREEN"
          overlay_type            = "GRAYSCALE"
          polarity                = "POSITIVE"
          type                    = "PIXELS"
        }
      }
      latent_space_source = "test"
      outputs {
        display_name_mapping_key   = "test"
        name                       = "test"
        output_tensor_name         = "test"
      }
    }
    parameters {
      integrated_gradients_attribution {
        blur_baseline_config {
          max_blur_sigma = 1
        }
        smooth_grad_config {
          feature_noise_sigma {
            noise_sigma {
              name  = "test"
              sigma = 1
            }
          }
          noise_sigma        = 1
          noisy_sample_count = 1
        }
        step_count = 1
      }
      output_indices = [1]
    }
  }

  region       = "us-central1"
}
`, context)
}

func TestAccVertexAIModels_vertexAiModelUploadExplanationSpecXraiAttributionExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelUploadExplanationSpecXraiAttributionExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelUploadExplanationSpecXraiAttributionExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "xraiAttributionModel" { // xrai_attribution
  display_name = "tf-test-test-model-upload-explanation-spec-xrai-attrib%{random_suffix}"
  artifact_uri = "gs://cloud-samples-data/vertex-ai/google-cloud-aiplatform-ci-artifacts/models/iris_xgboost/"
  description  = "sample description"

  explanation_spec {
    metadata {
      inputs {
        dense_shape_tensor_name = "test"
        encoded_baselines       = [1]
        encoded_tensor_name     = "test"
        encoding                = "IDENTITY"
        feature_value_domain {
          max_value       = 1
          min_value       = 1
          original_mean   = 1
          original_stddev = 1
        }
        group_name            = "test"
        index_feature_mapping = ["test"]
        indices_tensor_name   = "test"
        input_tensor_name     = "test"
        modality              = "numeric"
        name                  = "test"
        visualization {
          clip_percent_lowerbound = 1
          clip_percent_upperbound = 1
          color_map               = "PINK_GREEN"
          overlay_type            = "GRAYSCALE"
          polarity                = "POSITIVE"
          type                    = "PIXELS"
        }
      }
      latent_space_source = "test"
      outputs {
        display_name_mapping_key   = "test"
        name                       = "test"
        output_tensor_name         = "test"
      }
    }
    parameters {
      output_indices = [1]
      top_k = 1
      xrai_attribution {
        blur_baseline_config {
          max_blur_sigma = 1
        }
        smooth_grad_config {
          feature_noise_sigma {
            noise_sigma {
              name  = "test"
              sigma = 1
            }
          }
          noise_sigma        = 1
          noisy_sample_count = 1
        }
        step_count = 1
      }
    }
  }

  region       = "us-central1"
}
`, context)
}

func TestAccVertexAIModels_vertexAiModelUploadExplanationSpecSampledShapelyExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelUploadExplanationSpecSampledShapelyExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelUploadExplanationSpecSampledShapelyExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "sampledShapelyModel" { // sampled_shapley_attribution
  display_name = "tf-test-test-model-upload-explanation-spec-sampled-sha%{random_suffix}"
  artifact_uri = "gs://cloud-samples-data/vertex-ai/google-cloud-aiplatform-ci-artifacts/models/iris_xgboost/"
  description  = "sample description"

  container_spec {
    image_uri = "us-docker.pkg.dev/vertex-ai/prediction/xgboost-cpu.1-5:latest"
    args      = ["sample", "args"]
    command   = ["sample", "command"]
    deployment_timeout = "60s"
    shared_memory_size_mb = 10
    env {
      name  = "env_one"
      value = "value_one"
    }
    grpc_ports {
      container_port = 8080
    }
    health_probe {
      exec {
        command = ["pwd"]
      }
      period_seconds  = 30
      timeout_seconds = 1
    }
    health_route = "/health"
    ports {
      container_port = 8080
    }
    predict_route = "/predict"
    startup_probe {
      exec {
        command = ["pwd"]
      }
      period_seconds  = 30
      timeout_seconds = 1
    }
  }

  explanation_spec {
    metadata {
      inputs {
        dense_shape_tensor_name = "test"
        encoded_baselines       = [1]
        encoded_tensor_name     = "test"
        encoding                = "IDENTITY"
        feature_value_domain {
          max_value       = 1
          min_value       = 1
          original_mean   = 1
          original_stddev = 1
        }
        group_name            = "test"
        index_feature_mapping = ["test"]
        indices_tensor_name   = "test"
        input_tensor_name     = "test"
        modality              = "numeric"
        name                  = "test"
        visualization {
          clip_percent_lowerbound = 1
          clip_percent_upperbound = 1
          color_map               = "PINK_GREEN"
          overlay_type            = "GRAYSCALE"
          polarity                = "POSITIVE"
          type                    = "PIXELS"
        }
      }
      latent_space_source = "test"
      outputs {
        display_name_mapping_key   = "test"
        name                       = "test"
        output_tensor_name         = "test"
      }
    }
    parameters {
      output_indices = [1]
      sampled_shapley_attribution {
        path_count = 1
      }
      top_k = 1
    }
  }

  region       = "us-central1"
}
`, context)
}

func TestAccVertexAIModels_vertexAiModelUploadPredictSchemataExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckVertexAIModelsDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIModels_vertexAiModelUploadPredictSchemataExample(context),
			},
		},
	})
}

func testAccVertexAIModels_vertexAiModelUploadPredictSchemataExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_vertex_ai_models" "upload_model" {
  display_name = "tf-test-test-model-upload-predict-schemata%{random_suffix}"
  description  = "basic upload model"

  predict_schemata {
    instance_schema_uri   = "gs://cloud-ai-platform-d357fffa-aab0-409b-8e4e-3af03de82d76/instance_schemas/job-5547038670390820864/analysis"
    parameters_schema_uri = "gs://cloud-ai-platform-d357fffa-aab0-409b-8e4e-3af03de82d76/instance_schemas/job-5547038670390820864/analysis"
    prediction_schema_uri = "gs://cloud-ai-platform-d357fffa-aab0-409b-8e4e-3af03de82d76/instance_schemas/job-5547038670390820864/analysis"
  }

  metadata {
    config {
      algorithm_config {
        tree_ah_config {
          leaf_node_embedding_count    = 1
          leaf_nodes_to_search_percent = 1
        }
      }
      approximate_neighbors_count = 1
      dimensions                  = 1
      distance_measure_type       = 1
      feature_norm_type           = "normal"
      shard_size                  = 1
    }
    contents_delta_uri    = "test"
    is_complete_overwrite = false
  }

  labels       = {
    "key1" : "value1",
    "key2" : "value2"
  }
  region       = "us-central1"
}
`, context)
}

func testAccCheckVertexAIModelsDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_vertex_ai_models" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{VertexAIBasePath}}{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("VertexAIModels still exists at %s", url)
			}
		}

		return nil
	}
}
