// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vertexai

import (
	"fmt"
	"log"
	"reflect"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourceVertexAIFeatureOnlinestoreFeatureview() *schema.Resource {
	return &schema.Resource{
		Create: resourceVertexAIFeatureOnlinestoreFeatureviewCreate,
		Read:   resourceVertexAIFeatureOnlinestoreFeatureviewRead,
		Update: resourceVertexAIFeatureOnlinestoreFeatureviewUpdate,
		Delete: resourceVertexAIFeatureOnlinestoreFeatureviewDelete,

		Importer: &schema.ResourceImporter{
			State: resourceVertexAIFeatureOnlinestoreFeatureviewImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
		),

		Schema: map[string]*schema.Schema{
			"feature_online_store": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of the FeatureOnlineStore to use, in the format projects/{project}/locations/{region}/featureOnlineStores/{featureOnlineStore}.`,
			},
			"big_query_source": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"entity_id_columns": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `Columns to construct entityId / row keys. Start by supporting 1 only.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"uri": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The BigQuery view URI that will be materialized on each sync trigger based on FeatureView.SyncConfig.`,
						},
					},
				},
				ConflictsWith: []string{"feature_registry_source"},
				ExactlyOneOf:  []string{"big_query_source", "feature_registry_source"},
			},
			"feature_registry_source": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"feature_groups": {
							Type:        schema.TypeList,
							Required:    true,
							Description: `List of features that need to be synced to Online Store.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"feature_group_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: `Identifier of the feature group.`,
									},
									"feature_ids": {
										Type:        schema.TypeList,
										Required:    true,
										Description: `Identifiers of features under the feature group.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
				ConflictsWith: []string{"big_query_source"},
				ExactlyOneOf:  []string{"big_query_source", "feature_registry_source"},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `A set of key/value label pairs to assign to this FeatureView.


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.`,
			},
			"sync_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cron": {
							Type:     schema.TypeString,
							Computed: true,
							Optional: true,
							Description: `Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}".`,
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp of when the featureOnlinestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Used to perform consistent read-modify-write updates.`,
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The timestamp of when the featureOnlinestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.`,
			},
			"region": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The region of the featureView.",
			},
		},
		UseJSONNumber: true,
	}
}

func resourceVertexAIFeatureOnlinestoreFeatureviewCreate(d *schema.ResourceData, meta interface{}) error {
	var project string
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	syncConfigProp, err := expandVertexAIFeatureOnlinestoreFeatureviewSyncConfig(d.Get("sync_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("sync_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(syncConfigProp)) && (ok || !reflect.DeepEqual(v, syncConfigProp)) {
		obj["syncConfig"] = syncConfigProp
	}
	bigQuerySourceProp, err := expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySource(d.Get("big_query_source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("big_query_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(bigQuerySourceProp)) && (ok || !reflect.DeepEqual(v, bigQuerySourceProp)) {
		obj["bigQuerySource"] = bigQuerySourceProp
	}
	featureRegistrySourceProp, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySource(d.Get("feature_registry_source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("feature_registry_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(featureRegistrySourceProp)) && (ok || !reflect.DeepEqual(v, featureRegistrySourceProp)) {
		obj["featureRegistrySource"] = featureRegistrySourceProp
	}
	labelsProp, err := expandVertexAIFeatureOnlinestoreFeatureviewEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	obj, err = resourceVertexAIFeatureOnlinestoreFeatureviewEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}{{feature_online_store}}/featureViews?featureViewId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new FeatureOnlinestoreFeatureview: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	if v, ok := d.GetOk("feature_online_store"); ok {
		re := regexp.MustCompile("projects/([a-zA-Z0-9-]*)/(?:locations|regions)/([a-zA-Z0-9-]*)")
		switch {
		case re.MatchString(v.(string)):
			if res := re.FindStringSubmatch(v.(string)); len(res) == 3 && res[1] != "" {
				project = res[1]
			}
		}
	}
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating FeatureOnlinestoreFeatureview: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{feature_online_store}}/featureViews/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = VertexAIOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating FeatureOnlinestoreFeatureview", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")

		return fmt.Errorf("Error waiting to create FeatureOnlinestoreFeatureview: %s", err)
	}

	// This may have caused the ID to update - update it if so.
	id, err = tpgresource.ReplaceVars(d, config, "{{feature_online_store}}/featureViews/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating FeatureOnlinestoreFeatureview %q: %#v", d.Id(), res)

	return resourceVertexAIFeatureOnlinestoreFeatureviewRead(d, meta)
}

func resourceVertexAIFeatureOnlinestoreFeatureviewRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}{{feature_online_store}}/featureViews/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("VertexAIFeatureOnlinestoreFeatureview %q", d.Id()))
	}

	if err := d.Set("create_time", flattenVertexAIFeatureOnlinestoreFeatureviewCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading FeatureOnlinestoreFeatureview: %s", err)
	}
	if err := d.Set("update_time", flattenVertexAIFeatureOnlinestoreFeatureviewUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading FeatureOnlinestoreFeatureview: %s", err)
	}
	if err := d.Set("labels", flattenVertexAIFeatureOnlinestoreFeatureviewLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading FeatureOnlinestoreFeatureview: %s", err)
	}
	if err := d.Set("sync_config", flattenVertexAIFeatureOnlinestoreFeatureviewSyncConfig(res["syncConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading FeatureOnlinestoreFeatureview: %s", err)
	}
	if err := d.Set("big_query_source", flattenVertexAIFeatureOnlinestoreFeatureviewBigQuerySource(res["bigQuerySource"], d, config)); err != nil {
		return fmt.Errorf("Error reading FeatureOnlinestoreFeatureview: %s", err)
	}
	if err := d.Set("feature_registry_source", flattenVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySource(res["featureRegistrySource"], d, config)); err != nil {
		return fmt.Errorf("Error reading FeatureOnlinestoreFeatureview: %s", err)
	}
	if err := d.Set("terraform_labels", flattenVertexAIFeatureOnlinestoreFeatureviewTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading FeatureOnlinestoreFeatureview: %s", err)
	}
	if err := d.Set("effective_labels", flattenVertexAIFeatureOnlinestoreFeatureviewEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading FeatureOnlinestoreFeatureview: %s", err)
	}

	return nil
}

func resourceVertexAIFeatureOnlinestoreFeatureviewUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	syncConfigProp, err := expandVertexAIFeatureOnlinestoreFeatureviewSyncConfig(d.Get("sync_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("sync_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, syncConfigProp)) {
		obj["syncConfig"] = syncConfigProp
	}
	bigQuerySourceProp, err := expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySource(d.Get("big_query_source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("big_query_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, bigQuerySourceProp)) {
		obj["bigQuerySource"] = bigQuerySourceProp
	}
	featureRegistrySourceProp, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySource(d.Get("feature_registry_source"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("feature_registry_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, featureRegistrySourceProp)) {
		obj["featureRegistrySource"] = featureRegistrySourceProp
	}
	labelsProp, err := expandVertexAIFeatureOnlinestoreFeatureviewEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	obj, err = resourceVertexAIFeatureOnlinestoreFeatureviewEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}{{feature_online_store}}/featureViews/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating FeatureOnlinestoreFeatureview %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("sync_config") {
		updateMask = append(updateMask, "syncConfig")
	}

	if d.HasChange("big_query_source") {
		updateMask = append(updateMask, "bigQuerySource")
	}

	if d.HasChange("feature_registry_source") {
		updateMask = append(updateMask, "featureRegistrySource")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
		})

		if err != nil {
			return fmt.Errorf("Error updating FeatureOnlinestoreFeatureview %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating FeatureOnlinestoreFeatureview %q: %#v", d.Id(), res)
		}

	}

	return resourceVertexAIFeatureOnlinestoreFeatureviewRead(d, meta)
}

func resourceVertexAIFeatureOnlinestoreFeatureviewDelete(d *schema.ResourceData, meta interface{}) error {
	var project string
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	url, err := tpgresource.ReplaceVars(d, config, "{{VertexAIBasePath}}{{feature_online_store}}/featureViews/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	if v, ok := d.GetOk("feature_online_store"); ok {
		re := regexp.MustCompile("projects/([a-zA-Z0-9-]*)/(?:locations|regions)/([a-zA-Z0-9-]*)")
		switch {
		case re.MatchString(v.(string)):
			if res := re.FindStringSubmatch(v.(string)); len(res) == 3 && res[1] != "" {
				project = res[1]
			}
		}
	}
	log.Printf("[DEBUG] Deleting FeatureOnlinestoreFeatureview %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "FeatureOnlinestoreFeatureview")
	}

	err = VertexAIOperationWaitTime(
		config, res, project, "Deleting FeatureOnlinestoreFeatureview", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting FeatureOnlinestoreFeatureview %q: %#v", d.Id(), res)
	return nil
}

func resourceVertexAIFeatureOnlinestoreFeatureviewImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"(?P<feature_online_store>.+)/featureViews/(?P<name>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{feature_online_store}}/featureViews/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	featureOnlineStore := d.Get("feature_online_store").(string)

	re := regexp.MustCompile("^projects/(.+)/locations/(.+)/featureOnlineStores/(.+)$")
	if parts := re.FindStringSubmatch(featureOnlineStore); parts != nil {
		d.Set("region", parts[2])
	}

	return []*schema.ResourceData{d}, nil
}

func flattenVertexAIFeatureOnlinestoreFeatureviewCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIFeatureOnlinestoreFeatureviewUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIFeatureOnlinestoreFeatureviewLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenVertexAIFeatureOnlinestoreFeatureviewSyncConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cron"] =
		flattenVertexAIFeatureOnlinestoreFeatureviewSyncConfigCron(original["cron"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIFeatureOnlinestoreFeatureviewSyncConfigCron(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIFeatureOnlinestoreFeatureviewBigQuerySource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceUri(original["uri"], d, config)
	transformed["entity_id_columns"] =
		flattenVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceEntityIdColumns(original["entityIdColumns"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceEntityIdColumns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["feature_groups"] =
		flattenVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroups(original["featureGroups"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroups(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["feature_group_id"] =
		flattenVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureGroupId(original["featureGroupId"], d, config)
	transformed["feature_ids"] =
		flattenVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureIds(original["featureIds"], d, config)
	return []interface{}{transformed}
}
func flattenVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureGroupId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureIds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVertexAIFeatureOnlinestoreFeatureviewTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenVertexAIFeatureOnlinestoreFeatureviewEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandVertexAIFeatureOnlinestoreFeatureviewSyncConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCron, err := expandVertexAIFeatureOnlinestoreFeatureviewSyncConfigCron(original["cron"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCron); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cron"] = transformedCron
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewSyncConfigCron(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedEntityIdColumns, err := expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceEntityIdColumns(original["entity_id_columns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEntityIdColumns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["entityIdColumns"] = transformedEntityIdColumns
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceEntityIdColumns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureGroups, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroups(original["feature_groups"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureGroups); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureGroups"] = transformedFeatureGroups
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroups(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureGroupId, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureGroupId(original["feature_group_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureGroupId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureGroupId"] = transformedFeatureGroupId
	}

	transformedFeatureIds, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureIds(original["feature_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureIds"] = transformedFeatureIds
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureGroupId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func resourceVertexAIFeatureOnlinestoreFeatureviewEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	if v, ok := d.GetOk("feature_online_store"); ok {
		re := regexp.MustCompile("projects/(.+)/locations/(.+)/featureOnlineStores/(.+)$")
		if parts := re.FindStringSubmatch(v.(string)); parts != nil {
			d.Set("region", parts[2])
		}
	}

	return obj, nil
}
