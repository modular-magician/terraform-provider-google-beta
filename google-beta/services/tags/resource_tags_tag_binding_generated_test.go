// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package tags_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccTagsTagBinding_tagBindingWithNamespacedValueExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":           envvar.GetTestOrgFromEnv(t),
		"key_short_name":   "tf-test-key-" + acctest.RandString(t, 10),
		"value_short_name": "tf-test-value-" + acctest.RandString(t, 10),
		"project_id":       "tf-test-" + acctest.RandString(t, 10),
		"random_suffix":    acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckTagsTagBindingDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccTagsTagBinding_tagBindingWithNamespacedValueExample(context),
			},
			{
				ResourceName:      "google_tags_tag_binding.binding_with_value",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccTagsTagBinding_tagBindingWithNamespacedValueExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "project" {
	project_id = "%{project_id}"
	name       = "%{project_id}"
	org_id     = "%{org_id}"
}

resource "google_tags_tag_key" "key" {
	parent = "organizations/%{org_id}"
	short_name = "%{key_short_name}"
	description = "For %{key_short_name} resources."
}

resource "google_tags_tag_value" "value" {
	parent = "tagKeys/${google_tags_tag_key.key.name}"
	short_name = "%{value_short_name}"
	description = "For %{value_short_name} resources."
}

resource "google_tags_tag_binding" "binding_with_value" {
	parent = "//cloudresourcemanager.googleapis.com/projects/${google_project.project.number}"
	tag_value_namespaced_name = "%{org_id}/${google_tags_tag_key.key.short_name}/${google_tags_tag_value.value.short_name}"
}
`, context)
}

func testAccCheckTagsTagBindingDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_tags_tag_binding" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{TagsBasePath}}tagBindings/?parent={{parent}}&pageSize=300")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("TagsTagBinding still exists at %s", url)
			}
		}

		return nil
	}
}
