// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccCloudDeployDeliveryPipelineIamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudDeployDeliveryPipelineIamBinding_basicGenerated(context),
			},
			{
				ResourceName:      "google_clouddeploy_delivery_pipeline_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/deliveryPipelines/%s roles/viewer", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-dp-%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				// Test Iam Binding update
				Config: testAccCloudDeployDeliveryPipelineIamBinding_updateGenerated(context),
			},
			{
				ResourceName:      "google_clouddeploy_delivery_pipeline_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/deliveryPipelines/%s roles/viewer", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-dp-%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccCloudDeployDeliveryPipelineIamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccCloudDeployDeliveryPipelineIamMember_basicGenerated(context),
			},
			{
				ResourceName:      "google_clouddeploy_delivery_pipeline_iam_member.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/deliveryPipelines/%s roles/viewer user:admin@hashicorptest.com", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-dp-%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccCloudDeployDeliveryPipelineIamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudDeployDeliveryPipelineIamPolicy_basicGenerated(context),
			},
			{
				ResourceName:      "google_clouddeploy_delivery_pipeline_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/deliveryPipelines/%s", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-dp-%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccCloudDeployDeliveryPipelineIamPolicy_emptyBinding(context),
			},
			{
				ResourceName:      "google_clouddeploy_delivery_pipeline_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("projects/%s/locations/%s/deliveryPipelines/%s", getTestProjectFromEnv(), getTestRegionFromEnv(), fmt.Sprintf("tf-dp-%s", context["random_suffix"])),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCloudDeployDeliveryPipelineIamMember_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_clouddeploy_delivery_pipeline" "default" {
  name        = "tf-test-dp-name%{random_suffix}"
  description = "My cloud deploy delivery pipeline"
  location = "us-west1"

  labels        = {
    label1 = "labelvalue1"
  }

  annotations   = {
    annotation1 = "annotation1 value"
  }

  serial_pipeline = {
    stages = {
      profiles = [
        "stg1-profile1",
        "stg1-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg1-targetid"
    }

    stages = {
      profiles = [
        "stg2-profile1",
        "stg2-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg2-targetid"
    }
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_member" "member" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  member = "user:jane@example.com"
}

resource "google_clouddeploy_delivery_pipeline_iam_binding" "binding" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  members = [
    "user:jane@example.com",
  ]
}

data "google_iam_policy" "admin" {
  binding {
    role = "roles/viewer"
    members = [
      "user:jane@example.com",
    ]
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_member" "foo" {
  project = google_clouddeploy_delivery_pipeline.default.project
  region = google_clouddeploy_delivery_pipeline.default.region
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccCloudDeployDeliveryPipelineIamPolicy_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_clouddeploy_delivery_pipeline" "default" {
  name        = "tf-test-dp-name%{random_suffix}"
  description = "My cloud deploy delivery pipeline"
  location = "us-west1"

  labels        = {
    label1 = "labelvalue1"
  }

  annotations   = {
    annotation1 = "annotation1 value"
  }

  serial_pipeline = {
    stages = {
      profiles = [
        "stg1-profile1",
        "stg1-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg1-targetid"
    }

    stages = {
      profiles = [
        "stg2-profile1",
        "stg2-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg2-targetid"
    }
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_member" "member" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  member = "user:jane@example.com"
}

resource "google_clouddeploy_delivery_pipeline_iam_binding" "binding" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  members = [
    "user:jane@example.com",
  ]
}

data "google_iam_policy" "admin" {
  binding {
    role = "roles/viewer"
    members = [
      "user:jane@example.com",
    ]
  }
}

data "google_iam_policy" "foo" {
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_policy" "foo" {
  project = google_clouddeploy_delivery_pipeline.default.project
  region = google_clouddeploy_delivery_pipeline.default.region
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccCloudDeployDeliveryPipelineIamPolicy_emptyBinding(context map[string]interface{}) string {
	return Nprintf(`
resource "google_clouddeploy_delivery_pipeline" "default" {
  name        = "tf-test-dp-name%{random_suffix}"
  description = "My cloud deploy delivery pipeline"
  location = "us-west1"

  labels        = {
    label1 = "labelvalue1"
  }

  annotations   = {
    annotation1 = "annotation1 value"
  }

  serial_pipeline = {
    stages = {
      profiles = [
        "stg1-profile1",
        "stg1-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg1-targetid"
    }

    stages = {
      profiles = [
        "stg2-profile1",
        "stg2-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg2-targetid"
    }
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_member" "member" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  member = "user:jane@example.com"
}

resource "google_clouddeploy_delivery_pipeline_iam_binding" "binding" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  members = [
    "user:jane@example.com",
  ]
}

data "google_iam_policy" "admin" {
  binding {
    role = "roles/viewer"
    members = [
      "user:jane@example.com",
    ]
  }
}

data "google_iam_policy" "foo" {
}

resource "google_clouddeploy_delivery_pipeline_iam_policy" "foo" {
  project = google_clouddeploy_delivery_pipeline.default.project
  region = google_clouddeploy_delivery_pipeline.default.region
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccCloudDeployDeliveryPipelineIamBinding_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_clouddeploy_delivery_pipeline" "default" {
  name        = "tf-test-dp-name%{random_suffix}"
  description = "My cloud deploy delivery pipeline"
  location = "us-west1"

  labels        = {
    label1 = "labelvalue1"
  }

  annotations   = {
    annotation1 = "annotation1 value"
  }

  serial_pipeline = {
    stages = {
      profiles = [
        "stg1-profile1",
        "stg1-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg1-targetid"
    }

    stages = {
      profiles = [
        "stg2-profile1",
        "stg2-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg2-targetid"
    }
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_member" "member" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  member = "user:jane@example.com"
}

resource "google_clouddeploy_delivery_pipeline_iam_binding" "binding" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  members = [
    "user:jane@example.com",
  ]
}

data "google_iam_policy" "admin" {
  binding {
    role = "roles/viewer"
    members = [
      "user:jane@example.com",
    ]
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_binding" "foo" {
  project = google_clouddeploy_delivery_pipeline.default.project
  region = google_clouddeploy_delivery_pipeline.default.region
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccCloudDeployDeliveryPipelineIamBinding_updateGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_clouddeploy_delivery_pipeline" "default" {
  name        = "tf-test-dp-name%{random_suffix}"
  description = "My cloud deploy delivery pipeline"
  location = "us-west1"

  labels        = {
    label1 = "labelvalue1"
  }

  annotations   = {
    annotation1 = "annotation1 value"
  }

  serial_pipeline = {
    stages = {
      profiles = [
        "stg1-profile1",
        "stg1-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg1-targetid"
    }

    stages = {
      profiles = [
        "stg2-profile1",
        "stg2-profile2",
      ]
      strategy = {
        standard = {
          verify = "false"
        }
      }
      targetId = "stg2-targetid"
    }
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_member" "member" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  member = "user:jane@example.com"
}

resource "google_clouddeploy_delivery_pipeline_iam_binding" "binding" {
  location = google_clouddeploy_delivery_pipeline.default.location
  project = google_clouddeploy_delivery_pipeline.default.project
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "roles/viewer"
  members = [
    "user:jane@example.com",
  ]
}

data "google_iam_policy" "admin" {
  binding {
    role = "roles/viewer"
    members = [
      "user:jane@example.com",
    ]
  }
}

resource "google_clouddeploy_delivery_pipeline_iam_binding" "foo" {
  project = google_clouddeploy_delivery_pipeline.default.project
  region = google_clouddeploy_delivery_pipeline.default.region
  delivery_pipeline = google_clouddeploy_delivery_pipeline.default.name
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}
